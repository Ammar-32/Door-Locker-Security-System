
HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00003d32  00003dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800156  00800156  00003ebc  2**0
                  ALLOC
  3 .stab         00003258  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000128a  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000839e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000084de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000864e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a297  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b182  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bf30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000caeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 35       	cpi	r26, 0x5A	; 90
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 09 	call	0x1222	; 0x1222 <main>
      8a:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e4       	ldi	r26, 0x45	; 69
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 1e 	jmp	0x3c6e	; 0x3c6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e4       	ldi	r24, 0x45	; 69
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 1e 	jmp	0x3c6e	; 0x3c6e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	e4 c0       	rjmp	.+456    	; 0xf00 <GPIO_writePin+0x1e4>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	e0 c0       	rjmp	.+448    	; 0xf00 <GPIO_writePin+0x1e4>
	{
		return;
	}

	switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	47 c0       	rjmp	.+142    	; 0xde4 <GPIO_writePin+0xc8>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	cb c0       	rjmp	.+406    	; 0xf00 <GPIO_writePin+0x1e4>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	67 c0       	rjmp	.+206    	; 0xe44 <GPIO_writePin+0x128>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	91 c0       	rjmp	.+290    	; 0xea4 <GPIO_writePin+0x188>
     d82:	be c0       	rjmp	.+380    	; 0xf00 <GPIO_writePin+0x1e4>
			{
			case PORTA_ID:
				if(value == LOGIC_LOW){
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	a9 f4       	brne	.+42     	; 0xdb4 <GPIO_writePin+0x98>
					CLEAR_BIT(PORTA, pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	a6 c0       	rjmp	.+332    	; 0xf00 <GPIO_writePin+0x1e4>
				}else if(value == LOGIC_HIGH){
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	09 f0       	breq	.+2      	; 0xdbc <GPIO_writePin+0xa0>
     dba:	a2 c0       	rjmp	.+324    	; 0xf00 <GPIO_writePin+0x1e4>
					SET_BIT(PORTA, pin_num);
     dbc:	ab e3       	ldi	r26, 0x3B	; 59
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	eb e3       	ldi	r30, 0x3B	; 59
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_writePin+0xbe>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_writePin+0xba>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	8e c0       	rjmp	.+284    	; 0xf00 <GPIO_writePin+0x1e4>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_LOW){
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	88 23       	and	r24, r24
     de8:	a9 f4       	brne	.+42     	; 0xe14 <GPIO_writePin+0xf8>
					CLEAR_BIT(PORTB, pin_num);
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_writePin+0xec>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_writePin+0xe8>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	76 c0       	rjmp	.+236    	; 0xf00 <GPIO_writePin+0x1e4>
				}else if(value ==LOGIC_HIGH){
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f0       	breq	.+2      	; 0xe1c <GPIO_writePin+0x100>
     e1a:	72 c0       	rjmp	.+228    	; 0xf00 <GPIO_writePin+0x1e4>
					SET_BIT(PORTB, pin_num);
     e1c:	a8 e3       	ldi	r26, 0x38	; 56
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e8 e3       	ldi	r30, 0x38	; 56
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <GPIO_writePin+0x11e>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <GPIO_writePin+0x11a>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	5e c0       	rjmp	.+188    	; 0xf00 <GPIO_writePin+0x1e4>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_LOW){
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 23       	and	r24, r24
     e48:	a9 f4       	brne	.+42     	; 0xe74 <GPIO_writePin+0x158>
					CLEAR_BIT(PORTC, pin_num);
     e4a:	a5 e3       	ldi	r26, 0x35	; 53
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e3       	ldi	r30, 0x35	; 53
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_writePin+0x14c>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_writePin+0x148>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	46 c0       	rjmp	.+140    	; 0xf00 <GPIO_writePin+0x1e4>
				}else if(value == LOGIC_HIGH){
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f0       	breq	.+2      	; 0xe7c <GPIO_writePin+0x160>
     e7a:	42 c0       	rjmp	.+132    	; 0xf00 <GPIO_writePin+0x1e4>
					SET_BIT(PORTC, pin_num);
     e7c:	a5 e3       	ldi	r26, 0x35	; 53
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e3       	ldi	r30, 0x35	; 53
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <GPIO_writePin+0x17e>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <GPIO_writePin+0x17a>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	2e c0       	rjmp	.+92     	; 0xf00 <GPIO_writePin+0x1e4>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_LOW){
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 23       	and	r24, r24
     ea8:	a9 f4       	brne	.+42     	; 0xed4 <GPIO_writePin+0x1b8>
					CLEAR_BIT(PORTD, pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x1ac>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x1a8>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	16 c0       	rjmp	.+44     	; 0xf00 <GPIO_writePin+0x1e4>
				}else if(value == LOGIC_HIGH){
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	99 f4       	brne	.+38     	; 0xf00 <GPIO_writePin+0x1e4>
					SET_BIT(PORTD, pin_num);
     eda:	a2 e3       	ldi	r26, 0x32	; 50
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e2 e3       	ldi	r30, 0x32	; 50
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <GPIO_writePin+0x1dc>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <GPIO_writePin+0x1d8>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
				}
				break;
			}
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <GPIO_readPin+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <GPIO_readPin+0x8>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <GPIO_readPin+0xa>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 30       	cpi	r24, 0x08	; 8
     f26:	18 f4       	brcc	.+6      	; 0xf2e <GPIO_readPin+0x1e>
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	10 f0       	brcs	.+4      	; 0xf32 <GPIO_readPin+0x22>
	{
		return 0;
     f2e:	1d 82       	std	Y+5, r1	; 0x05
     f30:	9b c0       	rjmp	.+310    	; 0x1068 <GPIO_readPin+0x158>
	}

	switch(port_num)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3c 83       	std	Y+4, r19	; 0x04
     f3a:	2b 83       	std	Y+3, r18	; 0x03
     f3c:	4b 81       	ldd	r20, Y+3	; 0x03
     f3e:	5c 81       	ldd	r21, Y+4	; 0x04
     f40:	41 30       	cpi	r20, 0x01	; 1
     f42:	51 05       	cpc	r21, r1
     f44:	b1 f1       	breq	.+108    	; 0xfb2 <GPIO_readPin+0xa2>
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	91 05       	cpc	r25, r1
     f4e:	34 f4       	brge	.+12     	; 0xf5c <GPIO_readPin+0x4c>
     f50:	2b 81       	ldd	r18, Y+3	; 0x03
     f52:	3c 81       	ldd	r19, Y+4	; 0x04
     f54:	21 15       	cp	r18, r1
     f56:	31 05       	cpc	r19, r1
     f58:	71 f0       	breq	.+28     	; 0xf76 <GPIO_readPin+0x66>
     f5a:	85 c0       	rjmp	.+266    	; 0x1066 <GPIO_readPin+0x156>
     f5c:	4b 81       	ldd	r20, Y+3	; 0x03
     f5e:	5c 81       	ldd	r21, Y+4	; 0x04
     f60:	42 30       	cpi	r20, 0x02	; 2
     f62:	51 05       	cpc	r21, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <GPIO_readPin+0x58>
     f66:	43 c0       	rjmp	.+134    	; 0xfee <GPIO_readPin+0xde>
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <GPIO_readPin+0x64>
     f72:	5b c0       	rjmp	.+182    	; 0x102a <GPIO_readPin+0x11a>
     f74:	78 c0       	rjmp	.+240    	; 0x1066 <GPIO_readPin+0x156>
			{
			case PORTA_ID:
				return GET_BIT(PINA, pin_num);
     f76:	e9 e3       	ldi	r30, 0x39	; 57
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_readPin+0x80>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	2a 95       	dec	r18
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_readPin+0x7c>
     f94:	9a 01       	movw	r18, r20
     f96:	28 23       	and	r18, r24
     f98:	39 23       	and	r19, r25
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_readPin+0x98>
     fa4:	55 95       	asr	r21
     fa6:	47 95       	ror	r20
     fa8:	8a 95       	dec	r24
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_readPin+0x94>
     fac:	ca 01       	movw	r24, r20
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	5b c0       	rjmp	.+182    	; 0x1068 <GPIO_readPin+0x158>
				break;
			case PORTB_ID:
				return GET_BIT(PINB, pin_num);
     fb2:	e6 e3       	ldi	r30, 0x36	; 54
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <GPIO_readPin+0xbc>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	2a 95       	dec	r18
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <GPIO_readPin+0xb8>
     fd0:	9a 01       	movw	r18, r20
     fd2:	28 23       	and	r18, r24
     fd4:	39 23       	and	r19, r25
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 2f       	mov	r24, r24
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a9 01       	movw	r20, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_readPin+0xd4>
     fe0:	55 95       	asr	r21
     fe2:	47 95       	ror	r20
     fe4:	8a 95       	dec	r24
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_readPin+0xd0>
     fe8:	ca 01       	movw	r24, r20
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	3d c0       	rjmp	.+122    	; 0x1068 <GPIO_readPin+0x158>
				break;
			case PORTC_ID:
				return GET_BIT(PINC, pin_num);
     fee:	e3 e3       	ldi	r30, 0x33	; 51
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_readPin+0xf8>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	2a 95       	dec	r18
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_readPin+0xf4>
    100c:	9a 01       	movw	r18, r20
    100e:	28 23       	and	r18, r24
    1010:	39 23       	and	r19, r25
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	a9 01       	movw	r20, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_readPin+0x110>
    101c:	55 95       	asr	r21
    101e:	47 95       	ror	r20
    1020:	8a 95       	dec	r24
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_readPin+0x10c>
    1024:	ca 01       	movw	r24, r20
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	1f c0       	rjmp	.+62     	; 0x1068 <GPIO_readPin+0x158>
				break;
			case PORTD_ID:
				return GET_BIT(PIND, pin_num);
    102a:	e0 e3       	ldi	r30, 0x30	; 48
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_readPin+0x134>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	2a 95       	dec	r18
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_readPin+0x130>
    1048:	9a 01       	movw	r18, r20
    104a:	28 23       	and	r18, r24
    104c:	39 23       	and	r19, r25
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a9 01       	movw	r20, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_readPin+0x14c>
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	8a 95       	dec	r24
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_readPin+0x148>
    1060:	ca 01       	movw	r24, r20
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <GPIO_readPin+0x158>
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_readPin+0x15c>
				break;
			}


}
    1068:	5d 81       	ldd	r21, Y+5	; 0x05
    106a:	5e 83       	std	Y+6, r21	; 0x06
    106c:	8e 81       	ldd	r24, Y+6	; 0x06
    106e:	26 96       	adiw	r28, 0x06	; 6
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_setupPortDirection+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <GPIO_setupPortDirection+0x8>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	90 f5       	brcc	.+100    	; 0x10fa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3c 83       	std	Y+4, r19	; 0x04
    109e:	2b 83       	std	Y+3, r18	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	d1 f0       	breq	.+52     	; 0x10de <GPIO_setupPortDirection+0x5e>
    10aa:	2b 81       	ldd	r18, Y+3	; 0x03
    10ac:	3c 81       	ldd	r19, Y+4	; 0x04
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <GPIO_setupPortDirection+0x3e>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <GPIO_setupPortDirection+0x54>
    10bc:	1e c0       	rjmp	.+60     	; 0x10fa <GPIO_setupPortDirection+0x7a>
    10be:	2b 81       	ldd	r18, Y+3	; 0x03
    10c0:	3c 81       	ldd	r19, Y+4	; 0x04
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <GPIO_setupPortDirection+0x68>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	91 05       	cpc	r25, r1
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <GPIO_setupPortDirection+0x72>
    10d2:	13 c0       	rjmp	.+38     	; 0x10fa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	80 83       	st	Z, r24
    10dc:	0e c0       	rjmp	.+28     	; 0x10fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10de:	e7 e3       	ldi	r30, 0x37	; 55
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	80 83       	st	Z, r24
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	80 83       	st	Z, r24
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10f2:	e1 e3       	ldi	r30, 0x31	; 49
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <GPIO_writePort+0x6>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <GPIO_writePort+0x8>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3c 83       	std	Y+4, r19	; 0x04
    1120:	2b 83       	std	Y+3, r18	; 0x03
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	d1 f0       	breq	.+52     	; 0x1160 <GPIO_writePort+0x58>
    112c:	2b 81       	ldd	r18, Y+3	; 0x03
    112e:	3c 81       	ldd	r19, Y+4	; 0x04
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	2c f4       	brge	.+10     	; 0x1140 <GPIO_writePort+0x38>
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	61 f0       	breq	.+24     	; 0x1156 <GPIO_writePort+0x4e>
    113e:	1e c0       	rjmp	.+60     	; 0x117c <GPIO_writePort+0x74>
    1140:	2b 81       	ldd	r18, Y+3	; 0x03
    1142:	3c 81       	ldd	r19, Y+4	; 0x04
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	81 f0       	breq	.+32     	; 0x116a <GPIO_writePort+0x62>
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	81 f0       	breq	.+32     	; 0x1174 <GPIO_writePort+0x6c>
    1154:	13 c0       	rjmp	.+38     	; 0x117c <GPIO_writePort+0x74>
	{
	case PORTA_ID:
		PORTA = value;
    1156:	eb e3       	ldi	r30, 0x3B	; 59
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
    115e:	0e c0       	rjmp	.+28     	; 0x117c <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
    1168:	09 c0       	rjmp	.+18     	; 0x117c <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    116a:	e5 e3       	ldi	r30, 0x35	; 53
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
    1172:	04 c0       	rjmp	.+8      	; 0x117c <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    1174:	e2 e3       	ldi	r30, 0x32	; 50
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	80 83       	st	Z, r24
		break;
	}

}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <GPIO_readPort+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <GPIO_readPort+0x8>
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <GPIO_readPort+0x1a>
	{
		return 0;
    11a0:	1c 82       	std	Y+4, r1	; 0x04
    11a2:	34 c0       	rjmp	.+104    	; 0x120c <GPIO_readPort+0x82>
	}
	switch(port_num)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3b 83       	std	Y+3, r19	; 0x03
    11ac:	2a 83       	std	Y+2, r18	; 0x02
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <GPIO_readPort+0x62>
    11b8:	2a 81       	ldd	r18, Y+2	; 0x02
    11ba:	3b 81       	ldd	r19, Y+3	; 0x03
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <GPIO_readPort+0x42>
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	9b 81       	ldd	r25, Y+3	; 0x03
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <GPIO_readPort+0x58>
    11ca:	1f c0       	rjmp	.+62     	; 0x120a <GPIO_readPort+0x80>
    11cc:	2a 81       	ldd	r18, Y+2	; 0x02
    11ce:	3b 81       	ldd	r19, Y+3	; 0x03
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <GPIO_readPort+0x6c>
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	81 f0       	breq	.+32     	; 0x1200 <GPIO_readPort+0x76>
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <GPIO_readPort+0x80>
	{
	case PORTA_ID:
		return PINA;
    11e2:	e9 e3       	ldi	r30, 0x39	; 57
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	90 81       	ld	r25, Z
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	10 c0       	rjmp	.+32     	; 0x120c <GPIO_readPort+0x82>
		break;
	case PORTB_ID:
		return PINB;
    11ec:	e6 e3       	ldi	r30, 0x36	; 54
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	20 81       	ld	r18, Z
    11f2:	2c 83       	std	Y+4, r18	; 0x04
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <GPIO_readPort+0x82>
		break;
	case PORTC_ID:
		return PINC;
    11f6:	e3 e3       	ldi	r30, 0x33	; 51
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	30 81       	ld	r19, Z
    11fc:	3c 83       	std	Y+4, r19	; 0x04
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <GPIO_readPort+0x82>
		break;
	case PORTD_ID:
		return PIND;
    1200:	e0 e3       	ldi	r30, 0x30	; 48
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8c 83       	std	Y+4, r24	; 0x04
    1208:	01 c0       	rjmp	.+2      	; 0x120c <GPIO_readPort+0x82>
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_readPort+0x86>
		break;
	}
}
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	9d 83       	std	Y+5, r25	; 0x05
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <main>:
// Configs
UART_Config UConfig = {ASYNCH,ENABLED_EVEN,BIT_1}; // Asynchronous with even parity and only one stop bit
TIMER0_Config TConfig = {OVERFLOW, 0, F_CPU_1024, OVERFLOW_INT_ENABLE, 3, 0};

// Main Function
int main(void){
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	cc 5e       	subi	r28, 0xEC	; 236
    1230:	d0 40       	sbci	r29, 0x00	; 0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    123c:	af e5       	ldi	r26, 0x5F	; 95
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ef e5       	ldi	r30, 0x5F	; 95
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 68       	ori	r24, 0x80	; 128
    1248:	8c 93       	st	X, r24

	LCD_init();
    124a:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <LCD_init>
	UART_init(&UConfig);
    124e:	8d e4       	ldi	r24, 0x4D	; 77
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <UART_init>


	uint8 password[4], confirmPassword[4];
	uint8 isVerified, command;

	TIMER0_setCallback(timerHandler);
    1256:	86 e6       	ldi	r24, 0x66	; 102
    1258:	96 e1       	ldi	r25, 0x16	; 22
    125a:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <TIMER0_setCallback>

	do{
		LCD_clearScreen();
    125e:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
		LCD_displayString("Enter Password");
    1262:	80 e6       	ldi	r24, 0x60	; 96
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>

		// get password from keypad and send it with UART to Control ECU
		enterPassword(password);
    126a:	ce 01       	movw	r24, r28
    126c:	8b 51       	subi	r24, 0x1B	; 27
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	0e 94 4a 14 	call	0x2894	; 0x2894 <enterPassword>
    1274:	fe 01       	movw	r30, r28
    1276:	e3 52       	subi	r30, 0x23	; 35
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a2 e0       	ldi	r26, 0x02	; 2
    1280:	b3 e4       	ldi	r27, 0x43	; 67
    1282:	80 83       	st	Z, r24
    1284:	91 83       	std	Z+1, r25	; 0x01
    1286:	a2 83       	std	Z+2, r26	; 0x02
    1288:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	8e 01       	movw	r16, r28
    128c:	07 52       	subi	r16, 0x27	; 39
    128e:	1f 4f       	sbci	r17, 0xFF	; 255
    1290:	fe 01       	movw	r30, r28
    1292:	e3 52       	subi	r30, 0x23	; 35
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a ef       	ldi	r20, 0xFA	; 250
    12a4:	54 e4       	ldi	r21, 0x44	; 68
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	f8 01       	movw	r30, r16
    12b0:	80 83       	st	Z, r24
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	a2 83       	std	Z+2, r26	; 0x02
    12b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b8:	fe 01       	movw	r30, r28
    12ba:	e7 52       	subi	r30, 0x27	; 39
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e8       	ldi	r20, 0x80	; 128
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d2:	88 23       	and	r24, r24
    12d4:	44 f4       	brge	.+16     	; 0x12e6 <main+0xc4>
		__ticks = 1;
    12d6:	fe 01       	movw	r30, r28
    12d8:	e9 52       	subi	r30, 0x29	; 41
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
    12e4:	64 c0       	rjmp	.+200    	; 0x13ae <main+0x18c>
	else if (__tmp > 65535)
    12e6:	fe 01       	movw	r30, r28
    12e8:	e7 52       	subi	r30, 0x27	; 39
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	3f ef       	ldi	r19, 0xFF	; 255
    12f8:	4f e7       	ldi	r20, 0x7F	; 127
    12fa:	57 e4       	ldi	r21, 0x47	; 71
    12fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1300:	18 16       	cp	r1, r24
    1302:	0c f0       	brlt	.+2      	; 0x1306 <main+0xe4>
    1304:	43 c0       	rjmp	.+134    	; 0x138c <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1306:	fe 01       	movw	r30, r28
    1308:	e3 52       	subi	r30, 0x23	; 35
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	60 81       	ld	r22, Z
    130e:	71 81       	ldd	r23, Z+1	; 0x01
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	93 81       	ldd	r25, Z+3	; 0x03
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e2       	ldi	r20, 0x20	; 32
    131a:	51 e4       	ldi	r21, 0x41	; 65
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	8e 01       	movw	r16, r28
    1326:	09 52       	subi	r16, 0x29	; 41
    1328:	1f 4f       	sbci	r17, 0xFF	; 255
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	f8 01       	movw	r30, r16
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24
    133c:	1f c0       	rjmp	.+62     	; 0x137c <main+0x15a>
    133e:	fe 01       	movw	r30, r28
    1340:	eb 52       	subi	r30, 0x2B	; 43
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	88 ec       	ldi	r24, 0xC8	; 200
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134c:	fe 01       	movw	r30, r28
    134e:	eb 52       	subi	r30, 0x2B	; 43
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <main+0x134>
    135a:	fe 01       	movw	r30, r28
    135c:	eb 52       	subi	r30, 0x2B	; 43
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1364:	de 01       	movw	r26, r28
    1366:	a9 52       	subi	r26, 0x29	; 41
    1368:	bf 4f       	sbci	r27, 0xFF	; 255
    136a:	fe 01       	movw	r30, r28
    136c:	e9 52       	subi	r30, 0x29	; 41
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	11 96       	adiw	r26, 0x01	; 1
    1378:	9c 93       	st	X, r25
    137a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137c:	fe 01       	movw	r30, r28
    137e:	e9 52       	subi	r30, 0x29	; 41
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	d1 f6       	brne	.-76     	; 0x133e <main+0x11c>
    138a:	27 c0       	rjmp	.+78     	; 0x13da <main+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	8e 01       	movw	r16, r28
    138e:	09 52       	subi	r16, 0x29	; 41
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	fe 01       	movw	r30, r28
    1394:	e7 52       	subi	r30, 0x27	; 39
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	f8 01       	movw	r30, r16
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
    13ae:	de 01       	movw	r26, r28
    13b0:	ad 52       	subi	r26, 0x2D	; 45
    13b2:	bf 4f       	sbci	r27, 0xFF	; 255
    13b4:	fe 01       	movw	r30, r28
    13b6:	e9 52       	subi	r30, 0x29	; 41
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	8d 93       	st	X+, r24
    13c0:	9c 93       	st	X, r25
    13c2:	fe 01       	movw	r30, r28
    13c4:	ed 52       	subi	r30, 0x2D	; 45
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <main+0x1aa>
    13d0:	fe 01       	movw	r30, r28
    13d2:	ed 52       	subi	r30, 0x2D	; 45
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
		_delay_ms(DELAY_UART);
		sendPassword(password);
    13da:	ce 01       	movw	r24, r28
    13dc:	8b 51       	subi	r24, 0x1B	; 27
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sendPassword>

		// confirm password and send it with UART to Control ECU
		LCD_clearScreen();
    13e4:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
		LCD_displayString("Confirm Password");
    13e8:	8f e6       	ldi	r24, 0x6F	; 111
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
		enterPassword( confirmPassword );
    13f0:	ce 01       	movw	r24, r28
    13f2:	87 51       	subi	r24, 0x17	; 23
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	0e 94 4a 14 	call	0x2894	; 0x2894 <enterPassword>
    13fa:	fe 01       	movw	r30, r28
    13fc:	e1 53       	subi	r30, 0x31	; 49
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a2 e0       	ldi	r26, 0x02	; 2
    1406:	b3 e4       	ldi	r27, 0x43	; 67
    1408:	80 83       	st	Z, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	a2 83       	std	Z+2, r26	; 0x02
    140e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1410:	8e 01       	movw	r16, r28
    1412:	05 53       	subi	r16, 0x35	; 53
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	fe 01       	movw	r30, r28
    1418:	e1 53       	subi	r30, 0x31	; 49
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	4a ef       	ldi	r20, 0xFA	; 250
    142a:	54 e4       	ldi	r21, 0x44	; 68
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	f8 01       	movw	r30, r16
    1436:	80 83       	st	Z, r24
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	a2 83       	std	Z+2, r26	; 0x02
    143c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    143e:	fe 01       	movw	r30, r28
    1440:	e5 53       	subi	r30, 0x35	; 53
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	60 81       	ld	r22, Z
    1446:	71 81       	ldd	r23, Z+1	; 0x01
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	44 f4       	brge	.+16     	; 0x146c <main+0x24a>
		__ticks = 1;
    145c:	fe 01       	movw	r30, r28
    145e:	e7 53       	subi	r30, 0x37	; 55
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
    146a:	64 c0       	rjmp	.+200    	; 0x1534 <main+0x312>
	else if (__tmp > 65535)
    146c:	fe 01       	movw	r30, r28
    146e:	e5 53       	subi	r30, 0x35	; 53
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	3f ef       	ldi	r19, 0xFF	; 255
    147e:	4f e7       	ldi	r20, 0x7F	; 127
    1480:	57 e4       	ldi	r21, 0x47	; 71
    1482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1486:	18 16       	cp	r1, r24
    1488:	0c f0       	brlt	.+2      	; 0x148c <main+0x26a>
    148a:	43 c0       	rjmp	.+134    	; 0x1512 <main+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	fe 01       	movw	r30, r28
    148e:	e1 53       	subi	r30, 0x31	; 49
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e2       	ldi	r20, 0x20	; 32
    14a0:	51 e4       	ldi	r21, 0x41	; 65
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8e 01       	movw	r16, r28
    14ac:	07 53       	subi	r16, 0x37	; 55
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	f8 01       	movw	r30, r16
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	80 83       	st	Z, r24
    14c2:	1f c0       	rjmp	.+62     	; 0x1502 <main+0x2e0>
    14c4:	fe 01       	movw	r30, r28
    14c6:	e9 53       	subi	r30, 0x39	; 57
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	88 ec       	ldi	r24, 0xC8	; 200
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	80 83       	st	Z, r24
    14d2:	fe 01       	movw	r30, r28
    14d4:	e9 53       	subi	r30, 0x39	; 57
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <main+0x2ba>
    14e0:	fe 01       	movw	r30, r28
    14e2:	e9 53       	subi	r30, 0x39	; 57
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ea:	de 01       	movw	r26, r28
    14ec:	a7 53       	subi	r26, 0x37	; 55
    14ee:	bf 4f       	sbci	r27, 0xFF	; 255
    14f0:	fe 01       	movw	r30, r28
    14f2:	e7 53       	subi	r30, 0x37	; 55
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	9c 93       	st	X, r25
    1500:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	fe 01       	movw	r30, r28
    1504:	e7 53       	subi	r30, 0x37	; 55
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	d1 f6       	brne	.-76     	; 0x14c4 <main+0x2a2>
    1510:	27 c0       	rjmp	.+78     	; 0x1560 <main+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1512:	8e 01       	movw	r16, r28
    1514:	07 53       	subi	r16, 0x37	; 55
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	fe 01       	movw	r30, r28
    151a:	e5 53       	subi	r30, 0x35	; 53
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	93 81       	ldd	r25, Z+3	; 0x03
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	f8 01       	movw	r30, r16
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24
    1534:	de 01       	movw	r26, r28
    1536:	ab 53       	subi	r26, 0x3B	; 59
    1538:	bf 4f       	sbci	r27, 0xFF	; 255
    153a:	fe 01       	movw	r30, r28
    153c:	e7 53       	subi	r30, 0x37	; 55
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	8d 93       	st	X+, r24
    1546:	9c 93       	st	X, r25
    1548:	fe 01       	movw	r30, r28
    154a:	eb 53       	subi	r30, 0x3B	; 59
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <main+0x330>
    1556:	fe 01       	movw	r30, r28
    1558:	eb 53       	subi	r30, 0x3B	; 59
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	80 83       	st	Z, r24
		_delay_ms(DELAY_UART);
		sendPassword( confirmPassword );
    1560:	ce 01       	movw	r24, r28
    1562:	87 51       	subi	r24, 0x17	; 23
    1564:	9f 4f       	sbci	r25, 0xFF	; 255
    1566:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sendPassword>
    156a:	fe 01       	movw	r30, r28
    156c:	ef 53       	subi	r30, 0x3F	; 63
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a2 e0       	ldi	r26, 0x02	; 2
    1576:	b3 e4       	ldi	r27, 0x43	; 67
    1578:	80 83       	st	Z, r24
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	a2 83       	std	Z+2, r26	; 0x02
    157e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1580:	8e 01       	movw	r16, r28
    1582:	03 54       	subi	r16, 0x43	; 67
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	fe 01       	movw	r30, r28
    1588:	ef 53       	subi	r30, 0x3F	; 63
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	f8 01       	movw	r30, r16
    15a6:	80 83       	st	Z, r24
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	a2 83       	std	Z+2, r26	; 0x02
    15ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ae:	fe 01       	movw	r30, r28
    15b0:	e3 54       	subi	r30, 0x43	; 67
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e8       	ldi	r20, 0x80	; 128
    15c2:	5f e3       	ldi	r21, 0x3F	; 63
    15c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	44 f4       	brge	.+16     	; 0x15dc <main+0x3ba>
		__ticks = 1;
    15cc:	fe 01       	movw	r30, r28
    15ce:	e5 54       	subi	r30, 0x45	; 69
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
    15da:	64 c0       	rjmp	.+200    	; 0x16a4 <main+0x482>
	else if (__tmp > 65535)
    15dc:	fe 01       	movw	r30, r28
    15de:	e3 54       	subi	r30, 0x43	; 67
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	57 e4       	ldi	r21, 0x47	; 71
    15f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	0c f0       	brlt	.+2      	; 0x15fc <main+0x3da>
    15fa:	43 c0       	rjmp	.+134    	; 0x1682 <main+0x460>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	fe 01       	movw	r30, r28
    15fe:	ef 53       	subi	r30, 0x3F	; 63
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e2       	ldi	r20, 0x20	; 32
    1610:	51 e4       	ldi	r21, 0x41	; 65
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8e 01       	movw	r16, r28
    161c:	05 54       	subi	r16, 0x45	; 69
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	f8 01       	movw	r30, r16
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	80 83       	st	Z, r24
    1632:	1f c0       	rjmp	.+62     	; 0x1672 <main+0x450>
    1634:	fe 01       	movw	r30, r28
    1636:	e7 54       	subi	r30, 0x47	; 71
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	88 ec       	ldi	r24, 0xC8	; 200
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	fe 01       	movw	r30, r28
    1644:	e7 54       	subi	r30, 0x47	; 71
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <main+0x42a>
    1650:	fe 01       	movw	r30, r28
    1652:	e7 54       	subi	r30, 0x47	; 71
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165a:	de 01       	movw	r26, r28
    165c:	a5 54       	subi	r26, 0x45	; 69
    165e:	bf 4f       	sbci	r27, 0xFF	; 255
    1660:	fe 01       	movw	r30, r28
    1662:	e5 54       	subi	r30, 0x45	; 69
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	9c 93       	st	X, r25
    1670:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1672:	fe 01       	movw	r30, r28
    1674:	e5 54       	subi	r30, 0x45	; 69
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	d1 f6       	brne	.-76     	; 0x1634 <main+0x412>
    1680:	27 c0       	rjmp	.+78     	; 0x16d0 <main+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1682:	8e 01       	movw	r16, r28
    1684:	05 54       	subi	r16, 0x45	; 69
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	fe 01       	movw	r30, r28
    168a:	e3 54       	subi	r30, 0x43	; 67
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	f8 01       	movw	r30, r16
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	de 01       	movw	r26, r28
    16a6:	a9 54       	subi	r26, 0x49	; 73
    16a8:	bf 4f       	sbci	r27, 0xFF	; 255
    16aa:	fe 01       	movw	r30, r28
    16ac:	e5 54       	subi	r30, 0x45	; 69
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	8d 93       	st	X+, r24
    16b6:	9c 93       	st	X, r25
    16b8:	fe 01       	movw	r30, r28
    16ba:	e9 54       	subi	r30, 0x49	; 73
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <main+0x4a0>
    16c6:	fe 01       	movw	r30, r28
    16c8:	e9 54       	subi	r30, 0x49	; 73
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	80 83       	st	Z, r24
		_delay_ms(DELAY_UART);

		// recieve verification byte from Control ECU
		// if password match -> 1
		// doesnt match -> 0
		isVerified = UART_recieveByte();
    16d0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    16d4:	fe 01       	movw	r30, r28
    16d6:	ec 51       	subi	r30, 0x1C	; 28
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	80 83       	st	Z, r24
    16dc:	fe 01       	movw	r30, r28
    16de:	ed 54       	subi	r30, 0x4D	; 77
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a2 e0       	ldi	r26, 0x02	; 2
    16e8:	b3 e4       	ldi	r27, 0x43	; 67
    16ea:	80 83       	st	Z, r24
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	a2 83       	std	Z+2, r26	; 0x02
    16f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f2:	8e 01       	movw	r16, r28
    16f4:	01 55       	subi	r16, 0x51	; 81
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	fe 01       	movw	r30, r28
    16fa:	ed 54       	subi	r30, 0x4D	; 77
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	60 81       	ld	r22, Z
    1700:	71 81       	ldd	r23, Z+1	; 0x01
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4a ef       	ldi	r20, 0xFA	; 250
    170c:	54 e4       	ldi	r21, 0x44	; 68
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	f8 01       	movw	r30, r16
    1718:	80 83       	st	Z, r24
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	a2 83       	std	Z+2, r26	; 0x02
    171e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1720:	fe 01       	movw	r30, r28
    1722:	e1 55       	subi	r30, 0x51	; 81
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	44 f4       	brge	.+16     	; 0x174e <main+0x52c>
		__ticks = 1;
    173e:	fe 01       	movw	r30, r28
    1740:	e3 55       	subi	r30, 0x53	; 83
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
    174c:	64 c0       	rjmp	.+200    	; 0x1816 <main+0x5f4>
	else if (__tmp > 65535)
    174e:	fe 01       	movw	r30, r28
    1750:	e1 55       	subi	r30, 0x51	; 81
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	0c f0       	brlt	.+2      	; 0x176e <main+0x54c>
    176c:	43 c0       	rjmp	.+134    	; 0x17f4 <main+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176e:	fe 01       	movw	r30, r28
    1770:	ed 54       	subi	r30, 0x4D	; 77
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e2       	ldi	r20, 0x20	; 32
    1782:	51 e4       	ldi	r21, 0x41	; 65
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8e 01       	movw	r16, r28
    178e:	03 55       	subi	r16, 0x53	; 83
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	f8 01       	movw	r30, r16
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
    17a4:	1f c0       	rjmp	.+62     	; 0x17e4 <main+0x5c2>
    17a6:	fe 01       	movw	r30, r28
    17a8:	e5 55       	subi	r30, 0x55	; 85
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	88 ec       	ldi	r24, 0xC8	; 200
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	91 83       	std	Z+1, r25	; 0x01
    17b2:	80 83       	st	Z, r24
    17b4:	fe 01       	movw	r30, r28
    17b6:	e5 55       	subi	r30, 0x55	; 85
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 81       	ld	r24, Z
    17bc:	91 81       	ldd	r25, Z+1	; 0x01
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <main+0x59c>
    17c2:	fe 01       	movw	r30, r28
    17c4:	e5 55       	subi	r30, 0x55	; 85
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	de 01       	movw	r26, r28
    17ce:	a3 55       	subi	r26, 0x53	; 83
    17d0:	bf 4f       	sbci	r27, 0xFF	; 255
    17d2:	fe 01       	movw	r30, r28
    17d4:	e3 55       	subi	r30, 0x53	; 83
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	11 96       	adiw	r26, 0x01	; 1
    17e0:	9c 93       	st	X, r25
    17e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	fe 01       	movw	r30, r28
    17e6:	e3 55       	subi	r30, 0x53	; 83
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	d1 f6       	brne	.-76     	; 0x17a6 <main+0x584>
    17f2:	28 c0       	rjmp	.+80     	; 0x1844 <main+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f4:	8e 01       	movw	r16, r28
    17f6:	03 55       	subi	r16, 0x53	; 83
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	e1 55       	subi	r30, 0x51	; 81
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	f8 01       	movw	r30, r16
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	de 01       	movw	r26, r28
    1818:	a7 55       	subi	r26, 0x57	; 87
    181a:	bf 4f       	sbci	r27, 0xFF	; 255
    181c:	fe 01       	movw	r30, r28
    181e:	e3 55       	subi	r30, 0x53	; 83
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	91 81       	ldd	r25, Z+1	; 0x01
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24
    182c:	fe 01       	movw	r30, r28
    182e:	e7 55       	subi	r30, 0x57	; 87
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <main+0x614>
    183a:	fe 01       	movw	r30, r28
    183c:	e7 55       	subi	r30, 0x57	; 87
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
		_delay_ms(DELAY_UART);

		if(isVerified){
    1844:	fe 01       	movw	r30, r28
    1846:	ec 51       	subi	r30, 0x1C	; 28
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 81       	ld	r24, Z
    184c:	88 23       	and	r24, r24
    184e:	39 f0       	breq	.+14     	; 0x185e <main+0x63c>
			LCD_clearScreen();
    1850:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
			LCD_displayString("Password Set");
    1854:	80 e8       	ldi	r24, 0x80	; 128
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
    185c:	06 c0       	rjmp	.+12     	; 0x186a <main+0x648>
		}else{
			LCD_clearScreen();
    185e:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1862:	8d e8       	ldi	r24, 0x8D	; 141
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
    186a:	fe 01       	movw	r30, r28
    186c:	eb 55       	subi	r30, 0x5B	; 91
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e4       	ldi	r25, 0x40	; 64
    1874:	ac e1       	ldi	r26, 0x1C	; 28
    1876:	b5 e4       	ldi	r27, 0x45	; 69
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	8e 01       	movw	r16, r28
    1882:	0f 55       	subi	r16, 0x5F	; 95
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	fe 01       	movw	r30, r28
    1888:	eb 55       	subi	r30, 0x5B	; 91
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	4a ef       	ldi	r20, 0xFA	; 250
    189a:	54 e4       	ldi	r21, 0x44	; 68
    189c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	f8 01       	movw	r30, r16
    18a6:	80 83       	st	Z, r24
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	a2 83       	std	Z+2, r26	; 0x02
    18ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ae:	fe 01       	movw	r30, r28
    18b0:	ef 55       	subi	r30, 0x5F	; 95
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	44 f4       	brge	.+16     	; 0x18dc <main+0x6ba>
		__ticks = 1;
    18cc:	fe 01       	movw	r30, r28
    18ce:	e1 56       	subi	r30, 0x61	; 97
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
    18da:	64 c0       	rjmp	.+200    	; 0x19a4 <main+0x782>
	else if (__tmp > 65535)
    18dc:	fe 01       	movw	r30, r28
    18de:	ef 55       	subi	r30, 0x5F	; 95
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	57 e4       	ldi	r21, 0x47	; 71
    18f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <main+0x6da>
    18fa:	43 c0       	rjmp	.+134    	; 0x1982 <main+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	fe 01       	movw	r30, r28
    18fe:	eb 55       	subi	r30, 0x5B	; 91
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	8e 01       	movw	r16, r28
    191c:	01 56       	subi	r16, 0x61	; 97
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	f8 01       	movw	r30, r16
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
    1932:	1f c0       	rjmp	.+62     	; 0x1972 <main+0x750>
    1934:	fe 01       	movw	r30, r28
    1936:	e3 56       	subi	r30, 0x63	; 99
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	88 ec       	ldi	r24, 0xC8	; 200
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24
    1942:	fe 01       	movw	r30, r28
    1944:	e3 56       	subi	r30, 0x63	; 99
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	80 81       	ld	r24, Z
    194a:	91 81       	ldd	r25, Z+1	; 0x01
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <main+0x72a>
    1950:	fe 01       	movw	r30, r28
    1952:	e3 56       	subi	r30, 0x63	; 99
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195a:	de 01       	movw	r26, r28
    195c:	a1 56       	subi	r26, 0x61	; 97
    195e:	bf 4f       	sbci	r27, 0xFF	; 255
    1960:	fe 01       	movw	r30, r28
    1962:	e1 56       	subi	r30, 0x61	; 97
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	11 96       	adiw	r26, 0x01	; 1
    196e:	9c 93       	st	X, r25
    1970:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	fe 01       	movw	r30, r28
    1974:	e1 56       	subi	r30, 0x61	; 97
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	d1 f6       	brne	.-76     	; 0x1934 <main+0x712>
    1980:	28 c0       	rjmp	.+80     	; 0x19d2 <main+0x7b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	8e 01       	movw	r16, r28
    1984:	01 56       	subi	r16, 0x61	; 97
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	fe 01       	movw	r30, r28
    198a:	ef 55       	subi	r30, 0x5F	; 95
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	f8 01       	movw	r30, r16
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
    19a4:	de 01       	movw	r26, r28
    19a6:	a5 56       	subi	r26, 0x65	; 101
    19a8:	bf 4f       	sbci	r27, 0xFF	; 255
    19aa:	fe 01       	movw	r30, r28
    19ac:	e1 56       	subi	r30, 0x61	; 97
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 81       	ld	r24, Z
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	9c 93       	st	X, r25
    19b8:	8e 93       	st	-X, r24
    19ba:	fe 01       	movw	r30, r28
    19bc:	e5 56       	subi	r30, 0x65	; 101
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <main+0x7a2>
    19c8:	fe 01       	movw	r30, r28
    19ca:	e5 56       	subi	r30, 0x65	; 101
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
		}

		_delay_ms(2500);

	}
	while(isVerified == 0);
    19d2:	fe 01       	movw	r30, r28
    19d4:	ec 51       	subi	r30, 0x1C	; 28
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	88 23       	and	r24, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <main+0x7be>
    19de:	3f cc       	rjmp	.-1922   	; 0x125e <main+0x3c>

	while(1){
		LCD_clearScreen();
    19e0:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "- :Change PW");
    19e4:	2c e9       	ldi	r18, 0x9C	; 156
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	a9 01       	movw	r20, r18
    19ee:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "+ :Open Door");
    19f2:	29 ea       	ldi	r18, 0xA9	; 169
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	a9 01       	movw	r20, r18
    19fc:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <LCD_displayStringRowColumn>
		command = KEYPAD_getPressedKey();
    1a00:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <KEYPAD_getPressedKey>
    1a04:	fe 01       	movw	r30, r28
    1a06:	ed 51       	subi	r30, 0x1D	; 29
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 83       	st	Z, r24
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e9 56       	subi	r30, 0x69	; 105
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	aa ef       	ldi	r26, 0xFA	; 250
    1a18:	b3 e4       	ldi	r27, 0x43	; 67
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	8e 01       	movw	r16, r28
    1a24:	0d 56       	subi	r16, 0x6D	; 109
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e9 56       	subi	r30, 0x69	; 105
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a ef       	ldi	r20, 0xFA	; 250
    1a3c:	54 e4       	ldi	r21, 0x44	; 68
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	f8 01       	movw	r30, r16
    1a48:	80 83       	st	Z, r24
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	a2 83       	std	Z+2, r26	; 0x02
    1a4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a50:	fe 01       	movw	r30, r28
    1a52:	ed 56       	subi	r30, 0x6D	; 109
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	5f e3       	ldi	r21, 0x3F	; 63
    1a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a6a:	88 23       	and	r24, r24
    1a6c:	44 f4       	brge	.+16     	; 0x1a7e <main+0x85c>
		__ticks = 1;
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 56       	subi	r30, 0x6F	; 111
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    1a7c:	64 c0       	rjmp	.+200    	; 0x1b46 <main+0x924>
	else if (__tmp > 65535)
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ed 56       	subi	r30, 0x6D	; 109
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	0c f0       	brlt	.+2      	; 0x1a9e <main+0x87c>
    1a9c:	43 c0       	rjmp	.+134    	; 0x1b24 <main+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	e9 56       	subi	r30, 0x69	; 105
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8e 01       	movw	r16, r28
    1abe:	0f 56       	subi	r16, 0x6F	; 111
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	f8 01       	movw	r30, r16
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	1f c0       	rjmp	.+62     	; 0x1b14 <main+0x8f2>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e1 57       	subi	r30, 0x71	; 113
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	88 ec       	ldi	r24, 0xC8	; 200
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e1 57       	subi	r30, 0x71	; 113
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <main+0x8cc>
    1af2:	fe 01       	movw	r30, r28
    1af4:	e1 57       	subi	r30, 0x71	; 113
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	91 83       	std	Z+1, r25	; 0x01
    1afa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	de 01       	movw	r26, r28
    1afe:	af 56       	subi	r26, 0x6F	; 111
    1b00:	bf 4f       	sbci	r27, 0xFF	; 255
    1b02:	fe 01       	movw	r30, r28
    1b04:	ef 56       	subi	r30, 0x6F	; 111
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	11 96       	adiw	r26, 0x01	; 1
    1b10:	9c 93       	st	X, r25
    1b12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	fe 01       	movw	r30, r28
    1b16:	ef 56       	subi	r30, 0x6F	; 111
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 81       	ld	r24, Z
    1b1c:	91 81       	ldd	r25, Z+1	; 0x01
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	d1 f6       	brne	.-76     	; 0x1ad6 <main+0x8b4>
    1b22:	27 c0       	rjmp	.+78     	; 0x1b72 <main+0x950>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b24:	8e 01       	movw	r16, r28
    1b26:	0f 56       	subi	r16, 0x6F	; 111
    1b28:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ed 56       	subi	r30, 0x6D	; 109
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	f8 01       	movw	r30, r16
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	de 01       	movw	r26, r28
    1b48:	a3 57       	subi	r26, 0x73	; 115
    1b4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ef 56       	subi	r30, 0x6F	; 111
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	8d 93       	st	X+, r24
    1b58:	9c 93       	st	X, r25
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e3 57       	subi	r30, 0x73	; 115
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <main+0x942>
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e3 57       	subi	r30, 0x73	; 115
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
		_delay_ms(DELAY_Keypad);
		UART_sendByte(command);
    1b72:	fe 01       	movw	r30, r28
    1b74:	ed 51       	subi	r30, 0x1D	; 29
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <UART_sendByte>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e7 57       	subi	r30, 0x77	; 119
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a2 e0       	ldi	r26, 0x02	; 2
    1b8a:	b3 e4       	ldi	r27, 0x43	; 67
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	a2 83       	std	Z+2, r26	; 0x02
    1b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	8e 01       	movw	r16, r28
    1b96:	0b 57       	subi	r16, 0x7B	; 123
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e7 57       	subi	r30, 0x77	; 119
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 83       	st	Z, r24
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	a2 83       	std	Z+2, r26	; 0x02
    1bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	eb 57       	subi	r30, 0x7B	; 123
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	44 f4       	brge	.+16     	; 0x1bf0 <main+0x9ce>
		__ticks = 1;
    1be0:	fe 01       	movw	r30, r28
    1be2:	ed 57       	subi	r30, 0x7D	; 125
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	64 c0       	rjmp	.+200    	; 0x1cb8 <main+0xa96>
	else if (__tmp > 65535)
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	eb 57       	subi	r30, 0x7B	; 123
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	60 81       	ld	r22, Z
    1bf8:	71 81       	ldd	r23, Z+1	; 0x01
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	0c f0       	brlt	.+2      	; 0x1c10 <main+0x9ee>
    1c0e:	43 c0       	rjmp	.+134    	; 0x1c96 <main+0xa74>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	fe 01       	movw	r30, r28
    1c12:	e7 57       	subi	r30, 0x77	; 119
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8e 01       	movw	r16, r28
    1c30:	0d 57       	subi	r16, 0x7D	; 125
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	f8 01       	movw	r30, r16
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
    1c46:	1f c0       	rjmp	.+62     	; 0x1c86 <main+0xa64>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ef 57       	subi	r30, 0x7F	; 127
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	88 ec       	ldi	r24, 0xC8	; 200
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	fe 01       	movw	r30, r28
    1c58:	ef 57       	subi	r30, 0x7F	; 127
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <main+0xa3e>
    1c64:	fe 01       	movw	r30, r28
    1c66:	ef 57       	subi	r30, 0x7F	; 127
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	de 01       	movw	r26, r28
    1c70:	ad 57       	subi	r26, 0x7D	; 125
    1c72:	bf 4f       	sbci	r27, 0xFF	; 255
    1c74:	fe 01       	movw	r30, r28
    1c76:	ed 57       	subi	r30, 0x7D	; 125
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	9c 93       	st	X, r25
    1c84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	fe 01       	movw	r30, r28
    1c88:	ed 57       	subi	r30, 0x7D	; 125
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	d1 f6       	brne	.-76     	; 0x1c48 <main+0xa26>
    1c94:	28 c0       	rjmp	.+80     	; 0x1ce6 <main+0xac4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	8e 01       	movw	r16, r28
    1c98:	0d 57       	subi	r16, 0x7D	; 125
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	eb 57       	subi	r30, 0x7B	; 123
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    1cb8:	de 01       	movw	r26, r28
    1cba:	a1 58       	subi	r26, 0x81	; 129
    1cbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ed 57       	subi	r30, 0x7D	; 125
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	9c 93       	st	X, r25
    1ccc:	8e 93       	st	-X, r24
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e1 58       	subi	r30, 0x81	; 129
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <main+0xab6>
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e1 58       	subi	r30, 0x81	; 129
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
		_delay_ms(DELAY_UART);
		if(command == '+'){
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ed 51       	subi	r30, 0x1D	; 29
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 81       	ld	r24, Z
    1cee:	8b 32       	cpi	r24, 0x2B	; 43
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <main+0xad2>
    1cf2:	a0 c1       	rjmp	.+832    	; 0x2034 <main+0xe12>
			LCD_clearScreen();
    1cf4:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
			LCD_displayString("Enter Password");
    1cf8:	80 e6       	ldi	r24, 0x60	; 96
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
			enterPassword(password);
    1d00:	ce 01       	movw	r24, r28
    1d02:	8b 51       	subi	r24, 0x1B	; 27
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	0e 94 4a 14 	call	0x2894	; 0x2894 <enterPassword>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e5 58       	subi	r30, 0x85	; 133
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a2 e0       	ldi	r26, 0x02	; 2
    1d16:	b3 e4       	ldi	r27, 0x43	; 67
    1d18:	80 83       	st	Z, r24
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	a2 83       	std	Z+2, r26	; 0x02
    1d1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d20:	8e 01       	movw	r16, r28
    1d22:	09 58       	subi	r16, 0x89	; 137
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e5 58       	subi	r30, 0x85	; 133
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a ef       	ldi	r20, 0xFA	; 250
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	f8 01       	movw	r30, r16
    1d46:	80 83       	st	Z, r24
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	a2 83       	std	Z+2, r26	; 0x02
    1d4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e9 58       	subi	r30, 0x89	; 137
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	44 f4       	brge	.+16     	; 0x1d7c <main+0xb5a>
		__ticks = 1;
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	eb 58       	subi	r30, 0x8B	; 139
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	64 c0       	rjmp	.+200    	; 0x1e44 <main+0xc22>
	else if (__tmp > 65535)
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e9 58       	subi	r30, 0x89	; 137
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	0c f0       	brlt	.+2      	; 0x1d9c <main+0xb7a>
    1d9a:	43 c0       	rjmp	.+134    	; 0x1e22 <main+0xc00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e5 58       	subi	r30, 0x85	; 133
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	8e 01       	movw	r16, r28
    1dbc:	0b 58       	subi	r16, 0x8B	; 139
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	f8 01       	movw	r30, r16
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24
    1dd2:	1f c0       	rjmp	.+62     	; 0x1e12 <main+0xbf0>
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ed 58       	subi	r30, 0x8D	; 141
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	88 ec       	ldi	r24, 0xC8	; 200
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
    1de2:	fe 01       	movw	r30, r28
    1de4:	ed 58       	subi	r30, 0x8D	; 141
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <main+0xbca>
    1df0:	fe 01       	movw	r30, r28
    1df2:	ed 58       	subi	r30, 0x8D	; 141
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	de 01       	movw	r26, r28
    1dfc:	ab 58       	subi	r26, 0x8B	; 139
    1dfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1e00:	fe 01       	movw	r30, r28
    1e02:	eb 58       	subi	r30, 0x8B	; 139
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	11 96       	adiw	r26, 0x01	; 1
    1e0e:	9c 93       	st	X, r25
    1e10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	fe 01       	movw	r30, r28
    1e14:	eb 58       	subi	r30, 0x8B	; 139
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	d1 f6       	brne	.-76     	; 0x1dd4 <main+0xbb2>
    1e20:	27 c0       	rjmp	.+78     	; 0x1e70 <main+0xc4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e22:	8e 01       	movw	r16, r28
    1e24:	0b 58       	subi	r16, 0x8B	; 139
    1e26:	1f 4f       	sbci	r17, 0xFF	; 255
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e9 58       	subi	r30, 0x89	; 137
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	f8 01       	movw	r30, r16
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
    1e44:	de 01       	movw	r26, r28
    1e46:	af 58       	subi	r26, 0x8F	; 143
    1e48:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	eb 58       	subi	r30, 0x8B	; 139
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	8d 93       	st	X+, r24
    1e56:	9c 93       	st	X, r25
    1e58:	fe 01       	movw	r30, r28
    1e5a:	ef 58       	subi	r30, 0x8F	; 143
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <main+0xc40>
    1e66:	fe 01       	movw	r30, r28
    1e68:	ef 58       	subi	r30, 0x8F	; 143
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	80 83       	st	Z, r24
			_delay_ms(DELAY_UART);
			sendPassword(password);
    1e70:	ce 01       	movw	r24, r28
    1e72:	8b 51       	subi	r24, 0x1B	; 27
    1e74:	9f 4f       	sbci	r25, 0xFF	; 255
    1e76:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sendPassword>
			isVerified = 0;
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ec 51       	subi	r30, 0x1C	; 28
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	10 82       	st	Z, r1
			isVerified = UART_recieveByte();
    1e82:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    1e86:	fe 01       	movw	r30, r28
    1e88:	ec 51       	subi	r30, 0x1C	; 28
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 83       	st	Z, r24
			if(isVerified){
    1e8e:	fe 01       	movw	r30, r28
    1e90:	ec 51       	subi	r30, 0x1C	; 28
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	88 23       	and	r24, r24
    1e98:	19 f0       	breq	.+6      	; 0x1ea0 <main+0xc7e>
				openDoor();
    1e9a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <openDoor>
    1e9e:	a0 cd       	rjmp	.-1216   	; 0x19e0 <main+0x7be>
			}else{
				uint8 falsePasswordCounter = UART_recieveByte();
    1ea0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ee 51       	subi	r30, 0x1E	; 30
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3){
    1eac:	fe 01       	movw	r30, r28
    1eae:	ee 51       	subi	r30, 0x1E	; 30
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	83 30       	cpi	r24, 0x03	; 3
    1eb6:	18 f0       	brcs	.+6      	; 0x1ebe <main+0xc9c>
					securityAlarm();
    1eb8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <securityAlarm>
    1ebc:	91 cd       	rjmp	.-1246   	; 0x19e0 <main+0x7be>
				}else{
					LCD_clearScreen();
    1ebe:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    1ec2:	8d e8       	ldi	r24, 0x8D	; 141
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e3 59       	subi	r30, 0x93	; 147
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e4       	ldi	r25, 0x40	; 64
    1ed4:	ac e1       	ldi	r26, 0x1C	; 28
    1ed6:	b5 e4       	ldi	r27, 0x45	; 69
    1ed8:	80 83       	st	Z, r24
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	a2 83       	std	Z+2, r26	; 0x02
    1ede:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	07 59       	subi	r16, 0x97	; 151
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e3 59       	subi	r30, 0x93	; 147
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	4a ef       	ldi	r20, 0xFA	; 250
    1efa:	54 e4       	ldi	r21, 0x44	; 68
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	80 83       	st	Z, r24
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	a2 83       	std	Z+2, r26	; 0x02
    1f0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e7 59       	subi	r30, 0x97	; 151
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	44 f4       	brge	.+16     	; 0x1f3c <main+0xd1a>
		__ticks = 1;
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e9 59       	subi	r30, 0x99	; 153
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
    1f3a:	64 c0       	rjmp	.+200    	; 0x2004 <main+0xde2>
	else if (__tmp > 65535)
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e7 59       	subi	r30, 0x97	; 151
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	0c f0       	brlt	.+2      	; 0x1f5c <main+0xd3a>
    1f5a:	43 c0       	rjmp	.+134    	; 0x1fe2 <main+0xdc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e3 59       	subi	r30, 0x93	; 147
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	60 81       	ld	r22, Z
    1f64:	71 81       	ldd	r23, Z+1	; 0x01
    1f66:	82 81       	ldd	r24, Z+2	; 0x02
    1f68:	93 81       	ldd	r25, Z+3	; 0x03
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e2       	ldi	r20, 0x20	; 32
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	8e 01       	movw	r16, r28
    1f7c:	09 59       	subi	r16, 0x99	; 153
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
    1f92:	1f c0       	rjmp	.+62     	; 0x1fd2 <main+0xdb0>
    1f94:	fe 01       	movw	r30, r28
    1f96:	eb 59       	subi	r30, 0x9B	; 155
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	88 ec       	ldi	r24, 0xC8	; 200
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	eb 59       	subi	r30, 0x9B	; 155
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	91 81       	ldd	r25, Z+1	; 0x01
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <main+0xd8a>
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	eb 59       	subi	r30, 0x9B	; 155
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	de 01       	movw	r26, r28
    1fbc:	a9 59       	subi	r26, 0x99	; 153
    1fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e9 59       	subi	r30, 0x99	; 153
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	9c 93       	st	X, r25
    1fd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e9 59       	subi	r30, 0x99	; 153
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	d1 f6       	brne	.-76     	; 0x1f94 <main+0xd72>
    1fe0:	ff cc       	rjmp	.-1538   	; 0x19e0 <main+0x7be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	09 59       	subi	r16, 0x99	; 153
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e7 59       	subi	r30, 0x97	; 151
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	f8 01       	movw	r30, r16
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
    2004:	de 01       	movw	r26, r28
    2006:	ad 59       	subi	r26, 0x9D	; 157
    2008:	bf 4f       	sbci	r27, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e9 59       	subi	r30, 0x99	; 153
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	91 81       	ldd	r25, Z+1	; 0x01
    2014:	11 96       	adiw	r26, 0x01	; 1
    2016:	9c 93       	st	X, r25
    2018:	8e 93       	st	-X, r24
    201a:	fe 01       	movw	r30, r28
    201c:	ed 59       	subi	r30, 0x9D	; 157
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <main+0xe02>
    2028:	fe 01       	movw	r30, r28
    202a:	ed 59       	subi	r30, 0x9D	; 157
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	d6 cc       	rjmp	.-1620   	; 0x19e0 <main+0x7be>
				}

			}

		}
		else if(command == '-'){
    2034:	fe 01       	movw	r30, r28
    2036:	ed 51       	subi	r30, 0x1D	; 29
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	8d 32       	cpi	r24, 0x2D	; 45
    203e:	09 f0       	breq	.+2      	; 0x2042 <main+0xe20>
    2040:	cf cc       	rjmp	.-1634   	; 0x19e0 <main+0x7be>
			LCD_clearScreen();
    2042:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
			LCD_displayString("Enter Current PW");
    2046:	86 eb       	ldi	r24, 0xB6	; 182
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
			enterPassword(password);
    204e:	ce 01       	movw	r24, r28
    2050:	8b 51       	subi	r24, 0x1B	; 27
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	0e 94 4a 14 	call	0x2894	; 0x2894 <enterPassword>
    2058:	fe 01       	movw	r30, r28
    205a:	e1 5a       	subi	r30, 0xA1	; 161
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a2 e0       	ldi	r26, 0x02	; 2
    2064:	b3 e4       	ldi	r27, 0x43	; 67
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	a2 83       	std	Z+2, r26	; 0x02
    206c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	8e 01       	movw	r16, r28
    2070:	05 5a       	subi	r16, 0xA5	; 165
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	fe 01       	movw	r30, r28
    2076:	e1 5a       	subi	r30, 0xA1	; 161
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	f8 01       	movw	r30, r16
    2094:	80 83       	st	Z, r24
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	a2 83       	std	Z+2, r26	; 0x02
    209a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    209c:	fe 01       	movw	r30, r28
    209e:	e5 5a       	subi	r30, 0xA5	; 165
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	44 f4       	brge	.+16     	; 0x20ca <main+0xea8>
		__ticks = 1;
    20ba:	fe 01       	movw	r30, r28
    20bc:	e7 5a       	subi	r30, 0xA7	; 167
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
    20c8:	64 c0       	rjmp	.+200    	; 0x2192 <main+0xf70>
	else if (__tmp > 65535)
    20ca:	fe 01       	movw	r30, r28
    20cc:	e5 5a       	subi	r30, 0xA5	; 165
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	0c f0       	brlt	.+2      	; 0x20ea <main+0xec8>
    20e8:	43 c0       	rjmp	.+134    	; 0x2170 <main+0xf4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	fe 01       	movw	r30, r28
    20ec:	e1 5a       	subi	r30, 0xA1	; 161
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8e 01       	movw	r16, r28
    210a:	07 5a       	subi	r16, 0xA7	; 167
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	f8 01       	movw	r30, r16
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    2120:	1f c0       	rjmp	.+62     	; 0x2160 <main+0xf3e>
    2122:	fe 01       	movw	r30, r28
    2124:	e9 5a       	subi	r30, 0xA9	; 169
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	fe 01       	movw	r30, r28
    2132:	e9 5a       	subi	r30, 0xA9	; 169
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <main+0xf18>
    213e:	fe 01       	movw	r30, r28
    2140:	e9 5a       	subi	r30, 0xA9	; 169
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	de 01       	movw	r26, r28
    214a:	a7 5a       	subi	r26, 0xA7	; 167
    214c:	bf 4f       	sbci	r27, 0xFF	; 255
    214e:	fe 01       	movw	r30, r28
    2150:	e7 5a       	subi	r30, 0xA7	; 167
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	11 96       	adiw	r26, 0x01	; 1
    215c:	9c 93       	st	X, r25
    215e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	fe 01       	movw	r30, r28
    2162:	e7 5a       	subi	r30, 0xA7	; 167
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	d1 f6       	brne	.-76     	; 0x2122 <main+0xf00>
    216e:	27 c0       	rjmp	.+78     	; 0x21be <main+0xf9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	8e 01       	movw	r16, r28
    2172:	07 5a       	subi	r16, 0xA7	; 167
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	fe 01       	movw	r30, r28
    2178:	e5 5a       	subi	r30, 0xA5	; 165
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	f8 01       	movw	r30, r16
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	de 01       	movw	r26, r28
    2194:	ab 5a       	subi	r26, 0xAB	; 171
    2196:	bf 4f       	sbci	r27, 0xFF	; 255
    2198:	fe 01       	movw	r30, r28
    219a:	e7 5a       	subi	r30, 0xA7	; 167
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	8d 93       	st	X+, r24
    21a4:	9c 93       	st	X, r25
    21a6:	fe 01       	movw	r30, r28
    21a8:	eb 5a       	subi	r30, 0xAB	; 171
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <main+0xf8e>
    21b4:	fe 01       	movw	r30, r28
    21b6:	eb 5a       	subi	r30, 0xAB	; 171
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
			_delay_ms(DELAY_UART);
			sendPassword(password);
    21be:	ce 01       	movw	r24, r28
    21c0:	8b 51       	subi	r24, 0x1B	; 27
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sendPassword>
			isVerified = 0;
    21c8:	fe 01       	movw	r30, r28
    21ca:	ec 51       	subi	r30, 0x1C	; 28
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	10 82       	st	Z, r1
			isVerified = UART_recieveByte();
    21d0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    21d4:	fe 01       	movw	r30, r28
    21d6:	ec 51       	subi	r30, 0x1C	; 28
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 83       	st	Z, r24
			if(isVerified){
    21dc:	fe 01       	movw	r30, r28
    21de:	ec 51       	subi	r30, 0x1C	; 28
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	88 23       	and	r24, r24
    21e6:	09 f4       	brne	.+2      	; 0x21ea <main+0xfc8>
    21e8:	cd c2       	rjmp	.+1434   	; 0x2784 <main+0x1562>
				LCD_clearScreen();
    21ea:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
				LCD_displayString("Enter New PW");
    21ee:	87 ec       	ldi	r24, 0xC7	; 199
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
				enterPassword(password);
    21f6:	ce 01       	movw	r24, r28
    21f8:	8b 51       	subi	r24, 0x1B	; 27
    21fa:	9f 4f       	sbci	r25, 0xFF	; 255
    21fc:	0e 94 4a 14 	call	0x2894	; 0x2894 <enterPassword>
    2200:	fe 01       	movw	r30, r28
    2202:	ef 5a       	subi	r30, 0xAF	; 175
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a2 e0       	ldi	r26, 0x02	; 2
    220c:	b3 e4       	ldi	r27, 0x43	; 67
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	8e 01       	movw	r16, r28
    2218:	03 5b       	subi	r16, 0xB3	; 179
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	ef 5a       	subi	r30, 0xAF	; 175
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a ef       	ldi	r20, 0xFA	; 250
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2244:	fe 01       	movw	r30, r28
    2246:	e3 5b       	subi	r30, 0xB3	; 179
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	44 f4       	brge	.+16     	; 0x2272 <main+0x1050>
		__ticks = 1;
    2262:	fe 01       	movw	r30, r28
    2264:	e5 5b       	subi	r30, 0xB5	; 181
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
    2270:	64 c0       	rjmp	.+200    	; 0x233a <main+0x1118>
	else if (__tmp > 65535)
    2272:	fe 01       	movw	r30, r28
    2274:	e3 5b       	subi	r30, 0xB3	; 179
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	3f ef       	ldi	r19, 0xFF	; 255
    2284:	4f e7       	ldi	r20, 0x7F	; 127
    2286:	57 e4       	ldi	r21, 0x47	; 71
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    228c:	18 16       	cp	r1, r24
    228e:	0c f0       	brlt	.+2      	; 0x2292 <main+0x1070>
    2290:	43 c0       	rjmp	.+134    	; 0x2318 <main+0x10f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	fe 01       	movw	r30, r28
    2294:	ef 5a       	subi	r30, 0xAF	; 175
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8e 01       	movw	r16, r28
    22b2:	05 5b       	subi	r16, 0xB5	; 181
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	f8 01       	movw	r30, r16
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	1f c0       	rjmp	.+62     	; 0x2308 <main+0x10e6>
    22ca:	fe 01       	movw	r30, r28
    22cc:	e7 5b       	subi	r30, 0xB7	; 183
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	88 ec       	ldi	r24, 0xC8	; 200
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
    22d8:	fe 01       	movw	r30, r28
    22da:	e7 5b       	subi	r30, 0xB7	; 183
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <main+0x10c0>
    22e6:	fe 01       	movw	r30, r28
    22e8:	e7 5b       	subi	r30, 0xB7	; 183
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	de 01       	movw	r26, r28
    22f2:	a5 5b       	subi	r26, 0xB5	; 181
    22f4:	bf 4f       	sbci	r27, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e5 5b       	subi	r30, 0xB5	; 181
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	11 96       	adiw	r26, 0x01	; 1
    2304:	9c 93       	st	X, r25
    2306:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	fe 01       	movw	r30, r28
    230a:	e5 5b       	subi	r30, 0xB5	; 181
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	d1 f6       	brne	.-76     	; 0x22ca <main+0x10a8>
    2316:	27 c0       	rjmp	.+78     	; 0x2366 <main+0x1144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	8e 01       	movw	r16, r28
    231a:	05 5b       	subi	r16, 0xB5	; 181
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	fe 01       	movw	r30, r28
    2320:	e3 5b       	subi	r30, 0xB3	; 179
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	f8 01       	movw	r30, r16
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	de 01       	movw	r26, r28
    233c:	a9 5b       	subi	r26, 0xB9	; 185
    233e:	bf 4f       	sbci	r27, 0xFF	; 255
    2340:	fe 01       	movw	r30, r28
    2342:	e5 5b       	subi	r30, 0xB5	; 181
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	8d 93       	st	X+, r24
    234c:	9c 93       	st	X, r25
    234e:	fe 01       	movw	r30, r28
    2350:	e9 5b       	subi	r30, 0xB9	; 185
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <main+0x1136>
    235c:	fe 01       	movw	r30, r28
    235e:	e9 5b       	subi	r30, 0xB9	; 185
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
				_delay_ms(DELAY_UART);
				sendPassword(password);
    2366:	ce 01       	movw	r24, r28
    2368:	8b 51       	subi	r24, 0x1B	; 27
    236a:	9f 4f       	sbci	r25, 0xFF	; 255
    236c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sendPassword>
				LCD_clearScreen();
    2370:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
				LCD_displayString("Confirm New Password");
    2374:	84 ed       	ldi	r24, 0xD4	; 212
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
				enterPassword( confirmPassword );
    237c:	ce 01       	movw	r24, r28
    237e:	87 51       	subi	r24, 0x17	; 23
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	0e 94 4a 14 	call	0x2894	; 0x2894 <enterPassword>
    2386:	fe 01       	movw	r30, r28
    2388:	ed 5b       	subi	r30, 0xBD	; 189
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a2 e0       	ldi	r26, 0x02	; 2
    2392:	b3 e4       	ldi	r27, 0x43	; 67
    2394:	80 83       	st	Z, r24
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	a2 83       	std	Z+2, r26	; 0x02
    239a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	8e 01       	movw	r16, r28
    239e:	01 5c       	subi	r16, 0xC1	; 193
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	fe 01       	movw	r30, r28
    23a4:	ed 5b       	subi	r30, 0xBD	; 189
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4a ef       	ldi	r20, 0xFA	; 250
    23b6:	54 e4       	ldi	r21, 0x44	; 68
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	f8 01       	movw	r30, r16
    23c2:	80 83       	st	Z, r24
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	a2 83       	std	Z+2, r26	; 0x02
    23c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ca:	fe 01       	movw	r30, r28
    23cc:	ff 96       	adiw	r30, 0x3f	; 63
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <main+0x11ce>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9e af       	std	Y+62, r25	; 0x3e
    23ec:	8d af       	std	Y+61, r24	; 0x3d
    23ee:	46 c0       	rjmp	.+140    	; 0x247c <main+0x125a>
	else if (__tmp > 65535)
    23f0:	fe 01       	movw	r30, r28
    23f2:	ff 96       	adiw	r30, 0x3f	; 63
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	64 f5       	brge	.+88     	; 0x2464 <main+0x1242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	fe 01       	movw	r30, r28
    240e:	ed 5b       	subi	r30, 0xBD	; 189
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9e af       	std	Y+62, r25	; 0x3e
    2438:	8d af       	std	Y+61, r24	; 0x3d
    243a:	0f c0       	rjmp	.+30     	; 0x245a <main+0x1238>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9c af       	std	Y+60, r25	; 0x3c
    2442:	8b af       	std	Y+59, r24	; 0x3b
    2444:	8b ad       	ldd	r24, Y+59	; 0x3b
    2446:	9c ad       	ldd	r25, Y+60	; 0x3c
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <main+0x1226>
    244c:	9c af       	std	Y+60, r25	; 0x3c
    244e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8d ad       	ldd	r24, Y+61	; 0x3d
    2452:	9e ad       	ldd	r25, Y+62	; 0x3e
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9e af       	std	Y+62, r25	; 0x3e
    2458:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8d ad       	ldd	r24, Y+61	; 0x3d
    245c:	9e ad       	ldd	r25, Y+62	; 0x3e
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <main+0x121a>
    2462:	16 c0       	rjmp	.+44     	; 0x2490 <main+0x126e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	fe 01       	movw	r30, r28
    2466:	ff 96       	adiw	r30, 0x3f	; 63
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9e af       	std	Y+62, r25	; 0x3e
    247a:	8d af       	std	Y+61, r24	; 0x3d
    247c:	8d ad       	ldd	r24, Y+61	; 0x3d
    247e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2480:	9a af       	std	Y+58, r25	; 0x3a
    2482:	89 af       	std	Y+57, r24	; 0x39
    2484:	89 ad       	ldd	r24, Y+57	; 0x39
    2486:	9a ad       	ldd	r25, Y+58	; 0x3a
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	f1 f7       	brne	.-4      	; 0x2488 <main+0x1266>
    248c:	9a af       	std	Y+58, r25	; 0x3a
    248e:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(DELAY_UART);
				sendPassword( confirmPassword );
    2490:	ce 01       	movw	r24, r28
    2492:	87 51       	subi	r24, 0x17	; 23
    2494:	9f 4f       	sbci	r25, 0xFF	; 255
    2496:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sendPassword>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a2 e0       	ldi	r26, 0x02	; 2
    24a0:	b3 e4       	ldi	r27, 0x43	; 67
    24a2:	8d ab       	std	Y+53, r24	; 0x35
    24a4:	9e ab       	std	Y+54, r25	; 0x36
    24a6:	af ab       	std	Y+55, r26	; 0x37
    24a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	6d a9       	ldd	r22, Y+53	; 0x35
    24ac:	7e a9       	ldd	r23, Y+54	; 0x36
    24ae:	8f a9       	ldd	r24, Y+55	; 0x37
    24b0:	98 ad       	ldd	r25, Y+56	; 0x38
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a ef       	ldi	r20, 0xFA	; 250
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	89 ab       	std	Y+49, r24	; 0x31
    24c4:	9a ab       	std	Y+50, r25	; 0x32
    24c6:	ab ab       	std	Y+51, r26	; 0x33
    24c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ca:	69 a9       	ldd	r22, Y+49	; 0x31
    24cc:	7a a9       	ldd	r23, Y+50	; 0x32
    24ce:	8b a9       	ldd	r24, Y+51	; 0x33
    24d0:	9c a9       	ldd	r25, Y+52	; 0x34
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <main+0x12ca>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <main+0x1348>
	else if (__tmp > 65535)
    24ec:	69 a9       	ldd	r22, Y+49	; 0x31
    24ee:	7a a9       	ldd	r23, Y+50	; 0x32
    24f0:	8b a9       	ldd	r24, Y+51	; 0x33
    24f2:	9c a9       	ldd	r25, Y+52	; 0x34
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <main+0x1334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	6d a9       	ldd	r22, Y+53	; 0x35
    2506:	7e a9       	ldd	r23, Y+54	; 0x36
    2508:	8f a9       	ldd	r24, Y+55	; 0x37
    250a:	98 ad       	ldd	r25, Y+56	; 0x38
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	98 ab       	std	Y+48, r25	; 0x30
    252a:	8f a7       	std	Y+47, r24	; 0x2f
    252c:	0f c0       	rjmp	.+30     	; 0x254c <main+0x132a>
    252e:	88 ec       	ldi	r24, 0xC8	; 200
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9e a7       	std	Y+46, r25	; 0x2e
    2534:	8d a7       	std	Y+45, r24	; 0x2d
    2536:	8d a5       	ldd	r24, Y+45	; 0x2d
    2538:	9e a5       	ldd	r25, Y+46	; 0x2e
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <main+0x1318>
    253e:	9e a7       	std	Y+46, r25	; 0x2e
    2540:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8f a5       	ldd	r24, Y+47	; 0x2f
    2544:	98 a9       	ldd	r25, Y+48	; 0x30
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	98 ab       	std	Y+48, r25	; 0x30
    254a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8f a5       	ldd	r24, Y+47	; 0x2f
    254e:	98 a9       	ldd	r25, Y+48	; 0x30
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <main+0x130c>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <main+0x135c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	69 a9       	ldd	r22, Y+49	; 0x31
    2558:	7a a9       	ldd	r23, Y+50	; 0x32
    255a:	8b a9       	ldd	r24, Y+51	; 0x33
    255c:	9c a9       	ldd	r25, Y+52	; 0x34
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	98 ab       	std	Y+48, r25	; 0x30
    2568:	8f a7       	std	Y+47, r24	; 0x2f
    256a:	8f a5       	ldd	r24, Y+47	; 0x2f
    256c:	98 a9       	ldd	r25, Y+48	; 0x30
    256e:	9c a7       	std	Y+44, r25	; 0x2c
    2570:	8b a7       	std	Y+43, r24	; 0x2b
    2572:	8b a5       	ldd	r24, Y+43	; 0x2b
    2574:	9c a5       	ldd	r25, Y+44	; 0x2c
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <main+0x1354>
    257a:	9c a7       	std	Y+44, r25	; 0x2c
    257c:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(DELAY_UART);
				isVerified = 0;
    257e:	fe 01       	movw	r30, r28
    2580:	ec 51       	subi	r30, 0x1C	; 28
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	10 82       	st	Z, r1
				isVerified = UART_recieveByte();
    2586:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    258a:	fe 01       	movw	r30, r28
    258c:	ec 51       	subi	r30, 0x1C	; 28
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 83       	st	Z, r24
				if(isVerified){
    2592:	fe 01       	movw	r30, r28
    2594:	ec 51       	subi	r30, 0x1C	; 28
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	88 23       	and	r24, r24
    259c:	09 f4       	brne	.+2      	; 0x25a0 <main+0x137e>
    259e:	79 c0       	rjmp	.+242    	; 0x2692 <main+0x1470>
					LCD_clearScreen();
    25a0:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
					LCD_displayString("Password Changed!");
    25a4:	89 ee       	ldi	r24, 0xE9	; 233
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e4       	ldi	r25, 0x40	; 64
    25b0:	ac e1       	ldi	r26, 0x1C	; 28
    25b2:	b5 e4       	ldi	r27, 0x45	; 69
    25b4:	8f a3       	std	Y+39, r24	; 0x27
    25b6:	98 a7       	std	Y+40, r25	; 0x28
    25b8:	a9 a7       	std	Y+41, r26	; 0x29
    25ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	6f a1       	ldd	r22, Y+39	; 0x27
    25be:	78 a5       	ldd	r23, Y+40	; 0x28
    25c0:	89 a5       	ldd	r24, Y+41	; 0x29
    25c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a ef       	ldi	r20, 0xFA	; 250
    25ca:	54 e4       	ldi	r21, 0x44	; 68
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8b a3       	std	Y+35, r24	; 0x23
    25d6:	9c a3       	std	Y+36, r25	; 0x24
    25d8:	ad a3       	std	Y+37, r26	; 0x25
    25da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25dc:	6b a1       	ldd	r22, Y+35	; 0x23
    25de:	7c a1       	ldd	r23, Y+36	; 0x24
    25e0:	8d a1       	ldd	r24, Y+37	; 0x25
    25e2:	9e a1       	ldd	r25, Y+38	; 0x26
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	2c f4       	brge	.+10     	; 0x25fe <main+0x13dc>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9a a3       	std	Y+34, r25	; 0x22
    25fa:	89 a3       	std	Y+33, r24	; 0x21
    25fc:	3f c0       	rjmp	.+126    	; 0x267c <main+0x145a>
	else if (__tmp > 65535)
    25fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2600:	7c a1       	ldd	r23, Y+36	; 0x24
    2602:	8d a1       	ldd	r24, Y+37	; 0x25
    2604:	9e a1       	ldd	r25, Y+38	; 0x26
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	4f e7       	ldi	r20, 0x7F	; 127
    260c:	57 e4       	ldi	r21, 0x47	; 71
    260e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2612:	18 16       	cp	r1, r24
    2614:	4c f5       	brge	.+82     	; 0x2668 <main+0x1446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	6f a1       	ldd	r22, Y+39	; 0x27
    2618:	78 a5       	ldd	r23, Y+40	; 0x28
    261a:	89 a5       	ldd	r24, Y+41	; 0x29
    261c:	9a a5       	ldd	r25, Y+42	; 0x2a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9a a3       	std	Y+34, r25	; 0x22
    263c:	89 a3       	std	Y+33, r24	; 0x21
    263e:	0f c0       	rjmp	.+30     	; 0x265e <main+0x143c>
    2640:	88 ec       	ldi	r24, 0xC8	; 200
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	98 a3       	std	Y+32, r25	; 0x20
    2646:	8f 8f       	std	Y+31, r24	; 0x1f
    2648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    264a:	98 a1       	ldd	r25, Y+32	; 0x20
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <main+0x142a>
    2650:	98 a3       	std	Y+32, r25	; 0x20
    2652:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2654:	89 a1       	ldd	r24, Y+33	; 0x21
    2656:	9a a1       	ldd	r25, Y+34	; 0x22
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	9a a3       	std	Y+34, r25	; 0x22
    265c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	89 a1       	ldd	r24, Y+33	; 0x21
    2660:	9a a1       	ldd	r25, Y+34	; 0x22
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	69 f7       	brne	.-38     	; 0x2640 <main+0x141e>
    2666:	bc c9       	rjmp	.-3208   	; 0x19e0 <main+0x7be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2668:	6b a1       	ldd	r22, Y+35	; 0x23
    266a:	7c a1       	ldd	r23, Y+36	; 0x24
    266c:	8d a1       	ldd	r24, Y+37	; 0x25
    266e:	9e a1       	ldd	r25, Y+38	; 0x26
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9a a3       	std	Y+34, r25	; 0x22
    267a:	89 a3       	std	Y+33, r24	; 0x21
    267c:	89 a1       	ldd	r24, Y+33	; 0x21
    267e:	9a a1       	ldd	r25, Y+34	; 0x22
    2680:	9e 8f       	std	Y+30, r25	; 0x1e
    2682:	8d 8f       	std	Y+29, r24	; 0x1d
    2684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <main+0x1466>
    268c:	9e 8f       	std	Y+30, r25	; 0x1e
    268e:	8d 8f       	std	Y+29, r24	; 0x1d
    2690:	a7 c9       	rjmp	.-3250   	; 0x19e0 <main+0x7be>
					_delay_ms(2500);
				}else{
					LCD_clearScreen();
    2692:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
					LCD_displayString("Unmatching PW");
    2696:	8b ef       	ldi	r24, 0xFB	; 251
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e4       	ldi	r25, 0x40	; 64
    26a2:	ac e1       	ldi	r26, 0x1C	; 28
    26a4:	b5 e4       	ldi	r27, 0x45	; 69
    26a6:	89 8f       	std	Y+25, r24	; 0x19
    26a8:	9a 8f       	std	Y+26, r25	; 0x1a
    26aa:	ab 8f       	std	Y+27, r26	; 0x1b
    26ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ae:	69 8d       	ldd	r22, Y+25	; 0x19
    26b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a ef       	ldi	r20, 0xFA	; 250
    26bc:	54 e4       	ldi	r21, 0x44	; 68
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	8d 8b       	std	Y+21, r24	; 0x15
    26c8:	9e 8b       	std	Y+22, r25	; 0x16
    26ca:	af 8b       	std	Y+23, r26	; 0x17
    26cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ce:	6d 89       	ldd	r22, Y+21	; 0x15
    26d0:	7e 89       	ldd	r23, Y+22	; 0x16
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <main+0x14ce>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
    26ee:	3f c0       	rjmp	.+126    	; 0x276e <main+0x154c>
	else if (__tmp > 65535)
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	4c f5       	brge	.+82     	; 0x275a <main+0x1538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	69 8d       	ldd	r22, Y+25	; 0x19
    270a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e2       	ldi	r20, 0x20	; 32
    2716:	51 e4       	ldi	r21, 0x41	; 65
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9c 8b       	std	Y+20, r25	; 0x14
    272e:	8b 8b       	std	Y+19, r24	; 0x13
    2730:	0f c0       	rjmp	.+30     	; 0x2750 <main+0x152e>
    2732:	88 ec       	ldi	r24, 0xC8	; 200
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9a 8b       	std	Y+18, r25	; 0x12
    2738:	89 8b       	std	Y+17, r24	; 0x11
    273a:	89 89       	ldd	r24, Y+17	; 0x11
    273c:	9a 89       	ldd	r25, Y+18	; 0x12
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <main+0x151c>
    2742:	9a 8b       	std	Y+18, r25	; 0x12
    2744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	9c 8b       	std	Y+20, r25	; 0x14
    274e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	69 f7       	brne	.-38     	; 0x2732 <main+0x1510>
    2758:	43 c9       	rjmp	.-3450   	; 0x19e0 <main+0x7be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9c 8b       	std	Y+20, r25	; 0x14
    276c:	8b 8b       	std	Y+19, r24	; 0x13
    276e:	8b 89       	ldd	r24, Y+19	; 0x13
    2770:	9c 89       	ldd	r25, Y+20	; 0x14
    2772:	98 8b       	std	Y+16, r25	; 0x10
    2774:	8f 87       	std	Y+15, r24	; 0x0f
    2776:	8f 85       	ldd	r24, Y+15	; 0x0f
    2778:	98 89       	ldd	r25, Y+16	; 0x10
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <main+0x1558>
    277e:	98 8b       	std	Y+16, r25	; 0x10
    2780:	8f 87       	std	Y+15, r24	; 0x0f
    2782:	2e c9       	rjmp	.-3492   	; 0x19e0 <main+0x7be>
					_delay_ms(2500);
				}
			}else{
				uint8 falsePasswordCounter = UART_recieveByte();
    2784:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    2788:	fe 01       	movw	r30, r28
    278a:	ef 51       	subi	r30, 0x1F	; 31
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 83       	st	Z, r24
				if(falsePasswordCounter >=3){
    2790:	fe 01       	movw	r30, r28
    2792:	ef 51       	subi	r30, 0x1F	; 31
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	83 30       	cpi	r24, 0x03	; 3
    279a:	18 f0       	brcs	.+6      	; 0x27a2 <main+0x1580>
					securityAlarm();
    279c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <securityAlarm>
    27a0:	1f c9       	rjmp	.-3522   	; 0x19e0 <main+0x7be>
				}else{
					LCD_clearScreen();
    27a2:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    27a6:	8d e8       	ldi	r24, 0x8D	; 141
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e4       	ldi	r25, 0x40	; 64
    27b2:	ac e1       	ldi	r26, 0x1C	; 28
    27b4:	b5 e4       	ldi	r27, 0x45	; 69
    27b6:	8b 87       	std	Y+11, r24	; 0x0b
    27b8:	9c 87       	std	Y+12, r25	; 0x0c
    27ba:	ad 87       	std	Y+13, r26	; 0x0d
    27bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27be:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	4a ef       	ldi	r20, 0xFA	; 250
    27cc:	54 e4       	ldi	r21, 0x44	; 68
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	8f 83       	std	Y+7, r24	; 0x07
    27d8:	98 87       	std	Y+8, r25	; 0x08
    27da:	a9 87       	std	Y+9, r26	; 0x09
    27dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27de:	6f 81       	ldd	r22, Y+7	; 0x07
    27e0:	78 85       	ldd	r23, Y+8	; 0x08
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	40 e8       	ldi	r20, 0x80	; 128
    27ec:	5f e3       	ldi	r21, 0x3F	; 63
    27ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f2:	88 23       	and	r24, r24
    27f4:	2c f4       	brge	.+10     	; 0x2800 <main+0x15de>
		__ticks = 1;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	3f c0       	rjmp	.+126    	; 0x287e <main+0x165c>
	else if (__tmp > 65535)
    2800:	6f 81       	ldd	r22, Y+7	; 0x07
    2802:	78 85       	ldd	r23, Y+8	; 0x08
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	9a 85       	ldd	r25, Y+10	; 0x0a
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	3f ef       	ldi	r19, 0xFF	; 255
    280c:	4f e7       	ldi	r20, 0x7F	; 127
    280e:	57 e4       	ldi	r21, 0x47	; 71
    2810:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2814:	18 16       	cp	r1, r24
    2816:	4c f5       	brge	.+82     	; 0x286a <main+0x1648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2818:	6b 85       	ldd	r22, Y+11	; 0x0b
    281a:	7c 85       	ldd	r23, Y+12	; 0x0c
    281c:	8d 85       	ldd	r24, Y+13	; 0x0d
    281e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e2       	ldi	r20, 0x20	; 32
    2826:	51 e4       	ldi	r21, 0x41	; 65
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
    2840:	0f c0       	rjmp	.+30     	; 0x2860 <main+0x163e>
    2842:	88 ec       	ldi	r24, 0xC8	; 200
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	9c 83       	std	Y+4, r25	; 0x04
    2848:	8b 83       	std	Y+3, r24	; 0x03
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	9c 81       	ldd	r25, Y+4	; 0x04
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	f1 f7       	brne	.-4      	; 0x284e <main+0x162c>
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	9e 81       	ldd	r25, Y+6	; 0x06
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	69 f7       	brne	.-38     	; 0x2842 <main+0x1620>
    2868:	bb c8       	rjmp	.-3722   	; 0x19e0 <main+0x7be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286a:	6f 81       	ldd	r22, Y+7	; 0x07
    286c:	78 85       	ldd	r23, Y+8	; 0x08
    286e:	89 85       	ldd	r24, Y+9	; 0x09
    2870:	9a 85       	ldd	r25, Y+10	; 0x0a
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	8d 83       	std	Y+5, r24	; 0x05
    287e:	8d 81       	ldd	r24, Y+5	; 0x05
    2880:	9e 81       	ldd	r25, Y+6	; 0x06
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <main+0x1668>
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	a6 c8       	rjmp	.-3764   	; 0x19e0 <main+0x7be>

00002894 <enterPassword>:
	}
}

// Functions
void enterPassword(uint8 password[] )
{
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	6f 97       	sbiw	r28, 0x1f	; 31
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	9f 8f       	std	Y+31, r25	; 0x1f
    28ae:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_moveCursor(1, 5);
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	65 e0       	ldi	r22, 0x05	; 5
    28b4:	0e 94 a7 1b 	call	0x374e	; 0x374e <LCD_moveCursor>
	for (uint8 i = 0; i < 5; i++) {
    28b8:	1d 8e       	std	Y+29, r1	; 0x1d
    28ba:	8b c0       	rjmp	.+278    	; 0x29d2 <enterPassword+0x13e>
		while ((KEYPAD_getPressedKey() != 13) && (i == 4));  // POLLING UNTIL ON BUTTON PRESSED
    28bc:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <KEYPAD_getPressedKey>
    28c0:	8d 30       	cpi	r24, 0x0D	; 13
    28c2:	19 f0       	breq	.+6      	; 0x28ca <enterPassword+0x36>
    28c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28c6:	84 30       	cpi	r24, 0x04	; 4
    28c8:	c9 f3       	breq	.-14     	; 0x28bc <enterPassword+0x28>

		password[i] = KEYPAD_getPressedKey();
    28ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28d4:	8c 01       	movw	r16, r24
    28d6:	02 0f       	add	r16, r18
    28d8:	13 1f       	adc	r17, r19
    28da:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <KEYPAD_getPressedKey>
    28de:	f8 01       	movw	r30, r16
    28e0:	80 83       	st	Z, r24
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	aa ef       	ldi	r26, 0xFA	; 250
    28e8:	b3 e4       	ldi	r27, 0x43	; 67
    28ea:	89 8f       	std	Y+25, r24	; 0x19
    28ec:	9a 8f       	std	Y+26, r25	; 0x1a
    28ee:	ab 8f       	std	Y+27, r26	; 0x1b
    28f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f2:	69 8d       	ldd	r22, Y+25	; 0x19
    28f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a ef       	ldi	r20, 0xFA	; 250
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8d 8b       	std	Y+21, r24	; 0x15
    290c:	9e 8b       	std	Y+22, r25	; 0x16
    290e:	af 8b       	std	Y+23, r26	; 0x17
    2910:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2912:	6d 89       	ldd	r22, Y+21	; 0x15
    2914:	7e 89       	ldd	r23, Y+22	; 0x16
    2916:	8f 89       	ldd	r24, Y+23	; 0x17
    2918:	98 8d       	ldd	r25, Y+24	; 0x18
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	2c f4       	brge	.+10     	; 0x2934 <enterPassword+0xa0>
		__ticks = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9c 8b       	std	Y+20, r25	; 0x14
    2930:	8b 8b       	std	Y+19, r24	; 0x13
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <enterPassword+0x11e>
	else if (__tmp > 65535)
    2934:	6d 89       	ldd	r22, Y+21	; 0x15
    2936:	7e 89       	ldd	r23, Y+22	; 0x16
    2938:	8f 89       	ldd	r24, Y+23	; 0x17
    293a:	98 8d       	ldd	r25, Y+24	; 0x18
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	3f ef       	ldi	r19, 0xFF	; 255
    2940:	4f e7       	ldi	r20, 0x7F	; 127
    2942:	57 e4       	ldi	r21, 0x47	; 71
    2944:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2948:	18 16       	cp	r1, r24
    294a:	4c f5       	brge	.+82     	; 0x299e <enterPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	69 8d       	ldd	r22, Y+25	; 0x19
    294e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e2       	ldi	r20, 0x20	; 32
    295a:	51 e4       	ldi	r21, 0x41	; 65
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9c 8b       	std	Y+20, r25	; 0x14
    2972:	8b 8b       	std	Y+19, r24	; 0x13
    2974:	0f c0       	rjmp	.+30     	; 0x2994 <enterPassword+0x100>
    2976:	88 ec       	ldi	r24, 0xC8	; 200
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9a 8b       	std	Y+18, r25	; 0x12
    297c:	89 8b       	std	Y+17, r24	; 0x11
    297e:	89 89       	ldd	r24, Y+17	; 0x11
    2980:	9a 89       	ldd	r25, Y+18	; 0x12
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <enterPassword+0xee>
    2986:	9a 8b       	std	Y+18, r25	; 0x12
    2988:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298a:	8b 89       	ldd	r24, Y+19	; 0x13
    298c:	9c 89       	ldd	r25, Y+20	; 0x14
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	9c 8b       	std	Y+20, r25	; 0x14
    2992:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2994:	8b 89       	ldd	r24, Y+19	; 0x13
    2996:	9c 89       	ldd	r25, Y+20	; 0x14
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	69 f7       	brne	.-38     	; 0x2976 <enterPassword+0xe2>
    299c:	14 c0       	rjmp	.+40     	; 0x29c6 <enterPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299e:	6d 89       	ldd	r22, Y+21	; 0x15
    29a0:	7e 89       	ldd	r23, Y+22	; 0x16
    29a2:	8f 89       	ldd	r24, Y+23	; 0x17
    29a4:	98 8d       	ldd	r25, Y+24	; 0x18
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9c 8b       	std	Y+20, r25	; 0x14
    29b0:	8b 8b       	std	Y+19, r24	; 0x13
    29b2:	8b 89       	ldd	r24, Y+19	; 0x13
    29b4:	9c 89       	ldd	r25, Y+20	; 0x14
    29b6:	98 8b       	std	Y+16, r25	; 0x10
    29b8:	8f 87       	std	Y+15, r24	; 0x0f
    29ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    29bc:	98 89       	ldd	r25, Y+16	; 0x10
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <enterPassword+0x12a>
    29c2:	98 8b       	std	Y+16, r25	; 0x10
    29c4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(DELAY_Keypad);				//DELAY SO KEYPAD DOESN'T REPEAT
		LCD_displayCharacter('*');
    29c6:	8a e2       	ldi	r24, 0x2A	; 42
    29c8:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayCharacter>

// Functions
void enterPassword(uint8 password[] )
{
	LCD_moveCursor(1, 5);
	for (uint8 i = 0; i < 5; i++) {
    29cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ce:	8f 5f       	subi	r24, 0xFF	; 255
    29d0:	8d 8f       	std	Y+29, r24	; 0x1d
    29d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d4:	85 30       	cpi	r24, 0x05	; 5
    29d6:	08 f4       	brcc	.+2      	; 0x29da <enterPassword+0x146>
    29d8:	71 cf       	rjmp	.-286    	; 0x28bc <enterPassword+0x28>
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	aa ef       	ldi	r26, 0xFA	; 250
    29e0:	b3 e4       	ldi	r27, 0x43	; 67
    29e2:	8b 87       	std	Y+11, r24	; 0x0b
    29e4:	9c 87       	std	Y+12, r25	; 0x0c
    29e6:	ad 87       	std	Y+13, r26	; 0x0d
    29e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	4a ef       	ldi	r20, 0xFA	; 250
    29f8:	54 e4       	ldi	r21, 0x44	; 68
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	8f 83       	std	Y+7, r24	; 0x07
    2a04:	98 87       	std	Y+8, r25	; 0x08
    2a06:	a9 87       	std	Y+9, r26	; 0x09
    2a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e8       	ldi	r20, 0x80	; 128
    2a18:	5f e3       	ldi	r21, 0x3F	; 63
    2a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1e:	88 23       	and	r24, r24
    2a20:	2c f4       	brge	.+10     	; 0x2a2c <enterPassword+0x198>
		__ticks = 1;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	3f c0       	rjmp	.+126    	; 0x2aaa <enterPassword+0x216>
	else if (__tmp > 65535)
    2a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2e:	78 85       	ldd	r23, Y+8	; 0x08
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	3f ef       	ldi	r19, 0xFF	; 255
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	57 e4       	ldi	r21, 0x47	; 71
    2a3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	4c f5       	brge	.+82     	; 0x2a96 <enterPassword+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e2       	ldi	r20, 0x20	; 32
    2a52:	51 e4       	ldi	r21, 0x41	; 65
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	0f c0       	rjmp	.+30     	; 0x2a8c <enterPassword+0x1f8>
    2a6e:	88 ec       	ldi	r24, 0xC8	; 200
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9c 83       	std	Y+4, r25	; 0x04
    2a74:	8b 83       	std	Y+3, r24	; 0x03
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <enterPassword+0x1e6>
    2a7e:	9c 83       	std	Y+4, r25	; 0x04
    2a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	69 f7       	brne	.-38     	; 0x2a6e <enterPassword+0x1da>
    2a94:	14 c0       	rjmp	.+40     	; 0x2abe <enterPassword+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a96:	6f 81       	ldd	r22, Y+7	; 0x07
    2a98:	78 85       	ldd	r23, Y+8	; 0x08
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	9e 81       	ldd	r25, Y+6	; 0x06
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <enterPassword+0x222>
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
		password[i] = KEYPAD_getPressedKey();
		_delay_ms(DELAY_Keypad);				//DELAY SO KEYPAD DOESN'T REPEAT
		LCD_displayCharacter('*');
	}
	_delay_ms(DELAY_Keypad);
}
    2abe:	6f 96       	adiw	r28, 0x1f	; 31
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <sendPassword>:


void sendPassword( uint8 password[] )
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	61 97       	sbiw	r28, 0x11	; 17
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	99 8b       	std	Y+17, r25	; 0x11
    2aea:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i=0 ; i<4 ; i++)
    2aec:	1f 86       	std	Y+15, r1	; 0x0f
    2aee:	80 c0       	rjmp	.+256    	; 0x2bf0 <sendPassword+0x11c>
	{
		UART_sendByte( password[i] );
    2af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	88 89       	ldd	r24, Y+16	; 0x10
    2af8:	99 89       	ldd	r25, Y+17	; 0x11
    2afa:	fc 01       	movw	r30, r24
    2afc:	e2 0f       	add	r30, r18
    2afe:	f3 1f       	adc	r31, r19
    2b00:	80 81       	ld	r24, Z
    2b02:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <UART_sendByte>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a2 e0       	ldi	r26, 0x02	; 2
    2b0c:	b3 e4       	ldi	r27, 0x43	; 67
    2b0e:	8b 87       	std	Y+11, r24	; 0x0b
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	ad 87       	std	Y+13, r26	; 0x0d
    2b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	8f 83       	std	Y+7, r24	; 0x07
    2b30:	98 87       	std	Y+8, r25	; 0x08
    2b32:	a9 87       	std	Y+9, r26	; 0x09
    2b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b36:	6f 81       	ldd	r22, Y+7	; 0x07
    2b38:	78 85       	ldd	r23, Y+8	; 0x08
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <sendPassword+0x84>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <sendPassword+0x102>
	else if (__tmp > 65535)
    2b58:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5a:	78 85       	ldd	r23, Y+8	; 0x08
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <sendPassword+0xe4>
    2b9a:	88 ec       	ldi	r24, 0xC8	; 200
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <sendPassword+0xd2>
    2baa:	9c 83       	std	Y+4, r25	; 0x04
    2bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <sendPassword+0xc6>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <sendPassword+0x10e>
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
}


void sendPassword( uint8 password[] )
{
	for (uint8 i=0 ; i<4 ; i++)
    2bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
    2bee:	8f 87       	std	Y+15, r24	; 0x0f
    2bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf2:	84 30       	cpi	r24, 0x04	; 4
    2bf4:	08 f4       	brcc	.+2      	; 0x2bf8 <sendPassword+0x124>
    2bf6:	7c cf       	rjmp	.-264    	; 0x2af0 <sendPassword+0x1c>
	{
		UART_sendByte( password[i] );
		_delay_ms(DELAY_UART);
	}
}
    2bf8:	61 96       	adiw	r28, 0x11	; 17
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <openDoor>:

void openDoor(void){
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
	TIMER0_Init(&TConfig);
    2c12:	80 e5       	ldi	r24, 0x50	; 80
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	0e 94 95 1c 	call	0x392a	; 0x392a <TIMER0_Init>
	LCD_clearScreen();
    2c1a:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
	LCD_displayString("Opening Door...");
    2c1e:	89 e0       	ldi	r24, 0x09	; 9
    2c20:	91 e0       	ldi	r25, 0x01	; 1
    2c22:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
	while(g_counter < 465);
    2c26:	80 91 56 01 	lds	r24, 0x0156
    2c2a:	90 91 57 01 	lds	r25, 0x0157
    2c2e:	21 e0       	ldi	r18, 0x01	; 1
    2c30:	81 3d       	cpi	r24, 0xD1	; 209
    2c32:	92 07       	cpc	r25, r18
    2c34:	c4 f3       	brlt	.-16     	; 0x2c26 <openDoor+0x1c>
	g_counter = 0;
    2c36:	10 92 57 01 	sts	0x0157, r1
    2c3a:	10 92 56 01 	sts	0x0156, r1
	LCD_clearScreen();
    2c3e:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
	LCD_displayString("Door Open !");
    2c42:	89 e1       	ldi	r24, 0x19	; 25
    2c44:	91 e0       	ldi	r25, 0x01	; 1
    2c46:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
	while(g_counter < 93);
    2c4a:	80 91 56 01 	lds	r24, 0x0156
    2c4e:	90 91 57 01 	lds	r25, 0x0157
    2c52:	8d 35       	cpi	r24, 0x5D	; 93
    2c54:	91 05       	cpc	r25, r1
    2c56:	cc f3       	brlt	.-14     	; 0x2c4a <openDoor+0x40>
	g_counter = 0;
    2c58:	10 92 57 01 	sts	0x0157, r1
    2c5c:	10 92 56 01 	sts	0x0156, r1

	LCD_clearScreen();
    2c60:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
	LCD_displayString("Closing Door...");
    2c64:	85 e2       	ldi	r24, 0x25	; 37
    2c66:	91 e0       	ldi	r25, 0x01	; 1
    2c68:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
	while(g_counter < 465);
    2c6c:	80 91 56 01 	lds	r24, 0x0156
    2c70:	90 91 57 01 	lds	r25, 0x0157
    2c74:	21 e0       	ldi	r18, 0x01	; 1
    2c76:	81 3d       	cpi	r24, 0xD1	; 209
    2c78:	92 07       	cpc	r25, r18
    2c7a:	c4 f3       	brlt	.-16     	; 0x2c6c <openDoor+0x62>

	TIMER0_deinit();
    2c7c:	0e 94 ef 1c 	call	0x39de	; 0x39de <TIMER0_deinit>
	g_counter = 0;
    2c80:	10 92 57 01 	sts	0x0157, r1
    2c84:	10 92 56 01 	sts	0x0156, r1
}
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <securityAlarm>:

void securityAlarm(void){
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
	TIMER0_Init(&TConfig);
    2c96:	80 e5       	ldi	r24, 0x50	; 80
    2c98:	91 e0       	ldi	r25, 0x01	; 1
    2c9a:	0e 94 95 1c 	call	0x392a	; 0x392a <TIMER0_Init>
	LCD_clearScreen();
    2c9e:	0e 94 25 1c 	call	0x384a	; 0x384a <LCD_clearScreen>
	LCD_displayString("SECURITY ALARM!");
    2ca2:	85 e3       	ldi	r24, 0x35	; 53
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
	while(g_counter < 465);
    2caa:	80 91 56 01 	lds	r24, 0x0156
    2cae:	90 91 57 01 	lds	r25, 0x0157
    2cb2:	21 e0       	ldi	r18, 0x01	; 1
    2cb4:	81 3d       	cpi	r24, 0xD1	; 209
    2cb6:	92 07       	cpc	r25, r18
    2cb8:	c4 f3       	brlt	.-16     	; 0x2caa <securityAlarm+0x1c>
	TIMER0_deinit();
    2cba:	0e 94 ef 1c 	call	0x39de	; 0x39de <TIMER0_deinit>
	g_counter = 0;
    2cbe:	10 92 57 01 	sts	0x0157, r1
    2cc2:	10 92 56 01 	sts	0x0156, r1
}
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <timerHandler>:

void timerHandler(void){
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
	TIMER0_setValue(3);
    2cd4:	83 e0       	ldi	r24, 0x03	; 3
    2cd6:	0e 94 c5 1c 	call	0x398a	; 0x398a <TIMER0_setValue>
	g_counter++;
    2cda:	80 91 56 01 	lds	r24, 0x0156
    2cde:	90 91 57 01 	lds	r25, 0x0157
    2ce2:	01 96       	adiw	r24, 0x01	; 1
    2ce4:	90 93 57 01 	sts	0x0157, r25
    2ce8:	80 93 56 01 	sts	0x0156, r24
}
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <KEYPAD_getPressedKey+0x6>
    2cf8:	0f 92       	push	r0
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2cfe:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2d00:	1b 82       	std	Y+3, r1	; 0x03
    2d02:	43 c0       	rjmp	.+134    	; 0x2d8a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	98 2f       	mov	r25, r24
    2d10:	9c 5f       	subi	r25, 0xFC	; 252
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	69 2f       	mov	r22, r25
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	88 2f       	mov	r24, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9c 01       	movw	r18, r24
    2d24:	2c 5f       	subi	r18, 0xFC	; 252
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <KEYPAD_getPressedKey+0x40>
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	2a 95       	dec	r18
    2d34:	e2 f7       	brpl	.-8      	; 0x2d2e <KEYPAD_getPressedKey+0x3c>
    2d36:	80 95       	com	r24
    2d38:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	69 81       	ldd	r22, Y+1	; 0x01
    2d3e:	0e 94 84 08 	call	0x1108	; 0x1108 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2d42:	1a 82       	std	Y+2, r1	; 0x02
    2d44:	1c c0       	rjmp	.+56     	; 0x2d7e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	6a 81       	ldd	r22, Y+2	; 0x02
    2d4a:	0e 94 88 07 	call	0xf10	; 0xf10 <GPIO_readPin>
    2d4e:	88 23       	and	r24, r24
    2d50:	99 f4       	brne	.+38     	; 0x2d78 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	98 2f       	mov	r25, r24
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	89 0f       	add	r24, r25
    2d66:	8f 5f       	subi	r24, 0xFF	; 255
    2d68:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
    2d7c:	8a 83       	std	Y+2, r24	; 0x02
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	08 f3       	brcs	.-62     	; 0x2d46 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	8b 83       	std	Y+3, r24	; 0x03
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	84 30       	cpi	r24, 0x04	; 4
    2d8e:	08 f4       	brcc	.+2      	; 0x2d92 <KEYPAD_getPressedKey+0xa0>
    2d90:	b9 cf       	rjmp	.-142    	; 0x2d04 <KEYPAD_getPressedKey+0x12>
    2d92:	b6 cf       	rjmp	.-148    	; 0x2d00 <KEYPAD_getPressedKey+0xe>

00002d94 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <KEYPAD_4x4_adjustKeyNumber+0x6>
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <KEYPAD_4x4_adjustKeyNumber+0x8>
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2da2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	3c 83       	std	Y+4, r19	; 0x04
    2dac:	2b 83       	std	Y+3, r18	; 0x03
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	88 30       	cpi	r24, 0x08	; 8
    2db4:	91 05       	cpc	r25, r1
    2db6:	09 f4       	brne	.+2      	; 0x2dba <KEYPAD_4x4_adjustKeyNumber+0x26>
    2db8:	70 c0       	rjmp	.+224    	; 0x2e9a <KEYPAD_4x4_adjustKeyNumber+0x106>
    2dba:	2b 81       	ldd	r18, Y+3	; 0x03
    2dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dbe:	29 30       	cpi	r18, 0x09	; 9
    2dc0:	31 05       	cpc	r19, r1
    2dc2:	5c f5       	brge	.+86     	; 0x2e1a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	84 30       	cpi	r24, 0x04	; 4
    2dca:	91 05       	cpc	r25, r1
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2dce:	59 c0       	rjmp	.+178    	; 0x2e82 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd4:	25 30       	cpi	r18, 0x05	; 5
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	9c f4       	brge	.+38     	; 0x2e00 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	82 30       	cpi	r24, 0x02	; 2
    2de0:	91 05       	cpc	r25, r1
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2de4:	48 c0       	rjmp	.+144    	; 0x2e76 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2de6:	2b 81       	ldd	r18, Y+3	; 0x03
    2de8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dea:	23 30       	cpi	r18, 0x03	; 3
    2dec:	31 05       	cpc	r19, r1
    2dee:	0c f0       	brlt	.+2      	; 0x2df2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2df0:	45 c0       	rjmp	.+138    	; 0x2e7c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	81 30       	cpi	r24, 0x01	; 1
    2df8:	91 05       	cpc	r25, r1
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2dfc:	39 c0       	rjmp	.+114    	; 0x2e70 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2dfe:	67 c0       	rjmp	.+206    	; 0x2ece <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2e00:	2b 81       	ldd	r18, Y+3	; 0x03
    2e02:	3c 81       	ldd	r19, Y+4	; 0x04
    2e04:	26 30       	cpi	r18, 0x06	; 6
    2e06:	31 05       	cpc	r19, r1
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <KEYPAD_4x4_adjustKeyNumber+0x78>
    2e0a:	41 c0       	rjmp	.+130    	; 0x2e8e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	87 30       	cpi	r24, 0x07	; 7
    2e12:	91 05       	cpc	r25, r1
    2e14:	0c f0       	brlt	.+2      	; 0x2e18 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2e16:	3e c0       	rjmp	.+124    	; 0x2e94 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2e18:	37 c0       	rjmp	.+110    	; 0x2e88 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1e:	2c 30       	cpi	r18, 0x0C	; 12
    2e20:	31 05       	cpc	r19, r1
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2e24:	46 c0       	rjmp	.+140    	; 0x2eb2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	8d 30       	cpi	r24, 0x0D	; 13
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	5c f4       	brge	.+22     	; 0x2e46 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2e30:	2b 81       	ldd	r18, Y+3	; 0x03
    2e32:	3c 81       	ldd	r19, Y+4	; 0x04
    2e34:	2a 30       	cpi	r18, 0x0A	; 10
    2e36:	31 05       	cpc	r19, r1
    2e38:	b1 f1       	breq	.+108    	; 0x2ea6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	8b 30       	cpi	r24, 0x0B	; 11
    2e40:	91 05       	cpc	r25, r1
    2e42:	a4 f5       	brge	.+104    	; 0x2eac <KEYPAD_4x4_adjustKeyNumber+0x118>
    2e44:	2d c0       	rjmp	.+90     	; 0x2ea0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2e46:	2b 81       	ldd	r18, Y+3	; 0x03
    2e48:	3c 81       	ldd	r19, Y+4	; 0x04
    2e4a:	2e 30       	cpi	r18, 0x0E	; 14
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	b9 f1       	breq	.+110    	; 0x2ebe <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	8e 30       	cpi	r24, 0x0E	; 14
    2e56:	91 05       	cpc	r25, r1
    2e58:	7c f1       	brlt	.+94     	; 0x2eb8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e5e:	2f 30       	cpi	r18, 0x0F	; 15
    2e60:	31 05       	cpc	r19, r1
    2e62:	79 f1       	breq	.+94     	; 0x2ec2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	9c 81       	ldd	r25, Y+4	; 0x04
    2e68:	80 31       	cpi	r24, 0x10	; 16
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	69 f1       	breq	.+90     	; 0x2ec8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2e6e:	2f c0       	rjmp	.+94     	; 0x2ece <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2e70:	87 e0       	ldi	r24, 0x07	; 7
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	2e c0       	rjmp	.+92     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2e76:	88 e0       	ldi	r24, 0x08	; 8
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	2b c0       	rjmp	.+86     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2e7c:	89 e0       	ldi	r24, 0x09	; 9
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	28 c0       	rjmp	.+80     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2e82:	85 e2       	ldi	r24, 0x25	; 37
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	25 c0       	rjmp	.+74     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2e88:	84 e0       	ldi	r24, 0x04	; 4
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	22 c0       	rjmp	.+68     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2e8e:	85 e0       	ldi	r24, 0x05	; 5
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	1f c0       	rjmp	.+62     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2e94:	86 e0       	ldi	r24, 0x06	; 6
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	1c c0       	rjmp	.+56     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2e9a:	8a e2       	ldi	r24, 0x2A	; 42
    2e9c:	89 83       	std	Y+1, r24	; 0x01
    2e9e:	19 c0       	rjmp	.+50     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	89 83       	std	Y+1, r24	; 0x01
    2ea4:	16 c0       	rjmp	.+44     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	13 c0       	rjmp	.+38     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2eac:	83 e0       	ldi	r24, 0x03	; 3
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	10 c0       	rjmp	.+32     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2eb2:	8d e2       	ldi	r24, 0x2D	; 45
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	0d c0       	rjmp	.+26     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2eb8:	8d e0       	ldi	r24, 0x0D	; 13
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	0a c0       	rjmp	.+20     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2ebe:	19 82       	std	Y+1, r1	; 0x01
    2ec0:	08 c0       	rjmp	.+16     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2ec2:	8d e3       	ldi	r24, 0x3D	; 61
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	05 c0       	rjmp	.+10     	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2ec8:	8b e2       	ldi	r24, 0x2B	; 43
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	64 e0       	ldi	r22, 0x04	; 4
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	65 e0       	ldi	r22, 0x05	; 5
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2efe:	83 e0       	ldi	r24, 0x03	; 3
    2f00:	66 e0       	ldi	r22, 0x06	; 6
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	6f ef       	ldi	r22, 0xFF	; 255
    2f0c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2f10:	88 e3       	ldi	r24, 0x38	; 56
    2f12:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2f16:	8c e0       	ldi	r24, 0x0C	; 12
    2f18:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_sendCommand>
}
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	ea 97       	sbiw	r28, 0x3a	; 58
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2f3e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2f40:	83 e0       	ldi	r24, 0x03	; 3
    2f42:	64 e0       	ldi	r22, 0x04	; 4
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2f4a:	83 e0       	ldi	r24, 0x03	; 3
    2f4c:	65 e0       	ldi	r22, 0x05	; 5
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	a0 e8       	ldi	r26, 0x80	; 128
    2f5a:	bf e3       	ldi	r27, 0x3F	; 63
    2f5c:	8d ab       	std	Y+53, r24	; 0x35
    2f5e:	9e ab       	std	Y+54, r25	; 0x36
    2f60:	af ab       	std	Y+55, r26	; 0x37
    2f62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f64:	6d a9       	ldd	r22, Y+53	; 0x35
    2f66:	7e a9       	ldd	r23, Y+54	; 0x36
    2f68:	8f a9       	ldd	r24, Y+55	; 0x37
    2f6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	4a e7       	ldi	r20, 0x7A	; 122
    2f72:	53 e4       	ldi	r21, 0x43	; 67
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	89 ab       	std	Y+49, r24	; 0x31
    2f7e:	9a ab       	std	Y+50, r25	; 0x32
    2f80:	ab ab       	std	Y+51, r26	; 0x33
    2f82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f84:	69 a9       	ldd	r22, Y+49	; 0x31
    2f86:	7a a9       	ldd	r23, Y+50	; 0x32
    2f88:	8b a9       	ldd	r24, Y+51	; 0x33
    2f8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e8       	ldi	r20, 0x80	; 128
    2f92:	5f e3       	ldi	r21, 0x3F	; 63
    2f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f98:	88 23       	and	r24, r24
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <LCD_sendCommand+0x7e>
		__ticks = 1;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	98 ab       	std	Y+48, r25	; 0x30
    2fa2:	8f a7       	std	Y+47, r24	; 0x2f
    2fa4:	3f c0       	rjmp	.+126    	; 0x3024 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    2faa:	8b a9       	ldd	r24, Y+51	; 0x33
    2fac:	9c a9       	ldd	r25, Y+52	; 0x34
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	6d a9       	ldd	r22, Y+53	; 0x35
    2fc0:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc2:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc4:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	51 e4       	ldi	r21, 0x41	; 65
    2fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	98 ab       	std	Y+48, r25	; 0x30
    2fe4:	8f a7       	std	Y+47, r24	; 0x2f
    2fe6:	0f c0       	rjmp	.+30     	; 0x3006 <LCD_sendCommand+0xde>
    2fe8:	89 e1       	ldi	r24, 0x19	; 25
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	9e a7       	std	Y+46, r25	; 0x2e
    2fee:	8d a7       	std	Y+45, r24	; 0x2d
    2ff0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ff2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_sendCommand+0xcc>
    2ff8:	9e a7       	std	Y+46, r25	; 0x2e
    2ffa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	98 ab       	std	Y+48, r25	; 0x30
    3004:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3006:	8f a5       	ldd	r24, Y+47	; 0x2f
    3008:	98 a9       	ldd	r25, Y+48	; 0x30
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	69 f7       	brne	.-38     	; 0x2fe8 <LCD_sendCommand+0xc0>
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3010:	69 a9       	ldd	r22, Y+49	; 0x31
    3012:	7a a9       	ldd	r23, Y+50	; 0x32
    3014:	8b a9       	ldd	r24, Y+51	; 0x33
    3016:	9c a9       	ldd	r25, Y+52	; 0x34
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	98 ab       	std	Y+48, r25	; 0x30
    3022:	8f a7       	std	Y+47, r24	; 0x2f
    3024:	8f a5       	ldd	r24, Y+47	; 0x2f
    3026:	98 a9       	ldd	r25, Y+48	; 0x30
    3028:	9c a7       	std	Y+44, r25	; 0x2c
    302a:	8b a7       	std	Y+43, r24	; 0x2b
    302c:	8b a5       	ldd	r24, Y+43	; 0x2b
    302e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <LCD_sendCommand+0x108>
    3034:	9c a7       	std	Y+44, r25	; 0x2c
    3036:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3038:	83 e0       	ldi	r24, 0x03	; 3
    303a:	66 e0       	ldi	r22, 0x06	; 6
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	a0 e8       	ldi	r26, 0x80	; 128
    3048:	bf e3       	ldi	r27, 0x3F	; 63
    304a:	8f a3       	std	Y+39, r24	; 0x27
    304c:	98 a7       	std	Y+40, r25	; 0x28
    304e:	a9 a7       	std	Y+41, r26	; 0x29
    3050:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3052:	6f a1       	ldd	r22, Y+39	; 0x27
    3054:	78 a5       	ldd	r23, Y+40	; 0x28
    3056:	89 a5       	ldd	r24, Y+41	; 0x29
    3058:	9a a5       	ldd	r25, Y+42	; 0x2a
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	4a e7       	ldi	r20, 0x7A	; 122
    3060:	53 e4       	ldi	r21, 0x43	; 67
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8b a3       	std	Y+35, r24	; 0x23
    306c:	9c a3       	std	Y+36, r25	; 0x24
    306e:	ad a3       	std	Y+37, r26	; 0x25
    3070:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3072:	6b a1       	ldd	r22, Y+35	; 0x23
    3074:	7c a1       	ldd	r23, Y+36	; 0x24
    3076:	8d a1       	ldd	r24, Y+37	; 0x25
    3078:	9e a1       	ldd	r25, Y+38	; 0x26
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	2c f4       	brge	.+10     	; 0x3094 <LCD_sendCommand+0x16c>
		__ticks = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9a a3       	std	Y+34, r25	; 0x22
    3090:	89 a3       	std	Y+33, r24	; 0x21
    3092:	3f c0       	rjmp	.+126    	; 0x3112 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    3094:	6b a1       	ldd	r22, Y+35	; 0x23
    3096:	7c a1       	ldd	r23, Y+36	; 0x24
    3098:	8d a1       	ldd	r24, Y+37	; 0x25
    309a:	9e a1       	ldd	r25, Y+38	; 0x26
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	3f ef       	ldi	r19, 0xFF	; 255
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	57 e4       	ldi	r21, 0x47	; 71
    30a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	4c f5       	brge	.+82     	; 0x30fe <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ac:	6f a1       	ldd	r22, Y+39	; 0x27
    30ae:	78 a5       	ldd	r23, Y+40	; 0x28
    30b0:	89 a5       	ldd	r24, Y+41	; 0x29
    30b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e2       	ldi	r20, 0x20	; 32
    30ba:	51 e4       	ldi	r21, 0x41	; 65
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	bc 01       	movw	r22, r24
    30c6:	cd 01       	movw	r24, r26
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	9a a3       	std	Y+34, r25	; 0x22
    30d2:	89 a3       	std	Y+33, r24	; 0x21
    30d4:	0f c0       	rjmp	.+30     	; 0x30f4 <LCD_sendCommand+0x1cc>
    30d6:	89 e1       	ldi	r24, 0x19	; 25
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	98 a3       	std	Y+32, r25	; 0x20
    30dc:	8f 8f       	std	Y+31, r24	; 0x1f
    30de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30e0:	98 a1       	ldd	r25, Y+32	; 0x20
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <LCD_sendCommand+0x1ba>
    30e6:	98 a3       	std	Y+32, r25	; 0x20
    30e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ea:	89 a1       	ldd	r24, Y+33	; 0x21
    30ec:	9a a1       	ldd	r25, Y+34	; 0x22
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	9a a3       	std	Y+34, r25	; 0x22
    30f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f4:	89 a1       	ldd	r24, Y+33	; 0x21
    30f6:	9a a1       	ldd	r25, Y+34	; 0x22
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	69 f7       	brne	.-38     	; 0x30d6 <LCD_sendCommand+0x1ae>
    30fc:	14 c0       	rjmp	.+40     	; 0x3126 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3100:	7c a1       	ldd	r23, Y+36	; 0x24
    3102:	8d a1       	ldd	r24, Y+37	; 0x25
    3104:	9e a1       	ldd	r25, Y+38	; 0x26
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9a a3       	std	Y+34, r25	; 0x22
    3110:	89 a3       	std	Y+33, r24	; 0x21
    3112:	89 a1       	ldd	r24, Y+33	; 0x21
    3114:	9a a1       	ldd	r25, Y+34	; 0x22
    3116:	9e 8f       	std	Y+30, r25	; 0x1e
    3118:	8d 8f       	std	Y+29, r24	; 0x1d
    311a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    311c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	f1 f7       	brne	.-4      	; 0x311e <LCD_sendCommand+0x1f6>
    3122:	9e 8f       	std	Y+30, r25	; 0x1e
    3124:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3126:	82 e0       	ldi	r24, 0x02	; 2
    3128:	6a ad       	ldd	r22, Y+58	; 0x3a
    312a:	0e 94 84 08 	call	0x1108	; 0x1108 <GPIO_writePort>
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a0 e8       	ldi	r26, 0x80	; 128
    3134:	bf e3       	ldi	r27, 0x3F	; 63
    3136:	89 8f       	std	Y+25, r24	; 0x19
    3138:	9a 8f       	std	Y+26, r25	; 0x1a
    313a:	ab 8f       	std	Y+27, r26	; 0x1b
    313c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313e:	69 8d       	ldd	r22, Y+25	; 0x19
    3140:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	4a e7       	ldi	r20, 0x7A	; 122
    314c:	53 e4       	ldi	r21, 0x43	; 67
    314e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3152:	dc 01       	movw	r26, r24
    3154:	cb 01       	movw	r24, r22
    3156:	8d 8b       	std	Y+21, r24	; 0x15
    3158:	9e 8b       	std	Y+22, r25	; 0x16
    315a:	af 8b       	std	Y+23, r26	; 0x17
    315c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    315e:	6d 89       	ldd	r22, Y+21	; 0x15
    3160:	7e 89       	ldd	r23, Y+22	; 0x16
    3162:	8f 89       	ldd	r24, Y+23	; 0x17
    3164:	98 8d       	ldd	r25, Y+24	; 0x18
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	40 e8       	ldi	r20, 0x80	; 128
    316c:	5f e3       	ldi	r21, 0x3F	; 63
    316e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3172:	88 23       	and	r24, r24
    3174:	2c f4       	brge	.+10     	; 0x3180 <LCD_sendCommand+0x258>
		__ticks = 1;
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	9c 8b       	std	Y+20, r25	; 0x14
    317c:	8b 8b       	std	Y+19, r24	; 0x13
    317e:	3f c0       	rjmp	.+126    	; 0x31fe <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3180:	6d 89       	ldd	r22, Y+21	; 0x15
    3182:	7e 89       	ldd	r23, Y+22	; 0x16
    3184:	8f 89       	ldd	r24, Y+23	; 0x17
    3186:	98 8d       	ldd	r25, Y+24	; 0x18
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	3f ef       	ldi	r19, 0xFF	; 255
    318c:	4f e7       	ldi	r20, 0x7F	; 127
    318e:	57 e4       	ldi	r21, 0x47	; 71
    3190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3194:	18 16       	cp	r1, r24
    3196:	4c f5       	brge	.+82     	; 0x31ea <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3198:	69 8d       	ldd	r22, Y+25	; 0x19
    319a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    319c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    319e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e2       	ldi	r20, 0x20	; 32
    31a6:	51 e4       	ldi	r21, 0x41	; 65
    31a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	bc 01       	movw	r22, r24
    31b2:	cd 01       	movw	r24, r26
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	9c 8b       	std	Y+20, r25	; 0x14
    31be:	8b 8b       	std	Y+19, r24	; 0x13
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <LCD_sendCommand+0x2b8>
    31c2:	89 e1       	ldi	r24, 0x19	; 25
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	9a 8b       	std	Y+18, r25	; 0x12
    31c8:	89 8b       	std	Y+17, r24	; 0x11
    31ca:	89 89       	ldd	r24, Y+17	; 0x11
    31cc:	9a 89       	ldd	r25, Y+18	; 0x12
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <LCD_sendCommand+0x2a6>
    31d2:	9a 8b       	std	Y+18, r25	; 0x12
    31d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d6:	8b 89       	ldd	r24, Y+19	; 0x13
    31d8:	9c 89       	ldd	r25, Y+20	; 0x14
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	9c 8b       	std	Y+20, r25	; 0x14
    31de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e0:	8b 89       	ldd	r24, Y+19	; 0x13
    31e2:	9c 89       	ldd	r25, Y+20	; 0x14
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	69 f7       	brne	.-38     	; 0x31c2 <LCD_sendCommand+0x29a>
    31e8:	14 c0       	rjmp	.+40     	; 0x3212 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ea:	6d 89       	ldd	r22, Y+21	; 0x15
    31ec:	7e 89       	ldd	r23, Y+22	; 0x16
    31ee:	8f 89       	ldd	r24, Y+23	; 0x17
    31f0:	98 8d       	ldd	r25, Y+24	; 0x18
    31f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9c 8b       	std	Y+20, r25	; 0x14
    31fc:	8b 8b       	std	Y+19, r24	; 0x13
    31fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3200:	9c 89       	ldd	r25, Y+20	; 0x14
    3202:	98 8b       	std	Y+16, r25	; 0x10
    3204:	8f 87       	std	Y+15, r24	; 0x0f
    3206:	8f 85       	ldd	r24, Y+15	; 0x0f
    3208:	98 89       	ldd	r25, Y+16	; 0x10
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <LCD_sendCommand+0x2e2>
    320e:	98 8b       	std	Y+16, r25	; 0x10
    3210:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3212:	83 e0       	ldi	r24, 0x03	; 3
    3214:	66 e0       	ldi	r22, 0x06	; 6
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	a0 e8       	ldi	r26, 0x80	; 128
    3222:	bf e3       	ldi	r27, 0x3F	; 63
    3224:	8b 87       	std	Y+11, r24	; 0x0b
    3226:	9c 87       	std	Y+12, r25	; 0x0c
    3228:	ad 87       	std	Y+13, r26	; 0x0d
    322a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322c:	6b 85       	ldd	r22, Y+11	; 0x0b
    322e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3230:	8d 85       	ldd	r24, Y+13	; 0x0d
    3232:	9e 85       	ldd	r25, Y+14	; 0x0e
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	4a e7       	ldi	r20, 0x7A	; 122
    323a:	53 e4       	ldi	r21, 0x43	; 67
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	8f 83       	std	Y+7, r24	; 0x07
    3246:	98 87       	std	Y+8, r25	; 0x08
    3248:	a9 87       	std	Y+9, r26	; 0x09
    324a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324c:	6f 81       	ldd	r22, Y+7	; 0x07
    324e:	78 85       	ldd	r23, Y+8	; 0x08
    3250:	89 85       	ldd	r24, Y+9	; 0x09
    3252:	9a 85       	ldd	r25, Y+10	; 0x0a
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e8       	ldi	r20, 0x80	; 128
    325a:	5f e3       	ldi	r21, 0x3F	; 63
    325c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3260:	88 23       	and	r24, r24
    3262:	2c f4       	brge	.+10     	; 0x326e <LCD_sendCommand+0x346>
		__ticks = 1;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9e 83       	std	Y+6, r25	; 0x06
    326a:	8d 83       	std	Y+5, r24	; 0x05
    326c:	3f c0       	rjmp	.+126    	; 0x32ec <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    326e:	6f 81       	ldd	r22, Y+7	; 0x07
    3270:	78 85       	ldd	r23, Y+8	; 0x08
    3272:	89 85       	ldd	r24, Y+9	; 0x09
    3274:	9a 85       	ldd	r25, Y+10	; 0x0a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	3f ef       	ldi	r19, 0xFF	; 255
    327a:	4f e7       	ldi	r20, 0x7F	; 127
    327c:	57 e4       	ldi	r21, 0x47	; 71
    327e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	4c f5       	brge	.+82     	; 0x32d8 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3286:	6b 85       	ldd	r22, Y+11	; 0x0b
    3288:	7c 85       	ldd	r23, Y+12	; 0x0c
    328a:	8d 85       	ldd	r24, Y+13	; 0x0d
    328c:	9e 85       	ldd	r25, Y+14	; 0x0e
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e2       	ldi	r20, 0x20	; 32
    3294:	51 e4       	ldi	r21, 0x41	; 65
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
    32ae:	0f c0       	rjmp	.+30     	; 0x32ce <LCD_sendCommand+0x3a6>
    32b0:	89 e1       	ldi	r24, 0x19	; 25
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9c 83       	std	Y+4, r25	; 0x04
    32b6:	8b 83       	std	Y+3, r24	; 0x03
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <LCD_sendCommand+0x394>
    32c0:	9c 83       	std	Y+4, r25	; 0x04
    32c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ce:	8d 81       	ldd	r24, Y+5	; 0x05
    32d0:	9e 81       	ldd	r25, Y+6	; 0x06
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	69 f7       	brne	.-38     	; 0x32b0 <LCD_sendCommand+0x388>
    32d6:	14 c0       	rjmp	.+40     	; 0x3300 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	78 85       	ldd	r23, Y+8	; 0x08
    32dc:	89 85       	ldd	r24, Y+9	; 0x09
    32de:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	89 83       	std	Y+1, r24	; 0x01
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	9a 81       	ldd	r25, Y+2	; 0x02
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <LCD_sendCommand+0x3d0>
    32fc:	9a 83       	std	Y+2, r25	; 0x02
    32fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3300:	ea 96       	adiw	r28, 0x3a	; 58
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	ea 97       	sbiw	r28, 0x3a	; 58
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    3328:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    332a:	83 e0       	ldi	r24, 0x03	; 3
    332c:	64 e0       	ldi	r22, 0x04	; 4
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    3334:	83 e0       	ldi	r24, 0x03	; 3
    3336:	65 e0       	ldi	r22, 0x05	; 5
    3338:	40 e0       	ldi	r20, 0x00	; 0
    333a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a0 e8       	ldi	r26, 0x80	; 128
    3344:	bf e3       	ldi	r27, 0x3F	; 63
    3346:	8d ab       	std	Y+53, r24	; 0x35
    3348:	9e ab       	std	Y+54, r25	; 0x36
    334a:	af ab       	std	Y+55, r26	; 0x37
    334c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334e:	6d a9       	ldd	r22, Y+53	; 0x35
    3350:	7e a9       	ldd	r23, Y+54	; 0x36
    3352:	8f a9       	ldd	r24, Y+55	; 0x37
    3354:	98 ad       	ldd	r25, Y+56	; 0x38
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	4a e7       	ldi	r20, 0x7A	; 122
    335c:	53 e4       	ldi	r21, 0x43	; 67
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	89 ab       	std	Y+49, r24	; 0x31
    3368:	9a ab       	std	Y+50, r25	; 0x32
    336a:	ab ab       	std	Y+51, r26	; 0x33
    336c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    336e:	69 a9       	ldd	r22, Y+49	; 0x31
    3370:	7a a9       	ldd	r23, Y+50	; 0x32
    3372:	8b a9       	ldd	r24, Y+51	; 0x33
    3374:	9c a9       	ldd	r25, Y+52	; 0x34
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e8       	ldi	r20, 0x80	; 128
    337c:	5f e3       	ldi	r21, 0x3F	; 63
    337e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3382:	88 23       	and	r24, r24
    3384:	2c f4       	brge	.+10     	; 0x3390 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	98 ab       	std	Y+48, r25	; 0x30
    338c:	8f a7       	std	Y+47, r24	; 0x2f
    338e:	3f c0       	rjmp	.+126    	; 0x340e <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    3390:	69 a9       	ldd	r22, Y+49	; 0x31
    3392:	7a a9       	ldd	r23, Y+50	; 0x32
    3394:	8b a9       	ldd	r24, Y+51	; 0x33
    3396:	9c a9       	ldd	r25, Y+52	; 0x34
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	3f ef       	ldi	r19, 0xFF	; 255
    339c:	4f e7       	ldi	r20, 0x7F	; 127
    339e:	57 e4       	ldi	r21, 0x47	; 71
    33a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33a4:	18 16       	cp	r1, r24
    33a6:	4c f5       	brge	.+82     	; 0x33fa <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a8:	6d a9       	ldd	r22, Y+53	; 0x35
    33aa:	7e a9       	ldd	r23, Y+54	; 0x36
    33ac:	8f a9       	ldd	r24, Y+55	; 0x37
    33ae:	98 ad       	ldd	r25, Y+56	; 0x38
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e2       	ldi	r20, 0x20	; 32
    33b6:	51 e4       	ldi	r21, 0x41	; 65
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	98 ab       	std	Y+48, r25	; 0x30
    33ce:	8f a7       	std	Y+47, r24	; 0x2f
    33d0:	0f c0       	rjmp	.+30     	; 0x33f0 <LCD_displayCharacter+0xde>
    33d2:	89 e1       	ldi	r24, 0x19	; 25
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	9e a7       	std	Y+46, r25	; 0x2e
    33d8:	8d a7       	std	Y+45, r24	; 0x2d
    33da:	8d a5       	ldd	r24, Y+45	; 0x2d
    33dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	f1 f7       	brne	.-4      	; 0x33de <LCD_displayCharacter+0xcc>
    33e2:	9e a7       	std	Y+46, r25	; 0x2e
    33e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33e8:	98 a9       	ldd	r25, Y+48	; 0x30
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	98 ab       	std	Y+48, r25	; 0x30
    33ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f2:	98 a9       	ldd	r25, Y+48	; 0x30
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	69 f7       	brne	.-38     	; 0x33d2 <LCD_displayCharacter+0xc0>
    33f8:	14 c0       	rjmp	.+40     	; 0x3422 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fa:	69 a9       	ldd	r22, Y+49	; 0x31
    33fc:	7a a9       	ldd	r23, Y+50	; 0x32
    33fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3400:	9c a9       	ldd	r25, Y+52	; 0x34
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	98 ab       	std	Y+48, r25	; 0x30
    340c:	8f a7       	std	Y+47, r24	; 0x2f
    340e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3410:	98 a9       	ldd	r25, Y+48	; 0x30
    3412:	9c a7       	std	Y+44, r25	; 0x2c
    3414:	8b a7       	std	Y+43, r24	; 0x2b
    3416:	8b a5       	ldd	r24, Y+43	; 0x2b
    3418:	9c a5       	ldd	r25, Y+44	; 0x2c
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <LCD_displayCharacter+0x108>
    341e:	9c a7       	std	Y+44, r25	; 0x2c
    3420:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3422:	83 e0       	ldi	r24, 0x03	; 3
    3424:	66 e0       	ldi	r22, 0x06	; 6
    3426:	41 e0       	ldi	r20, 0x01	; 1
    3428:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	a0 e8       	ldi	r26, 0x80	; 128
    3432:	bf e3       	ldi	r27, 0x3F	; 63
    3434:	8f a3       	std	Y+39, r24	; 0x27
    3436:	98 a7       	std	Y+40, r25	; 0x28
    3438:	a9 a7       	std	Y+41, r26	; 0x29
    343a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343c:	6f a1       	ldd	r22, Y+39	; 0x27
    343e:	78 a5       	ldd	r23, Y+40	; 0x28
    3440:	89 a5       	ldd	r24, Y+41	; 0x29
    3442:	9a a5       	ldd	r25, Y+42	; 0x2a
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	4a e7       	ldi	r20, 0x7A	; 122
    344a:	53 e4       	ldi	r21, 0x43	; 67
    344c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	8b a3       	std	Y+35, r24	; 0x23
    3456:	9c a3       	std	Y+36, r25	; 0x24
    3458:	ad a3       	std	Y+37, r26	; 0x25
    345a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    345c:	6b a1       	ldd	r22, Y+35	; 0x23
    345e:	7c a1       	ldd	r23, Y+36	; 0x24
    3460:	8d a1       	ldd	r24, Y+37	; 0x25
    3462:	9e a1       	ldd	r25, Y+38	; 0x26
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e8       	ldi	r20, 0x80	; 128
    346a:	5f e3       	ldi	r21, 0x3F	; 63
    346c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3470:	88 23       	and	r24, r24
    3472:	2c f4       	brge	.+10     	; 0x347e <LCD_displayCharacter+0x16c>
		__ticks = 1;
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	9a a3       	std	Y+34, r25	; 0x22
    347a:	89 a3       	std	Y+33, r24	; 0x21
    347c:	3f c0       	rjmp	.+126    	; 0x34fc <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    347e:	6b a1       	ldd	r22, Y+35	; 0x23
    3480:	7c a1       	ldd	r23, Y+36	; 0x24
    3482:	8d a1       	ldd	r24, Y+37	; 0x25
    3484:	9e a1       	ldd	r25, Y+38	; 0x26
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	3f ef       	ldi	r19, 0xFF	; 255
    348a:	4f e7       	ldi	r20, 0x7F	; 127
    348c:	57 e4       	ldi	r21, 0x47	; 71
    348e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3492:	18 16       	cp	r1, r24
    3494:	4c f5       	brge	.+82     	; 0x34e8 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3496:	6f a1       	ldd	r22, Y+39	; 0x27
    3498:	78 a5       	ldd	r23, Y+40	; 0x28
    349a:	89 a5       	ldd	r24, Y+41	; 0x29
    349c:	9a a5       	ldd	r25, Y+42	; 0x2a
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e2       	ldi	r20, 0x20	; 32
    34a4:	51 e4       	ldi	r21, 0x41	; 65
    34a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	bc 01       	movw	r22, r24
    34b0:	cd 01       	movw	r24, r26
    34b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	9a a3       	std	Y+34, r25	; 0x22
    34bc:	89 a3       	std	Y+33, r24	; 0x21
    34be:	0f c0       	rjmp	.+30     	; 0x34de <LCD_displayCharacter+0x1cc>
    34c0:	89 e1       	ldi	r24, 0x19	; 25
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	98 a3       	std	Y+32, r25	; 0x20
    34c6:	8f 8f       	std	Y+31, r24	; 0x1f
    34c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ca:	98 a1       	ldd	r25, Y+32	; 0x20
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <LCD_displayCharacter+0x1ba>
    34d0:	98 a3       	std	Y+32, r25	; 0x20
    34d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d4:	89 a1       	ldd	r24, Y+33	; 0x21
    34d6:	9a a1       	ldd	r25, Y+34	; 0x22
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	9a a3       	std	Y+34, r25	; 0x22
    34dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34de:	89 a1       	ldd	r24, Y+33	; 0x21
    34e0:	9a a1       	ldd	r25, Y+34	; 0x22
    34e2:	00 97       	sbiw	r24, 0x00	; 0
    34e4:	69 f7       	brne	.-38     	; 0x34c0 <LCD_displayCharacter+0x1ae>
    34e6:	14 c0       	rjmp	.+40     	; 0x3510 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e8:	6b a1       	ldd	r22, Y+35	; 0x23
    34ea:	7c a1       	ldd	r23, Y+36	; 0x24
    34ec:	8d a1       	ldd	r24, Y+37	; 0x25
    34ee:	9e a1       	ldd	r25, Y+38	; 0x26
    34f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	9a a3       	std	Y+34, r25	; 0x22
    34fa:	89 a3       	std	Y+33, r24	; 0x21
    34fc:	89 a1       	ldd	r24, Y+33	; 0x21
    34fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3500:	9e 8f       	std	Y+30, r25	; 0x1e
    3502:	8d 8f       	std	Y+29, r24	; 0x1d
    3504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3506:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <LCD_displayCharacter+0x1f6>
    350c:	9e 8f       	std	Y+30, r25	; 0x1e
    350e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    3510:	82 e0       	ldi	r24, 0x02	; 2
    3512:	6a ad       	ldd	r22, Y+58	; 0x3a
    3514:	0e 94 84 08 	call	0x1108	; 0x1108 <GPIO_writePort>
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	a0 e8       	ldi	r26, 0x80	; 128
    351e:	bf e3       	ldi	r27, 0x3F	; 63
    3520:	89 8f       	std	Y+25, r24	; 0x19
    3522:	9a 8f       	std	Y+26, r25	; 0x1a
    3524:	ab 8f       	std	Y+27, r26	; 0x1b
    3526:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3528:	69 8d       	ldd	r22, Y+25	; 0x19
    352a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    352c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    352e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	4a e7       	ldi	r20, 0x7A	; 122
    3536:	53 e4       	ldi	r21, 0x43	; 67
    3538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8d 8b       	std	Y+21, r24	; 0x15
    3542:	9e 8b       	std	Y+22, r25	; 0x16
    3544:	af 8b       	std	Y+23, r26	; 0x17
    3546:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3548:	6d 89       	ldd	r22, Y+21	; 0x15
    354a:	7e 89       	ldd	r23, Y+22	; 0x16
    354c:	8f 89       	ldd	r24, Y+23	; 0x17
    354e:	98 8d       	ldd	r25, Y+24	; 0x18
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	2c f4       	brge	.+10     	; 0x356a <LCD_displayCharacter+0x258>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9c 8b       	std	Y+20, r25	; 0x14
    3566:	8b 8b       	std	Y+19, r24	; 0x13
    3568:	3f c0       	rjmp	.+126    	; 0x35e8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    356a:	6d 89       	ldd	r22, Y+21	; 0x15
    356c:	7e 89       	ldd	r23, Y+22	; 0x16
    356e:	8f 89       	ldd	r24, Y+23	; 0x17
    3570:	98 8d       	ldd	r25, Y+24	; 0x18
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357e:	18 16       	cp	r1, r24
    3580:	4c f5       	brge	.+82     	; 0x35d4 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3582:	69 8d       	ldd	r22, Y+25	; 0x19
    3584:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9c 8b       	std	Y+20, r25	; 0x14
    35a8:	8b 8b       	std	Y+19, r24	; 0x13
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <LCD_displayCharacter+0x2b8>
    35ac:	89 e1       	ldi	r24, 0x19	; 25
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9a 8b       	std	Y+18, r25	; 0x12
    35b2:	89 8b       	std	Y+17, r24	; 0x11
    35b4:	89 89       	ldd	r24, Y+17	; 0x11
    35b6:	9a 89       	ldd	r25, Y+18	; 0x12
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <LCD_displayCharacter+0x2a6>
    35bc:	9a 8b       	std	Y+18, r25	; 0x12
    35be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	8b 89       	ldd	r24, Y+19	; 0x13
    35c2:	9c 89       	ldd	r25, Y+20	; 0x14
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	9c 8b       	std	Y+20, r25	; 0x14
    35c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ca:	8b 89       	ldd	r24, Y+19	; 0x13
    35cc:	9c 89       	ldd	r25, Y+20	; 0x14
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	69 f7       	brne	.-38     	; 0x35ac <LCD_displayCharacter+0x29a>
    35d2:	14 c0       	rjmp	.+40     	; 0x35fc <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	6d 89       	ldd	r22, Y+21	; 0x15
    35d6:	7e 89       	ldd	r23, Y+22	; 0x16
    35d8:	8f 89       	ldd	r24, Y+23	; 0x17
    35da:	98 8d       	ldd	r25, Y+24	; 0x18
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9c 8b       	std	Y+20, r25	; 0x14
    35e6:	8b 8b       	std	Y+19, r24	; 0x13
    35e8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ea:	9c 89       	ldd	r25, Y+20	; 0x14
    35ec:	98 8b       	std	Y+16, r25	; 0x10
    35ee:	8f 87       	std	Y+15, r24	; 0x0f
    35f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f2:	98 89       	ldd	r25, Y+16	; 0x10
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <LCD_displayCharacter+0x2e2>
    35f8:	98 8b       	std	Y+16, r25	; 0x10
    35fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    35fc:	83 e0       	ldi	r24, 0x03	; 3
    35fe:	66 e0       	ldi	r22, 0x06	; 6
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	a0 e8       	ldi	r26, 0x80	; 128
    360c:	bf e3       	ldi	r27, 0x3F	; 63
    360e:	8b 87       	std	Y+11, r24	; 0x0b
    3610:	9c 87       	std	Y+12, r25	; 0x0c
    3612:	ad 87       	std	Y+13, r26	; 0x0d
    3614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3616:	6b 85       	ldd	r22, Y+11	; 0x0b
    3618:	7c 85       	ldd	r23, Y+12	; 0x0c
    361a:	8d 85       	ldd	r24, Y+13	; 0x0d
    361c:	9e 85       	ldd	r25, Y+14	; 0x0e
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	4a e7       	ldi	r20, 0x7A	; 122
    3624:	53 e4       	ldi	r21, 0x43	; 67
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	8f 83       	std	Y+7, r24	; 0x07
    3630:	98 87       	std	Y+8, r25	; 0x08
    3632:	a9 87       	std	Y+9, r26	; 0x09
    3634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3636:	6f 81       	ldd	r22, Y+7	; 0x07
    3638:	78 85       	ldd	r23, Y+8	; 0x08
    363a:	89 85       	ldd	r24, Y+9	; 0x09
    363c:	9a 85       	ldd	r25, Y+10	; 0x0a
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5f e3       	ldi	r21, 0x3F	; 63
    3646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364a:	88 23       	and	r24, r24
    364c:	2c f4       	brge	.+10     	; 0x3658 <LCD_displayCharacter+0x346>
		__ticks = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	3f c0       	rjmp	.+126    	; 0x36d6 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    3658:	6f 81       	ldd	r22, Y+7	; 0x07
    365a:	78 85       	ldd	r23, Y+8	; 0x08
    365c:	89 85       	ldd	r24, Y+9	; 0x09
    365e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3f ef       	ldi	r19, 0xFF	; 255
    3664:	4f e7       	ldi	r20, 0x7F	; 127
    3666:	57 e4       	ldi	r21, 0x47	; 71
    3668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366c:	18 16       	cp	r1, r24
    366e:	4c f5       	brge	.+82     	; 0x36c2 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3670:	6b 85       	ldd	r22, Y+11	; 0x0b
    3672:	7c 85       	ldd	r23, Y+12	; 0x0c
    3674:	8d 85       	ldd	r24, Y+13	; 0x0d
    3676:	9e 85       	ldd	r25, Y+14	; 0x0e
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
    3698:	0f c0       	rjmp	.+30     	; 0x36b8 <LCD_displayCharacter+0x3a6>
    369a:	89 e1       	ldi	r24, 0x19	; 25
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9c 83       	std	Y+4, r25	; 0x04
    36a0:	8b 83       	std	Y+3, r24	; 0x03
    36a2:	8b 81       	ldd	r24, Y+3	; 0x03
    36a4:	9c 81       	ldd	r25, Y+4	; 0x04
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <LCD_displayCharacter+0x394>
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ae:	8d 81       	ldd	r24, Y+5	; 0x05
    36b0:	9e 81       	ldd	r25, Y+6	; 0x06
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ba:	9e 81       	ldd	r25, Y+6	; 0x06
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	69 f7       	brne	.-38     	; 0x369a <LCD_displayCharacter+0x388>
    36c0:	14 c0       	rjmp	.+40     	; 0x36ea <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c2:	6f 81       	ldd	r22, Y+7	; 0x07
    36c4:	78 85       	ldd	r23, Y+8	; 0x08
    36c6:	89 85       	ldd	r24, Y+9	; 0x09
    36c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9e 83       	std	Y+6, r25	; 0x06
    36d4:	8d 83       	std	Y+5, r24	; 0x05
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	9a 83       	std	Y+2, r25	; 0x02
    36dc:	89 83       	std	Y+1, r24	; 0x01
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <LCD_displayCharacter+0x3d0>
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    36ea:	ea 96       	adiw	r28, 0x3a	; 58
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	00 d0       	rcall	.+0      	; 0x3702 <LCD_displayString+0x6>
    3702:	0f 92       	push	r0
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	9b 83       	std	Y+3, r25	; 0x03
    370a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    370c:	19 82       	std	Y+1, r1	; 0x01
    370e:	0e c0       	rjmp	.+28     	; 0x372c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	28 2f       	mov	r18, r24
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	9b 81       	ldd	r25, Y+3	; 0x03
    371a:	fc 01       	movw	r30, r24
    371c:	e2 0f       	add	r30, r18
    371e:	f3 1f       	adc	r31, r19
    3720:	80 81       	ld	r24, Z
    3722:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayCharacter>
		i++;
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	8f 5f       	subi	r24, 0xFF	; 255
    372a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	28 2f       	mov	r18, r24
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	fc 01       	movw	r30, r24
    3738:	e2 0f       	add	r30, r18
    373a:	f3 1f       	adc	r31, r19
    373c:	80 81       	ld	r24, Z
    373e:	88 23       	and	r24, r24
    3740:	39 f7       	brne	.-50     	; 0x3710 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	00 d0       	rcall	.+0      	; 0x3754 <LCD_moveCursor+0x6>
    3754:	00 d0       	rcall	.+0      	; 0x3756 <LCD_moveCursor+0x8>
    3756:	0f 92       	push	r0
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	8a 83       	std	Y+2, r24	; 0x02
    375e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	28 2f       	mov	r18, r24
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	3d 83       	std	Y+5, r19	; 0x05
    3768:	2c 83       	std	Y+4, r18	; 0x04
    376a:	8c 81       	ldd	r24, Y+4	; 0x04
    376c:	9d 81       	ldd	r25, Y+5	; 0x05
    376e:	81 30       	cpi	r24, 0x01	; 1
    3770:	91 05       	cpc	r25, r1
    3772:	c1 f0       	breq	.+48     	; 0x37a4 <LCD_moveCursor+0x56>
    3774:	2c 81       	ldd	r18, Y+4	; 0x04
    3776:	3d 81       	ldd	r19, Y+5	; 0x05
    3778:	22 30       	cpi	r18, 0x02	; 2
    377a:	31 05       	cpc	r19, r1
    377c:	2c f4       	brge	.+10     	; 0x3788 <LCD_moveCursor+0x3a>
    377e:	8c 81       	ldd	r24, Y+4	; 0x04
    3780:	9d 81       	ldd	r25, Y+5	; 0x05
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	61 f0       	breq	.+24     	; 0x379e <LCD_moveCursor+0x50>
    3786:	19 c0       	rjmp	.+50     	; 0x37ba <LCD_moveCursor+0x6c>
    3788:	2c 81       	ldd	r18, Y+4	; 0x04
    378a:	3d 81       	ldd	r19, Y+5	; 0x05
    378c:	22 30       	cpi	r18, 0x02	; 2
    378e:	31 05       	cpc	r19, r1
    3790:	69 f0       	breq	.+26     	; 0x37ac <LCD_moveCursor+0x5e>
    3792:	8c 81       	ldd	r24, Y+4	; 0x04
    3794:	9d 81       	ldd	r25, Y+5	; 0x05
    3796:	83 30       	cpi	r24, 0x03	; 3
    3798:	91 05       	cpc	r25, r1
    379a:	61 f0       	breq	.+24     	; 0x37b4 <LCD_moveCursor+0x66>
    379c:	0e c0       	rjmp	.+28     	; 0x37ba <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	0b c0       	rjmp	.+22     	; 0x37ba <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    37a4:	8b 81       	ldd	r24, Y+3	; 0x03
    37a6:	80 5c       	subi	r24, 0xC0	; 192
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	07 c0       	rjmp	.+14     	; 0x37ba <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    37ac:	8b 81       	ldd	r24, Y+3	; 0x03
    37ae:	80 5f       	subi	r24, 0xF0	; 240
    37b0:	89 83       	std	Y+1, r24	; 0x01
    37b2:	03 c0       	rjmp	.+6      	; 0x37ba <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	80 5b       	subi	r24, 0xB0	; 176
    37b8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	80 68       	ori	r24, 0x80	; 128
    37be:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_sendCommand>
}
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	cf 91       	pop	r28
    37ce:	df 91       	pop	r29
    37d0:	08 95       	ret

000037d2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <LCD_displayStringRowColumn+0x6>
    37d8:	00 d0       	rcall	.+0      	; 0x37da <LCD_displayStringRowColumn+0x8>
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	89 83       	std	Y+1, r24	; 0x01
    37e0:	6a 83       	std	Y+2, r22	; 0x02
    37e2:	5c 83       	std	Y+4, r21	; 0x04
    37e4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	6a 81       	ldd	r22, Y+2	; 0x02
    37ea:	0e 94 a7 1b 	call	0x374e	; 0x374e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	9c 81       	ldd	r25, Y+4	; 0x04
    37f2:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
}
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	08 95       	ret

00003804 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	62 97       	sbiw	r28, 0x12	; 18
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	9a 8b       	std	Y+18, r25	; 0x12
    381a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    381c:	89 89       	ldd	r24, Y+17	; 0x11
    381e:	9a 89       	ldd	r25, Y+18	; 0x12
    3820:	9e 01       	movw	r18, r28
    3822:	2f 5f       	subi	r18, 0xFF	; 255
    3824:	3f 4f       	sbci	r19, 0xFF	; 255
    3826:	b9 01       	movw	r22, r18
    3828:	4a e0       	ldi	r20, 0x0A	; 10
    382a:	50 e0       	ldi	r21, 0x00	; 0
    382c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <itoa>
   LCD_displayString(buff); /* Display the string */
    3830:	ce 01       	movw	r24, r28
    3832:	01 96       	adiw	r24, 0x01	; 1
    3834:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <LCD_displayString>
}
    3838:	62 96       	adiw	r28, 0x12	; 18
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_sendCommand>
}
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <__vector_9>:

/*******************************************************************************
 *                      ISR Declaration		                                   *
 *******************************************************************************/
/* Timer0 overflow ISR */
ISR(TIMER0_OVF_vect) {
    385e:	1f 92       	push	r1
    3860:	0f 92       	push	r0
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	0f 92       	push	r0
    3866:	11 24       	eor	r1, r1
    3868:	2f 93       	push	r18
    386a:	3f 93       	push	r19
    386c:	4f 93       	push	r20
    386e:	5f 93       	push	r21
    3870:	6f 93       	push	r22
    3872:	7f 93       	push	r23
    3874:	8f 93       	push	r24
    3876:	9f 93       	push	r25
    3878:	af 93       	push	r26
    387a:	bf 93       	push	r27
    387c:	ef 93       	push	r30
    387e:	ff 93       	push	r31
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER0_callBackPtr!=NULL_PTR)
    3888:	80 91 58 01 	lds	r24, 0x0158
    388c:	90 91 59 01 	lds	r25, 0x0159
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	29 f0       	breq	.+10     	; 0x389e <__vector_9+0x40>
	(*g_TIMER0_callBackPtr)();
    3894:	e0 91 58 01 	lds	r30, 0x0158
    3898:	f0 91 59 01 	lds	r31, 0x0159
    389c:	09 95       	icall
}
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	ff 91       	pop	r31
    38a4:	ef 91       	pop	r30
    38a6:	bf 91       	pop	r27
    38a8:	af 91       	pop	r26
    38aa:	9f 91       	pop	r25
    38ac:	8f 91       	pop	r24
    38ae:	7f 91       	pop	r23
    38b0:	6f 91       	pop	r22
    38b2:	5f 91       	pop	r21
    38b4:	4f 91       	pop	r20
    38b6:	3f 91       	pop	r19
    38b8:	2f 91       	pop	r18
    38ba:	0f 90       	pop	r0
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	0f 90       	pop	r0
    38c0:	1f 90       	pop	r1
    38c2:	18 95       	reti

000038c4 <__vector_19>:

/* Timer0 compare match ISR */
ISR(TIMER0_COMP_vect) {
    38c4:	1f 92       	push	r1
    38c6:	0f 92       	push	r0
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	0f 92       	push	r0
    38cc:	11 24       	eor	r1, r1
    38ce:	2f 93       	push	r18
    38d0:	3f 93       	push	r19
    38d2:	4f 93       	push	r20
    38d4:	5f 93       	push	r21
    38d6:	6f 93       	push	r22
    38d8:	7f 93       	push	r23
    38da:	8f 93       	push	r24
    38dc:	9f 93       	push	r25
    38de:	af 93       	push	r26
    38e0:	bf 93       	push	r27
    38e2:	ef 93       	push	r30
    38e4:	ff 93       	push	r31
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER0_callBackPtr!=NULL_PTR)
    38ee:	80 91 58 01 	lds	r24, 0x0158
    38f2:	90 91 59 01 	lds	r25, 0x0159
    38f6:	00 97       	sbiw	r24, 0x00	; 0
    38f8:	29 f0       	breq	.+10     	; 0x3904 <__vector_19+0x40>
	(*g_TIMER0_callBackPtr)();
    38fa:	e0 91 58 01 	lds	r30, 0x0158
    38fe:	f0 91 59 01 	lds	r31, 0x0159
    3902:	09 95       	icall
}
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	ff 91       	pop	r31
    390a:	ef 91       	pop	r30
    390c:	bf 91       	pop	r27
    390e:	af 91       	pop	r26
    3910:	9f 91       	pop	r25
    3912:	8f 91       	pop	r24
    3914:	7f 91       	pop	r23
    3916:	6f 91       	pop	r22
    3918:	5f 91       	pop	r21
    391a:	4f 91       	pop	r20
    391c:	3f 91       	pop	r19
    391e:	2f 91       	pop	r18
    3920:	0f 90       	pop	r0
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	0f 90       	pop	r0
    3926:	1f 90       	pop	r1
    3928:	18 95       	reti

0000392a <TIMER0_Init>:
/*******************************************************************************
 *                      Function Declarations                                  *
 *******************************************************************************/

void TIMER0_Init(TIMER0_Config* config){
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	00 d0       	rcall	.+0      	; 0x3930 <TIMER0_Init+0x6>
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = config->initialValue;
    3938:	a2 e5       	ldi	r26, 0x52	; 82
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e9 81       	ldd	r30, Y+1	; 0x01
    393e:	fa 81       	ldd	r31, Y+2	; 0x02
    3940:	84 81       	ldd	r24, Z+4	; 0x04
    3942:	8c 93       	st	X, r24
	TIMSK = config->interruptMask;
    3944:	a9 e5       	ldi	r26, 0x59	; 89
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	e9 81       	ldd	r30, Y+1	; 0x01
    394a:	fa 81       	ldd	r31, Y+2	; 0x02
    394c:	83 81       	ldd	r24, Z+3	; 0x03
    394e:	8c 93       	st	X, r24
	OCR0 = config->compareValue;
    3950:	ac e5       	ldi	r26, 0x5C	; 92
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	85 81       	ldd	r24, Z+5	; 0x05
    395a:	8c 93       	st	X, r24
	TCCR0 |= config->mode | config->compareMatchOutputMode | config->clockPrescalar;
    395c:	a3 e5       	ldi	r26, 0x53	; 83
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e3 e5       	ldi	r30, 0x53	; 83
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	20 81       	ld	r18, Z
    3966:	e9 81       	ldd	r30, Y+1	; 0x01
    3968:	fa 81       	ldd	r31, Y+2	; 0x02
    396a:	90 81       	ld	r25, Z
    396c:	e9 81       	ldd	r30, Y+1	; 0x01
    396e:	fa 81       	ldd	r31, Y+2	; 0x02
    3970:	81 81       	ldd	r24, Z+1	; 0x01
    3972:	98 2b       	or	r25, r24
    3974:	e9 81       	ldd	r30, Y+1	; 0x01
    3976:	fa 81       	ldd	r31, Y+2	; 0x02
    3978:	82 81       	ldd	r24, Z+2	; 0x02
    397a:	89 2b       	or	r24, r25
    397c:	82 2b       	or	r24, r18
    397e:	8c 93       	st	X, r24
}
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	08 95       	ret

0000398a <TIMER0_setValue>:

void TIMER0_setValue(uint8 newValue) {
    398a:	df 93       	push	r29
    398c:	cf 93       	push	r28
    398e:	0f 92       	push	r0
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = newValue;
    3996:	e2 e5       	ldi	r30, 0x52	; 82
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	80 83       	st	Z, r24
}
    399e:	0f 90       	pop	r0
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <TIMER0_clearValue>:

void TIMER0_clearValue(void) {
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    39ae:	e2 e5       	ldi	r30, 0x52	; 82
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	10 82       	st	Z, r1
}
    39b4:	cf 91       	pop	r28
    39b6:	df 91       	pop	r29
    39b8:	08 95       	ret

000039ba <TIMER0_setCallback>:

void TIMER0_setCallback(void (*functionPtr)(void)) {
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	00 d0       	rcall	.+0      	; 0x39c0 <TIMER0_setCallback+0x6>
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	9a 83       	std	Y+2, r25	; 0x02
    39c6:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER0_callBackPtr = functionPtr;
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
    39ca:	9a 81       	ldd	r25, Y+2	; 0x02
    39cc:	90 93 59 01 	sts	0x0159, r25
    39d0:	80 93 58 01 	sts	0x0158, r24
}
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	cf 91       	pop	r28
    39da:	df 91       	pop	r29
    39dc:	08 95       	ret

000039de <TIMER0_deinit>:

void TIMER0_deinit(void) {
    39de:	df 93       	push	r29
    39e0:	cf 93       	push	r28
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    39e6:	e2 e5       	ldi	r30, 0x52	; 82
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	10 82       	st	Z, r1
	TIMSK &= 0xFC;
    39ec:	a9 e5       	ldi	r26, 0x59	; 89
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e9 e5       	ldi	r30, 0x59	; 89
    39f2:	f0 e0       	ldi	r31, 0x00	; 0
    39f4:	80 81       	ld	r24, Z
    39f6:	8c 7f       	andi	r24, 0xFC	; 252
    39f8:	8c 93       	st	X, r24
	OCR0 = 0;
    39fa:	ec e5       	ldi	r30, 0x5C	; 92
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	10 82       	st	Z, r1
	TCCR0 = 0;
    3a00:	e3 e5       	ldi	r30, 0x53	; 83
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	10 82       	st	Z, r1
}
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	08 95       	ret

00003a0c <UART_init>:

#define BAUD_PRESCALE_U2X (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)      // 8 -> DOUBLE SPEED ASYNCHRONOUS
#define BAUD_PRESCALE_SYNCH (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)  // 16 -> ASYNCHRONOUS

void UART_init( UART_Config *config )
{
    3a0c:	df 93       	push	r29
    3a0e:	cf 93       	push	r28
    3a10:	00 d0       	rcall	.+0      	; 0x3a12 <UART_init+0x6>
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01
	/*  UCSRB REGISTER
	 *  RXC,TXC,UDR INTERRUPT ENABLE = 0,  T/R DATA BIT 8 = 0
	 */

	UCSRB|= (1<<RXEN) | (1<<TXEN) ;    // TRANSMITER ENABLE AND RECIEVER ENABLE
    3a1a:	aa e2       	ldi	r26, 0x2A	; 42
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	ea e2       	ldi	r30, 0x2A	; 42
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	88 61       	ori	r24, 0x18	; 24
    3a26:	8c 93       	st	X, r24
	/* UCSRC REGISTER
	 * USBS=0 -> 1 STOP BIT
	 * UPM0 =0 ,UPM1=1 -> EVEN PARITY BIT
	 */

	UCSRC|= (1<<URSEL); // SELECTING UCSRC BY SETTING 1 TO 'URSEL'
    3a28:	a0 e4       	ldi	r26, 0x40	; 64
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	e0 e4       	ldi	r30, 0x40	; 64
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	80 68       	ori	r24, 0x80	; 128
    3a34:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ0) | (1<<UCSZ1);   //CHARCTER SIZE 8 BITS IN FRAME TRANSFERED
    3a36:	a0 e4       	ldi	r26, 0x40	; 64
    3a38:	b0 e0       	ldi	r27, 0x00	; 0
    3a3a:	e0 e4       	ldi	r30, 0x40	; 64
    3a3c:	f0 e0       	ldi	r31, 0x00	; 0
    3a3e:	80 81       	ld	r24, Z
    3a40:	86 60       	ori	r24, 0x06	; 6
    3a42:	8c 93       	st	X, r24

	UCSRC|= ( (config->ParityBits) << 4); //CHOOSE PARITY BITS
    3a44:	a0 e4       	ldi	r26, 0x40	; 64
    3a46:	b0 e0       	ldi	r27, 0x00	; 0
    3a48:	e0 e4       	ldi	r30, 0x40	; 64
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	28 2f       	mov	r18, r24
    3a50:	e9 81       	ldd	r30, Y+1	; 0x01
    3a52:	fa 81       	ldd	r31, Y+2	; 0x02
    3a54:	81 81       	ldd	r24, Z+1	; 0x01
    3a56:	88 2f       	mov	r24, r24
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	82 95       	swap	r24
    3a5c:	92 95       	swap	r25
    3a5e:	90 7f       	andi	r25, 0xF0	; 240
    3a60:	98 27       	eor	r25, r24
    3a62:	80 7f       	andi	r24, 0xF0	; 240
    3a64:	98 27       	eor	r25, r24
    3a66:	82 2b       	or	r24, r18
    3a68:	8c 93       	st	X, r24



		if (config->mode) //1 IF SYNCH
    3a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a6e:	80 81       	ld	r24, Z
    3a70:	88 23       	and	r24, r24
    3a72:	29 f1       	breq	.+74     	; 0x3abe <UART_init+0xb2>
		{
			UCSRC |= ((config->mode) << 6);  // SYNCHRONOUS OPERATION
    3a74:	a0 e4       	ldi	r26, 0x40	; 64
    3a76:	b0 e0       	ldi	r27, 0x00	; 0
    3a78:	e0 e4       	ldi	r30, 0x40	; 64
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	28 2f       	mov	r18, r24
    3a80:	e9 81       	ldd	r30, Y+1	; 0x01
    3a82:	fa 81       	ldd	r31, Y+2	; 0x02
    3a84:	80 81       	ld	r24, Z
    3a86:	88 2f       	mov	r24, r24
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	00 24       	eor	r0, r0
    3a8c:	96 95       	lsr	r25
    3a8e:	87 95       	ror	r24
    3a90:	07 94       	ror	r0
    3a92:	96 95       	lsr	r25
    3a94:	87 95       	ror	r24
    3a96:	07 94       	ror	r0
    3a98:	98 2f       	mov	r25, r24
    3a9a:	80 2d       	mov	r24, r0
    3a9c:	82 2b       	or	r24, r18
    3a9e:	8c 93       	st	X, r24

			UCSRC |= (1<<UCPOL); // DATA TRANSMITTED ON FALLING EDGE , AND SAMPLED ON POSITIVE EDGE
    3aa0:	a0 e4       	ldi	r26, 0x40	; 64
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	e0 e4       	ldi	r30, 0x40	; 64
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	81 60       	ori	r24, 0x01	; 1
    3aac:	8c 93       	st	X, r24

			UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    3aae:	e0 e4       	ldi	r30, 0x40	; 64
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_SYNCH;
    3ab4:	e9 e2       	ldi	r30, 0x29	; 41
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	83 e3       	ldi	r24, 0x33	; 51
    3aba:	80 83       	st	Z, r24
    3abc:	25 c0       	rjmp	.+74     	; 0x3b08 <UART_init+0xfc>
		}

		else
		{							/* UMSEL =0 -> ASYNCHRONOUS OPERATION
		 	 	 	 	 	 	 	 * U2X =1 DOUBLE TRANSMISSION SPEED FOR ASYNCHRONOUS */
			UCSRC &= ~((config->mode) << 6);
    3abe:	a0 e4       	ldi	r26, 0x40	; 64
    3ac0:	b0 e0       	ldi	r27, 0x00	; 0
    3ac2:	e0 e4       	ldi	r30, 0x40	; 64
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	80 81       	ld	r24, Z
    3ac8:	28 2f       	mov	r18, r24
    3aca:	e9 81       	ldd	r30, Y+1	; 0x01
    3acc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ace:	80 81       	ld	r24, Z
    3ad0:	88 2f       	mov	r24, r24
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	00 24       	eor	r0, r0
    3ad6:	96 95       	lsr	r25
    3ad8:	87 95       	ror	r24
    3ada:	07 94       	ror	r0
    3adc:	96 95       	lsr	r25
    3ade:	87 95       	ror	r24
    3ae0:	07 94       	ror	r0
    3ae2:	98 2f       	mov	r25, r24
    3ae4:	80 2d       	mov	r24, r0
    3ae6:	80 95       	com	r24
    3ae8:	82 23       	and	r24, r18
    3aea:	8c 93       	st	X, r24
			UCSRA |= (1<<U2X);
    3aec:	ab e2       	ldi	r26, 0x2B	; 43
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	eb e2       	ldi	r30, 0x2B	; 43
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	82 60       	ori	r24, 0x02	; 2
    3af8:	8c 93       	st	X, r24
			UBRRH = (BAUD_PRESCALE_U2X>>8);
    3afa:	e0 e4       	ldi	r30, 0x40	; 64
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_U2X;
    3b00:	e9 e2       	ldi	r30, 0x29	; 41
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	87 e6       	ldi	r24, 0x67	; 103
    3b06:	80 83       	st	Z, r24
		}
}
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	0f 92       	push	r0
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    3b1e:	eb e2       	ldi	r30, 0x2B	; 43
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	80 81       	ld	r24, Z
    3b24:	88 2f       	mov	r24, r24
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	80 72       	andi	r24, 0x20	; 32
    3b2a:	90 70       	andi	r25, 0x00	; 0
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	b9 f3       	breq	.-18     	; 0x3b1e <UART_sendByte+0xc>
	UDR=data;
    3b30:	ec e2       	ldi	r30, 0x2C	; 44
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	89 81       	ldd	r24, Y+1	; 0x01
    3b36:	80 83       	st	Z, r24
}
    3b38:	0f 90       	pop	r0
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <UART_recieveByte>:

uint8 UART_recieveByte()
{
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    3b48:	eb e2       	ldi	r30, 0x2B	; 43
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	80 81       	ld	r24, Z
    3b4e:	88 23       	and	r24, r24
    3b50:	dc f7       	brge	.-10     	; 0x3b48 <UART_recieveByte+0x8>
	return UDR;
    3b52:	ec e2       	ldi	r30, 0x2C	; 44
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	80 81       	ld	r24, Z
}
    3b58:	cf 91       	pop	r28
    3b5a:	df 91       	pop	r29
    3b5c:	08 95       	ret

00003b5e <UART_sendString>:

void UART_sendString(const char *str)
{
    3b5e:	df 93       	push	r29
    3b60:	cf 93       	push	r28
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <UART_sendString+0x6>
    3b64:	0f 92       	push	r0
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	9b 83       	std	Y+3, r25	; 0x03
    3b6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b6e:	19 82       	std	Y+1, r1	; 0x01
    3b70:	0e c0       	rjmp	.+28     	; 0x3b8e <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	28 2f       	mov	r18, r24
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	e2 0f       	add	r30, r18
    3b80:	f3 1f       	adc	r31, r19
    3b82:	80 81       	ld	r24, Z
    3b84:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <UART_sendByte>
		i++;
    3b88:	89 81       	ldd	r24, Y+1	; 0x01
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	28 2f       	mov	r18, r24
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	9b 81       	ldd	r25, Y+3	; 0x03
    3b98:	fc 01       	movw	r30, r24
    3b9a:	e2 0f       	add	r30, r18
    3b9c:	f3 1f       	adc	r31, r19
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 23       	and	r24, r24
    3ba2:	39 f7       	brne	.-50     	; 0x3b72 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <UART_receiveString>:

void UART_receiveString(char *str)
{
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	df 93       	push	r29
    3bb6:	cf 93       	push	r28
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <UART_receiveString+0xa>
    3bba:	0f 92       	push	r0
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	9b 83       	std	Y+3, r25	; 0x03
    3bc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bc4:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	28 2f       	mov	r18, r24
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd0:	8c 01       	movw	r16, r24
    3bd2:	02 0f       	add	r16, r18
    3bd4:	13 1f       	adc	r17, r19
    3bd6:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    3bda:	f8 01       	movw	r30, r16
    3bdc:	80 83       	st	Z, r24
    3bde:	0f c0       	rjmp	.+30     	; 0x3bfe <UART_receiveString+0x4e>
	while(str[i] != '#')   // keep receiving until #
	{
		i++;
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	8f 5f       	subi	r24, 0xFF	; 255
    3be4:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	28 2f       	mov	r18, r24
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	8a 81       	ldd	r24, Y+2	; 0x02
    3bee:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf0:	8c 01       	movw	r16, r24
    3bf2:	02 0f       	add	r16, r18
    3bf4:	13 1f       	adc	r17, r19
    3bf6:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <UART_recieveByte>
    3bfa:	f8 01       	movw	r30, r16
    3bfc:	80 83       	st	Z, r24

void UART_receiveString(char *str)
{
	uint8 i = 0;
	str[i] = UART_recieveByte();
	while(str[i] != '#')   // keep receiving until #
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	28 2f       	mov	r18, r24
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	9b 81       	ldd	r25, Y+3	; 0x03
    3c08:	fc 01       	movw	r30, r24
    3c0a:	e2 0f       	add	r30, r18
    3c0c:	f3 1f       	adc	r31, r19
    3c0e:	80 81       	ld	r24, Z
    3c10:	83 32       	cpi	r24, 0x23	; 35
    3c12:	31 f7       	brne	.-52     	; 0x3be0 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i] = '\0';
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	28 2f       	mov	r18, r24
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1e:	fc 01       	movw	r30, r24
    3c20:	e2 0f       	add	r30, r18
    3c22:	f3 1f       	adc	r31, r19
    3c24:	10 82       	st	Z, r1
}
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	1f 91       	pop	r17
    3c32:	0f 91       	pop	r16
    3c34:	08 95       	ret

00003c36 <__prologue_saves__>:
    3c36:	2f 92       	push	r2
    3c38:	3f 92       	push	r3
    3c3a:	4f 92       	push	r4
    3c3c:	5f 92       	push	r5
    3c3e:	6f 92       	push	r6
    3c40:	7f 92       	push	r7
    3c42:	8f 92       	push	r8
    3c44:	9f 92       	push	r9
    3c46:	af 92       	push	r10
    3c48:	bf 92       	push	r11
    3c4a:	cf 92       	push	r12
    3c4c:	df 92       	push	r13
    3c4e:	ef 92       	push	r14
    3c50:	ff 92       	push	r15
    3c52:	0f 93       	push	r16
    3c54:	1f 93       	push	r17
    3c56:	cf 93       	push	r28
    3c58:	df 93       	push	r29
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
    3c5e:	ca 1b       	sub	r28, r26
    3c60:	db 0b       	sbc	r29, r27
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	09 94       	ijmp

00003c6e <__epilogue_restores__>:
    3c6e:	2a 88       	ldd	r2, Y+18	; 0x12
    3c70:	39 88       	ldd	r3, Y+17	; 0x11
    3c72:	48 88       	ldd	r4, Y+16	; 0x10
    3c74:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c76:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c78:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c80:	b9 84       	ldd	r11, Y+9	; 0x09
    3c82:	c8 84       	ldd	r12, Y+8	; 0x08
    3c84:	df 80       	ldd	r13, Y+7	; 0x07
    3c86:	ee 80       	ldd	r14, Y+6	; 0x06
    3c88:	fd 80       	ldd	r15, Y+5	; 0x05
    3c8a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c8c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c8e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c90:	b9 81       	ldd	r27, Y+1	; 0x01
    3c92:	ce 0f       	add	r28, r30
    3c94:	d1 1d       	adc	r29, r1
    3c96:	0f b6       	in	r0, 0x3f	; 63
    3c98:	f8 94       	cli
    3c9a:	de bf       	out	0x3e, r29	; 62
    3c9c:	0f be       	out	0x3f, r0	; 63
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	ed 01       	movw	r28, r26
    3ca2:	08 95       	ret

00003ca4 <itoa>:
    3ca4:	fb 01       	movw	r30, r22
    3ca6:	9f 01       	movw	r18, r30
    3ca8:	e8 94       	clt
    3caa:	42 30       	cpi	r20, 0x02	; 2
    3cac:	c4 f0       	brlt	.+48     	; 0x3cde <itoa+0x3a>
    3cae:	45 32       	cpi	r20, 0x25	; 37
    3cb0:	b4 f4       	brge	.+44     	; 0x3cde <itoa+0x3a>
    3cb2:	4a 30       	cpi	r20, 0x0A	; 10
    3cb4:	29 f4       	brne	.+10     	; 0x3cc0 <itoa+0x1c>
    3cb6:	97 fb       	bst	r25, 7
    3cb8:	1e f4       	brtc	.+6      	; 0x3cc0 <itoa+0x1c>
    3cba:	90 95       	com	r25
    3cbc:	81 95       	neg	r24
    3cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc0:	64 2f       	mov	r22, r20
    3cc2:	77 27       	eor	r23, r23
    3cc4:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__udivmodhi4>
    3cc8:	80 5d       	subi	r24, 0xD0	; 208
    3cca:	8a 33       	cpi	r24, 0x3A	; 58
    3ccc:	0c f0       	brlt	.+2      	; 0x3cd0 <itoa+0x2c>
    3cce:	89 5d       	subi	r24, 0xD9	; 217
    3cd0:	81 93       	st	Z+, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	00 97       	sbiw	r24, 0x00	; 0
    3cd6:	a1 f7       	brne	.-24     	; 0x3cc0 <itoa+0x1c>
    3cd8:	16 f4       	brtc	.+4      	; 0x3cde <itoa+0x3a>
    3cda:	5d e2       	ldi	r21, 0x2D	; 45
    3cdc:	51 93       	st	Z+, r21
    3cde:	10 82       	st	Z, r1
    3ce0:	c9 01       	movw	r24, r18
    3ce2:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <strrev>

00003ce6 <strrev>:
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	fc 01       	movw	r30, r24
    3cea:	67 2f       	mov	r22, r23
    3cec:	71 91       	ld	r23, Z+
    3cee:	77 23       	and	r23, r23
    3cf0:	e1 f7       	brne	.-8      	; 0x3cea <strrev+0x4>
    3cf2:	32 97       	sbiw	r30, 0x02	; 2
    3cf4:	04 c0       	rjmp	.+8      	; 0x3cfe <strrev+0x18>
    3cf6:	7c 91       	ld	r23, X
    3cf8:	6d 93       	st	X+, r22
    3cfa:	70 83       	st	Z, r23
    3cfc:	62 91       	ld	r22, -Z
    3cfe:	ae 17       	cp	r26, r30
    3d00:	bf 07       	cpc	r27, r31
    3d02:	c8 f3       	brcs	.-14     	; 0x3cf6 <strrev+0x10>
    3d04:	08 95       	ret

00003d06 <__udivmodhi4>:
    3d06:	aa 1b       	sub	r26, r26
    3d08:	bb 1b       	sub	r27, r27
    3d0a:	51 e1       	ldi	r21, 0x11	; 17
    3d0c:	07 c0       	rjmp	.+14     	; 0x3d1c <__udivmodhi4_ep>

00003d0e <__udivmodhi4_loop>:
    3d0e:	aa 1f       	adc	r26, r26
    3d10:	bb 1f       	adc	r27, r27
    3d12:	a6 17       	cp	r26, r22
    3d14:	b7 07       	cpc	r27, r23
    3d16:	10 f0       	brcs	.+4      	; 0x3d1c <__udivmodhi4_ep>
    3d18:	a6 1b       	sub	r26, r22
    3d1a:	b7 0b       	sbc	r27, r23

00003d1c <__udivmodhi4_ep>:
    3d1c:	88 1f       	adc	r24, r24
    3d1e:	99 1f       	adc	r25, r25
    3d20:	5a 95       	dec	r21
    3d22:	a9 f7       	brne	.-22     	; 0x3d0e <__udivmodhi4_loop>
    3d24:	80 95       	com	r24
    3d26:	90 95       	com	r25
    3d28:	bc 01       	movw	r22, r24
    3d2a:	cd 01       	movw	r24, r26
    3d2c:	08 95       	ret

00003d2e <_exit>:
    3d2e:	f8 94       	cli

00003d30 <__stop_program>:
    3d30:	ff cf       	rjmp	.-2      	; 0x3d30 <__stop_program>
