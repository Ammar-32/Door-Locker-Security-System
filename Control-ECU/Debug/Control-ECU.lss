
Control-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000029f8  00002a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800074  00800074  00002aa0  2**0
                  ALLOC
  3 .stab         00002964  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013da  00000000  00000000  00005404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000691e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a370  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 db 05 	call	0xbb6	; 0xbb6 <main>
      8a:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 14 	jmp	0x29be	; 0x29be <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ef 14 	jmp	0x29de	; 0x29de <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzer_init>:
#include "buzzer.h"
#include "gpio.h"


void buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);									//PD6 AND PD7 OUTPUT PINS FOR THE BUZZER
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	66 e0       	ldi	r22, 0x06	; 6
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);											// BY DEFAULT OUTPUT PINS ARE 0
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	67 e0       	ldi	r22, 0x07	; 7
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>


}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <buzzer_start>:


void buzzer_start(void)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62


	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	66 e0       	ldi	r22, 0x06	; 6
     b88:	41 e0       	ldi	r20, 0x01	; 1
     b8a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	67 e0       	ldi	r22, 0x07	; 7
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>

}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <buzzer_stop>:


void buzzer_stop(void)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	66 e0       	ldi	r22, 0x06	; 6
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <main>:
UART_Config UConfig = {ASYNCH,ENABLED_EVEN,BIT_1};// Asynchronous with even parity and only one stop bit
TIMER0_Config TConfig = {OVERFLOW, 0, F_CPU_1024, OVERFLOW_INT_ENABLE, 3, 0};

// Main
int main(void)
{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	ce 57       	subi	r28, 0x7E	; 126
     bc4:	d0 40       	sbci	r29, 0x00	; 0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     bd0:	af e5       	ldi	r26, 0x5F	; 95
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ef e5       	ldi	r30, 0x5F	; 95
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	8c 93       	st	X, r24
	uint8 password[4], confirmPassword[4];
	uint8 isVerified, command;
	DCMOTOR_init();
     bde:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DCMOTOR_init>
	buzzer_init();
     be2:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_init>
	TIMER0_setCallback(timerHandler);
     be6:	84 e3       	ldi	r24, 0x34	; 52
     be8:	9c e0       	ldi	r25, 0x0C	; 12
     bea:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <TIMER0_setCallback>
	UART_init(&UConfig);
     bee:	88 e6       	ldi	r24, 0x68	; 104
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 ae 13 	call	0x275c	; 0x275c <UART_init>
	do{
		recievePassword(password);
     bf6:	ce 01       	movw	r24, r28
     bf8:	8d 58       	subi	r24, 0x8D	; 141
     bfa:	9f 4f       	sbci	r25, 0xFF	; 255
     bfc:	0e 94 24 0b 	call	0x1648	; 0x1648 <recievePassword>

		recievePassword(confirmPassword);
     c00:	ce 01       	movw	r24, r28
     c02:	89 58       	subi	r24, 0x89	; 137
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	0e 94 24 0b 	call	0x1648	; 0x1648 <recievePassword>

		isVerified = verifyPassword(password, confirmPassword);
     c0a:	ce 01       	movw	r24, r28
     c0c:	8d 58       	subi	r24, 0x8D	; 141
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	9e 01       	movw	r18, r28
     c12:	29 58       	subi	r18, 0x89	; 137
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
     c16:	b9 01       	movw	r22, r18
     c18:	0e 94 c3 0b 	call	0x1786	; 0x1786 <verifyPassword>
     c1c:	fe 01       	movw	r30, r28
     c1e:	ee 58       	subi	r30, 0x8E	; 142
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	80 83       	st	Z, r24
		UART_sendByte(isVerified);
     c24:	fe 01       	movw	r30, r28
     c26:	ee 58       	subi	r30, 0x8E	; 142
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	80 81       	ld	r24, Z
     c2c:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
     c30:	fe 01       	movw	r30, r28
     c32:	e3 59       	subi	r30, 0x93	; 147
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a2 e0       	ldi	r26, 0x02	; 2
     c3c:	b3 e4       	ldi	r27, 0x43	; 67
     c3e:	80 83       	st	Z, r24
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	a2 83       	std	Z+2, r26	; 0x02
     c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c46:	8e 01       	movw	r16, r28
     c48:	07 59       	subi	r16, 0x97	; 151
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	fe 01       	movw	r30, r28
     c4e:	e3 59       	subi	r30, 0x93	; 147
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	60 81       	ld	r22, Z
     c54:	71 81       	ldd	r23, Z+1	; 0x01
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	4a ef       	ldi	r20, 0xFA	; 250
     c60:	54 e4       	ldi	r21, 0x44	; 68
     c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	f8 01       	movw	r30, r16
     c6c:	80 83       	st	Z, r24
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	a2 83       	std	Z+2, r26	; 0x02
     c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c74:	fe 01       	movw	r30, r28
     c76:	e7 59       	subi	r30, 0x97	; 151
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e8       	ldi	r20, 0x80	; 128
     c88:	5f e3       	ldi	r21, 0x3F	; 63
     c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c8e:	88 23       	and	r24, r24
     c90:	44 f4       	brge	.+16     	; 0xca2 <main+0xec>
		__ticks = 1;
     c92:	fe 01       	movw	r30, r28
     c94:	e9 59       	subi	r30, 0x99	; 153
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
     ca0:	64 c0       	rjmp	.+200    	; 0xd6a <main+0x1b4>
	else if (__tmp > 65535)
     ca2:	fe 01       	movw	r30, r28
     ca4:	e7 59       	subi	r30, 0x97	; 151
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	3f ef       	ldi	r19, 0xFF	; 255
     cb4:	4f e7       	ldi	r20, 0x7F	; 127
     cb6:	57 e4       	ldi	r21, 0x47	; 71
     cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	0c f0       	brlt	.+2      	; 0xcc2 <main+0x10c>
     cc0:	43 c0       	rjmp	.+134    	; 0xd48 <main+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc2:	fe 01       	movw	r30, r28
     cc4:	e3 59       	subi	r30, 0x93	; 147
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	60 81       	ld	r22, Z
     cca:	71 81       	ldd	r23, Z+1	; 0x01
     ccc:	82 81       	ldd	r24, Z+2	; 0x02
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8e 01       	movw	r16, r28
     ce2:	09 59       	subi	r16, 0x99	; 153
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	f8 01       	movw	r30, r16
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	80 83       	st	Z, r24
     cf8:	1f c0       	rjmp	.+62     	; 0xd38 <main+0x182>
     cfa:	fe 01       	movw	r30, r28
     cfc:	eb 59       	subi	r30, 0x9B	; 155
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	88 ec       	ldi	r24, 0xC8	; 200
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d08:	fe 01       	movw	r30, r28
     d0a:	eb 59       	subi	r30, 0x9B	; 155
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	f1 f7       	brne	.-4      	; 0xd12 <main+0x15c>
     d16:	fe 01       	movw	r30, r28
     d18:	eb 59       	subi	r30, 0x9B	; 155
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d20:	de 01       	movw	r26, r28
     d22:	a9 59       	subi	r26, 0x99	; 153
     d24:	bf 4f       	sbci	r27, 0xFF	; 255
     d26:	fe 01       	movw	r30, r28
     d28:	e9 59       	subi	r30, 0x99	; 153
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	fe 01       	movw	r30, r28
     d3a:	e9 59       	subi	r30, 0x99	; 153
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	d1 f6       	brne	.-76     	; 0xcfa <main+0x144>
     d46:	28 c0       	rjmp	.+80     	; 0xd98 <main+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d48:	8e 01       	movw	r16, r28
     d4a:	09 59       	subi	r16, 0x99	; 153
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	fe 01       	movw	r30, r28
     d50:	e7 59       	subi	r30, 0x97	; 151
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	f8 01       	movw	r30, r16
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 83       	st	Z, r24
     d6a:	de 01       	movw	r26, r28
     d6c:	ad 59       	subi	r26, 0x9D	; 157
     d6e:	bf 4f       	sbci	r27, 0xFF	; 255
     d70:	fe 01       	movw	r30, r28
     d72:	e9 59       	subi	r30, 0x99	; 153
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	11 96       	adiw	r26, 0x01	; 1
     d7c:	9c 93       	st	X, r25
     d7e:	8e 93       	st	-X, r24
     d80:	fe 01       	movw	r30, r28
     d82:	ed 59       	subi	r30, 0x9D	; 157
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0x1d4>
     d8e:	fe 01       	movw	r30, r28
     d90:	ed 59       	subi	r30, 0x9D	; 157
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24

		_delay_ms(DELAY_UART);
	}while(isVerified == 0);
     d98:	fe 01       	movw	r30, r28
     d9a:	ee 58       	subi	r30, 0x8E	; 142
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	80 81       	ld	r24, Z
     da0:	88 23       	and	r24, r24
     da2:	09 f4       	brne	.+2      	; 0xda6 <main+0x1f0>
     da4:	28 cf       	rjmp	.-432    	; 0xbf6 <main+0x40>

	// Store pw in eeprom
	storePasswordEEPROM(password);
     da6:	ce 01       	movw	r24, r28
     da8:	8d 58       	subi	r24, 0x8D	; 141
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <storePasswordEEPROM>


	while(1)
	{
		uint8 passwordEEPROM[4];
		readPasswordEEPROM(passwordEEPROM); // read pw and store it in variable
     db0:	ce 01       	movw	r24, r28
     db2:	85 58       	subi	r24, 0x85	; 133
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <readPasswordEEPROM>
		command = UART_recieveByte();
     dba:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
     dbe:	fe 01       	movw	r30, r28
     dc0:	ef 58       	subi	r30, 0x8F	; 143
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	80 83       	st	Z, r24
     dc6:	fe 01       	movw	r30, r28
     dc8:	e1 5a       	subi	r30, 0xA1	; 161
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a2 e0       	ldi	r26, 0x02	; 2
     dd2:	b3 e4       	ldi	r27, 0x43	; 67
     dd4:	80 83       	st	Z, r24
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	a2 83       	std	Z+2, r26	; 0x02
     dda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ddc:	8e 01       	movw	r16, r28
     dde:	05 5a       	subi	r16, 0xA5	; 165
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	fe 01       	movw	r30, r28
     de4:	e1 5a       	subi	r30, 0xA1	; 161
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	82 81       	ldd	r24, Z+2	; 0x02
     dee:	93 81       	ldd	r25, Z+3	; 0x03
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	4a ef       	ldi	r20, 0xFA	; 250
     df6:	54 e4       	ldi	r21, 0x44	; 68
     df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	f8 01       	movw	r30, r16
     e02:	80 83       	st	Z, r24
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	a2 83       	std	Z+2, r26	; 0x02
     e08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e0a:	fe 01       	movw	r30, r28
     e0c:	e5 5a       	subi	r30, 0xA5	; 165
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e24:	88 23       	and	r24, r24
     e26:	44 f4       	brge	.+16     	; 0xe38 <main+0x282>
		__ticks = 1;
     e28:	fe 01       	movw	r30, r28
     e2a:	e7 5a       	subi	r30, 0xA7	; 167
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	91 83       	std	Z+1, r25	; 0x01
     e34:	80 83       	st	Z, r24
     e36:	64 c0       	rjmp	.+200    	; 0xf00 <main+0x34a>
	else if (__tmp > 65535)
     e38:	fe 01       	movw	r30, r28
     e3a:	e5 5a       	subi	r30, 0xA5	; 165
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	0c f0       	brlt	.+2      	; 0xe58 <main+0x2a2>
     e56:	43 c0       	rjmp	.+134    	; 0xede <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e58:	fe 01       	movw	r30, r28
     e5a:	e1 5a       	subi	r30, 0xA1	; 161
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e2       	ldi	r20, 0x20	; 32
     e6c:	51 e4       	ldi	r21, 0x41	; 65
     e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	8e 01       	movw	r16, r28
     e78:	07 5a       	subi	r16, 0xA7	; 167
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	f8 01       	movw	r30, r16
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
     e8e:	1f c0       	rjmp	.+62     	; 0xece <main+0x318>
     e90:	fe 01       	movw	r30, r28
     e92:	e9 5a       	subi	r30, 0xA9	; 169
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	88 ec       	ldi	r24, 0xC8	; 200
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	fe 01       	movw	r30, r28
     ea0:	e9 5a       	subi	r30, 0xA9	; 169
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	80 81       	ld	r24, Z
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <main+0x2f2>
     eac:	fe 01       	movw	r30, r28
     eae:	e9 5a       	subi	r30, 0xA9	; 169
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb6:	de 01       	movw	r26, r28
     eb8:	a7 5a       	subi	r26, 0xA7	; 167
     eba:	bf 4f       	sbci	r27, 0xFF	; 255
     ebc:	fe 01       	movw	r30, r28
     ebe:	e7 5a       	subi	r30, 0xA7	; 167
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	11 96       	adiw	r26, 0x01	; 1
     eca:	9c 93       	st	X, r25
     ecc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ece:	fe 01       	movw	r30, r28
     ed0:	e7 5a       	subi	r30, 0xA7	; 167
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	80 81       	ld	r24, Z
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	d1 f6       	brne	.-76     	; 0xe90 <main+0x2da>
     edc:	28 c0       	rjmp	.+80     	; 0xf2e <main+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ede:	8e 01       	movw	r16, r28
     ee0:	07 5a       	subi	r16, 0xA7	; 167
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
     ee4:	fe 01       	movw	r30, r28
     ee6:	e5 5a       	subi	r30, 0xA5	; 165
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	f8 01       	movw	r30, r16
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	80 83       	st	Z, r24
     f00:	de 01       	movw	r26, r28
     f02:	ab 5a       	subi	r26, 0xAB	; 171
     f04:	bf 4f       	sbci	r27, 0xFF	; 255
     f06:	fe 01       	movw	r30, r28
     f08:	e7 5a       	subi	r30, 0xA7	; 167
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	9c 93       	st	X, r25
     f14:	8e 93       	st	-X, r24
     f16:	fe 01       	movw	r30, r28
     f18:	eb 5a       	subi	r30, 0xAB	; 171
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	91 81       	ldd	r25, Z+1	; 0x01
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <main+0x36a>
     f24:	fe 01       	movw	r30, r28
     f26:	eb 5a       	subi	r30, 0xAB	; 171
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	80 83       	st	Z, r24
		_delay_ms(DELAY_UART);
		if(command == '+'){
     f2e:	fe 01       	movw	r30, r28
     f30:	ef 58       	subi	r30, 0x8F	; 143
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	8b 32       	cpi	r24, 0x2B	; 43
     f38:	09 f0       	breq	.+2      	; 0xf3c <main+0x386>
     f3a:	d2 c1       	rjmp	.+932    	; 0x12e0 <main+0x72a>
			recievePassword(password);
     f3c:	ce 01       	movw	r24, r28
     f3e:	8d 58       	subi	r24, 0x8D	; 141
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	0e 94 24 0b 	call	0x1648	; 0x1648 <recievePassword>

			if(verifyPassword(password, passwordEEPROM)){
     f46:	ce 01       	movw	r24, r28
     f48:	8d 58       	subi	r24, 0x8D	; 141
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	9e 01       	movw	r18, r28
     f4e:	25 58       	subi	r18, 0x85	; 133
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	b9 01       	movw	r22, r18
     f54:	0e 94 c3 0b 	call	0x1786	; 0x1786 <verifyPassword>
     f58:	88 23       	and	r24, r24
     f5a:	09 f4       	brne	.+2      	; 0xf5e <main+0x3a8>
     f5c:	bb c0       	rjmp	.+374    	; 0x10d4 <main+0x51e>
				falsePasswordsCounter = 0;
     f5e:	10 92 76 00 	sts	0x0076, r1
				UART_sendByte(1);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
     f68:	fe 01       	movw	r30, r28
     f6a:	ef 5a       	subi	r30, 0xAF	; 175
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a2 e0       	ldi	r26, 0x02	; 2
     f74:	b3 e4       	ldi	r27, 0x43	; 67
     f76:	80 83       	st	Z, r24
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	a2 83       	std	Z+2, r26	; 0x02
     f7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	8e 01       	movw	r16, r28
     f80:	03 5b       	subi	r16, 0xB3	; 179
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	fe 01       	movw	r30, r28
     f86:	ef 5a       	subi	r30, 0xAF	; 175
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	60 81       	ld	r22, Z
     f8c:	71 81       	ldd	r23, Z+1	; 0x01
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a ef       	ldi	r20, 0xFA	; 250
     f98:	54 e4       	ldi	r21, 0x44	; 68
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	f8 01       	movw	r30, r16
     fa4:	80 83       	st	Z, r24
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	a2 83       	std	Z+2, r26	; 0x02
     faa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fac:	fe 01       	movw	r30, r28
     fae:	e3 5b       	subi	r30, 0xB3	; 179
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	60 81       	ld	r22, Z
     fb4:	71 81       	ldd	r23, Z+1	; 0x01
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	93 81       	ldd	r25, Z+3	; 0x03
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	44 f4       	brge	.+16     	; 0xfda <main+0x424>
		__ticks = 1;
     fca:	fe 01       	movw	r30, r28
     fcc:	e5 5b       	subi	r30, 0xB5	; 181
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	64 c0       	rjmp	.+200    	; 0x10a2 <main+0x4ec>
	else if (__tmp > 65535)
     fda:	fe 01       	movw	r30, r28
     fdc:	e3 5b       	subi	r30, 0xB3	; 179
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	4f e7       	ldi	r20, 0x7F	; 127
     fee:	57 e4       	ldi	r21, 0x47	; 71
     ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff4:	18 16       	cp	r1, r24
     ff6:	0c f0       	brlt	.+2      	; 0xffa <main+0x444>
     ff8:	43 c0       	rjmp	.+134    	; 0x1080 <main+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	fe 01       	movw	r30, r28
     ffc:	ef 5a       	subi	r30, 0xAF	; 175
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	93 81       	ldd	r25, Z+3	; 0x03
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e2       	ldi	r20, 0x20	; 32
    100e:	51 e4       	ldi	r21, 0x41	; 65
    1010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	8e 01       	movw	r16, r28
    101a:	05 5b       	subi	r16, 0xB5	; 181
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	f8 01       	movw	r30, r16
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	80 83       	st	Z, r24
    1030:	1f c0       	rjmp	.+62     	; 0x1070 <main+0x4ba>
    1032:	fe 01       	movw	r30, r28
    1034:	e7 5b       	subi	r30, 0xB7	; 183
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	80 83       	st	Z, r24
    1040:	fe 01       	movw	r30, r28
    1042:	e7 5b       	subi	r30, 0xB7	; 183
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <main+0x494>
    104e:	fe 01       	movw	r30, r28
    1050:	e7 5b       	subi	r30, 0xB7	; 183
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1058:	de 01       	movw	r26, r28
    105a:	a5 5b       	subi	r26, 0xB5	; 181
    105c:	bf 4f       	sbci	r27, 0xFF	; 255
    105e:	fe 01       	movw	r30, r28
    1060:	e5 5b       	subi	r30, 0xB5	; 181
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	9c 93       	st	X, r25
    106e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1070:	fe 01       	movw	r30, r28
    1072:	e5 5b       	subi	r30, 0xB5	; 181
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	d1 f6       	brne	.-76     	; 0x1032 <main+0x47c>
    107e:	27 c0       	rjmp	.+78     	; 0x10ce <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	8e 01       	movw	r16, r28
    1082:	05 5b       	subi	r16, 0xB5	; 181
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	fe 01       	movw	r30, r28
    1088:	e3 5b       	subi	r30, 0xB3	; 179
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	f8 01       	movw	r30, r16
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    10a2:	de 01       	movw	r26, r28
    10a4:	a9 5b       	subi	r26, 0xB9	; 185
    10a6:	bf 4f       	sbci	r27, 0xFF	; 255
    10a8:	fe 01       	movw	r30, r28
    10aa:	e5 5b       	subi	r30, 0xB5	; 181
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	8d 93       	st	X+, r24
    10b4:	9c 93       	st	X, r25
    10b6:	fe 01       	movw	r30, r28
    10b8:	e9 5b       	subi	r30, 0xB9	; 185
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <main+0x50a>
    10c4:	fe 01       	movw	r30, r28
    10c6:	e9 5b       	subi	r30, 0xB9	; 185
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
				_delay_ms(DELAY_UART);
				openDoor();
    10ce:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <openDoor>
    10d2:	6e ce       	rjmp	.-804    	; 0xdb0 <main+0x1fa>
			}else{
				UART_sendByte(0);
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
    10da:	fe 01       	movw	r30, r28
    10dc:	ed 5b       	subi	r30, 0xBD	; 189
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a2 e0       	ldi	r26, 0x02	; 2
    10e6:	b3 e4       	ldi	r27, 0x43	; 67
    10e8:	80 83       	st	Z, r24
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	a2 83       	std	Z+2, r26	; 0x02
    10ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	8e 01       	movw	r16, r28
    10f2:	01 5c       	subi	r16, 0xC1	; 193
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	fe 01       	movw	r30, r28
    10f8:	ed 5b       	subi	r30, 0xBD	; 189
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a ef       	ldi	r20, 0xFA	; 250
    110a:	54 e4       	ldi	r21, 0x44	; 68
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	f8 01       	movw	r30, r16
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    111e:	fe 01       	movw	r30, r28
    1120:	ff 96       	adiw	r30, 0x3f	; 63
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1136:	88 23       	and	r24, r24
    1138:	2c f4       	brge	.+10     	; 0x1144 <main+0x58e>
		__ticks = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	9e af       	std	Y+62, r25	; 0x3e
    1140:	8d af       	std	Y+61, r24	; 0x3d
    1142:	46 c0       	rjmp	.+140    	; 0x11d0 <main+0x61a>
	else if (__tmp > 65535)
    1144:	fe 01       	movw	r30, r28
    1146:	ff 96       	adiw	r30, 0x3f	; 63
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	3f ef       	ldi	r19, 0xFF	; 255
    1154:	4f e7       	ldi	r20, 0x7F	; 127
    1156:	57 e4       	ldi	r21, 0x47	; 71
    1158:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115c:	18 16       	cp	r1, r24
    115e:	64 f5       	brge	.+88     	; 0x11b8 <main+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1160:	fe 01       	movw	r30, r28
    1162:	ed 5b       	subi	r30, 0xBD	; 189
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e af       	std	Y+62, r25	; 0x3e
    118c:	8d af       	std	Y+61, r24	; 0x3d
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <main+0x5f8>
    1190:	88 ec       	ldi	r24, 0xC8	; 200
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c af       	std	Y+60, r25	; 0x3c
    1196:	8b af       	std	Y+59, r24	; 0x3b
    1198:	8b ad       	ldd	r24, Y+59	; 0x3b
    119a:	9c ad       	ldd	r25, Y+60	; 0x3c
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <main+0x5e6>
    11a0:	9c af       	std	Y+60, r25	; 0x3c
    11a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    11a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9e af       	std	Y+62, r25	; 0x3e
    11ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    11b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <main+0x5da>
    11b6:	16 c0       	rjmp	.+44     	; 0x11e4 <main+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	fe 01       	movw	r30, r28
    11ba:	ff 96       	adiw	r30, 0x3f	; 63
    11bc:	60 81       	ld	r22, Z
    11be:	71 81       	ldd	r23, Z+1	; 0x01
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9e af       	std	Y+62, r25	; 0x3e
    11ce:	8d af       	std	Y+61, r24	; 0x3d
    11d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11d4:	9a af       	std	Y+58, r25	; 0x3a
    11d6:	89 af       	std	Y+57, r24	; 0x39
    11d8:	89 ad       	ldd	r24, Y+57	; 0x39
    11da:	9a ad       	ldd	r25, Y+58	; 0x3a
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <main+0x626>
    11e0:	9a af       	std	Y+58, r25	; 0x3a
    11e2:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(DELAY_UART);
				falsePasswordsCounter++;
    11e4:	80 91 76 00 	lds	r24, 0x0076
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswordsCounter);
    11ee:	80 91 76 00 	lds	r24, 0x0076
    11f2:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a2 e0       	ldi	r26, 0x02	; 2
    11fc:	b3 e4       	ldi	r27, 0x43	; 67
    11fe:	8d ab       	std	Y+53, r24	; 0x35
    1200:	9e ab       	std	Y+54, r25	; 0x36
    1202:	af ab       	std	Y+55, r26	; 0x37
    1204:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	6d a9       	ldd	r22, Y+53	; 0x35
    1208:	7e a9       	ldd	r23, Y+54	; 0x36
    120a:	8f a9       	ldd	r24, Y+55	; 0x37
    120c:	98 ad       	ldd	r25, Y+56	; 0x38
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	4a ef       	ldi	r20, 0xFA	; 250
    1214:	54 e4       	ldi	r21, 0x44	; 68
    1216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	89 ab       	std	Y+49, r24	; 0x31
    1220:	9a ab       	std	Y+50, r25	; 0x32
    1222:	ab ab       	std	Y+51, r26	; 0x33
    1224:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1226:	69 a9       	ldd	r22, Y+49	; 0x31
    1228:	7a a9       	ldd	r23, Y+50	; 0x32
    122a:	8b a9       	ldd	r24, Y+51	; 0x33
    122c:	9c a9       	ldd	r25, Y+52	; 0x34
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <main+0x692>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	98 ab       	std	Y+48, r25	; 0x30
    1244:	8f a7       	std	Y+47, r24	; 0x2f
    1246:	3f c0       	rjmp	.+126    	; 0x12c6 <main+0x710>
	else if (__tmp > 65535)
    1248:	69 a9       	ldd	r22, Y+49	; 0x31
    124a:	7a a9       	ldd	r23, Y+50	; 0x32
    124c:	8b a9       	ldd	r24, Y+51	; 0x33
    124e:	9c a9       	ldd	r25, Y+52	; 0x34
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	4f e7       	ldi	r20, 0x7F	; 127
    1256:	57 e4       	ldi	r21, 0x47	; 71
    1258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    125c:	18 16       	cp	r1, r24
    125e:	4c f5       	brge	.+82     	; 0x12b2 <main+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1260:	6d a9       	ldd	r22, Y+53	; 0x35
    1262:	7e a9       	ldd	r23, Y+54	; 0x36
    1264:	8f a9       	ldd	r24, Y+55	; 0x37
    1266:	98 ad       	ldd	r25, Y+56	; 0x38
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	98 ab       	std	Y+48, r25	; 0x30
    1286:	8f a7       	std	Y+47, r24	; 0x2f
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <main+0x6f2>
    128a:	88 ec       	ldi	r24, 0xC8	; 200
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9e a7       	std	Y+46, r25	; 0x2e
    1290:	8d a7       	std	Y+45, r24	; 0x2d
    1292:	8d a5       	ldd	r24, Y+45	; 0x2d
    1294:	9e a5       	ldd	r25, Y+46	; 0x2e
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <main+0x6e0>
    129a:	9e a7       	std	Y+46, r25	; 0x2e
    129c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129e:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a0:	98 a9       	ldd	r25, Y+48	; 0x30
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	98 ab       	std	Y+48, r25	; 0x30
    12a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12aa:	98 a9       	ldd	r25, Y+48	; 0x30
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	69 f7       	brne	.-38     	; 0x128a <main+0x6d4>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <main+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b2:	69 a9       	ldd	r22, Y+49	; 0x31
    12b4:	7a a9       	ldd	r23, Y+50	; 0x32
    12b6:	8b a9       	ldd	r24, Y+51	; 0x33
    12b8:	9c a9       	ldd	r25, Y+52	; 0x34
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	98 ab       	std	Y+48, r25	; 0x30
    12c4:	8f a7       	std	Y+47, r24	; 0x2f
    12c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12c8:	98 a9       	ldd	r25, Y+48	; 0x30
    12ca:	9c a7       	std	Y+44, r25	; 0x2c
    12cc:	8b a7       	std	Y+43, r24	; 0x2b
    12ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <main+0x71c>
    12d6:	9c a7       	std	Y+44, r25	; 0x2c
    12d8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(DELAY_UART);
				checkFalsePasswords();
    12da:	0e 94 47 0c 	call	0x188e	; 0x188e <checkFalsePasswords>
    12de:	68 cd       	rjmp	.-1328   	; 0xdb0 <main+0x1fa>

			}
		}else if(command == '-'){
    12e0:	fe 01       	movw	r30, r28
    12e2:	ef 58       	subi	r30, 0x8F	; 143
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	8d 32       	cpi	r24, 0x2D	; 45
    12ea:	09 f0       	breq	.+2      	; 0x12ee <main+0x738>
    12ec:	61 cd       	rjmp	.-1342   	; 0xdb0 <main+0x1fa>
			recievePassword(password);
    12ee:	ce 01       	movw	r24, r28
    12f0:	8d 58       	subi	r24, 0x8D	; 141
    12f2:	9f 4f       	sbci	r25, 0xFF	; 255
    12f4:	0e 94 24 0b 	call	0x1648	; 0x1648 <recievePassword>


			isVerified = verifyPassword(password, passwordEEPROM);
    12f8:	ce 01       	movw	r24, r28
    12fa:	8d 58       	subi	r24, 0x8D	; 141
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	9e 01       	movw	r18, r28
    1300:	25 58       	subi	r18, 0x85	; 133
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	b9 01       	movw	r22, r18
    1306:	0e 94 c3 0b 	call	0x1786	; 0x1786 <verifyPassword>
    130a:	fe 01       	movw	r30, r28
    130c:	ee 58       	subi	r30, 0x8E	; 142
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	80 83       	st	Z, r24
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a2 e0       	ldi	r26, 0x02	; 2
    1318:	b3 e4       	ldi	r27, 0x43	; 67
    131a:	8f a3       	std	Y+39, r24	; 0x27
    131c:	98 a7       	std	Y+40, r25	; 0x28
    131e:	a9 a7       	std	Y+41, r26	; 0x29
    1320:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	6f a1       	ldd	r22, Y+39	; 0x27
    1324:	78 a5       	ldd	r23, Y+40	; 0x28
    1326:	89 a5       	ldd	r24, Y+41	; 0x29
    1328:	9a a5       	ldd	r25, Y+42	; 0x2a
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a ef       	ldi	r20, 0xFA	; 250
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8b a3       	std	Y+35, r24	; 0x23
    133c:	9c a3       	std	Y+36, r25	; 0x24
    133e:	ad a3       	std	Y+37, r26	; 0x25
    1340:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1342:	6b a1       	ldd	r22, Y+35	; 0x23
    1344:	7c a1       	ldd	r23, Y+36	; 0x24
    1346:	8d a1       	ldd	r24, Y+37	; 0x25
    1348:	9e a1       	ldd	r25, Y+38	; 0x26
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e8       	ldi	r20, 0x80	; 128
    1350:	5f e3       	ldi	r21, 0x3F	; 63
    1352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1356:	88 23       	and	r24, r24
    1358:	2c f4       	brge	.+10     	; 0x1364 <main+0x7ae>
		__ticks = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9a a3       	std	Y+34, r25	; 0x22
    1360:	89 a3       	std	Y+33, r24	; 0x21
    1362:	3f c0       	rjmp	.+126    	; 0x13e2 <main+0x82c>
	else if (__tmp > 65535)
    1364:	6b a1       	ldd	r22, Y+35	; 0x23
    1366:	7c a1       	ldd	r23, Y+36	; 0x24
    1368:	8d a1       	ldd	r24, Y+37	; 0x25
    136a:	9e a1       	ldd	r25, Y+38	; 0x26
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	57 e4       	ldi	r21, 0x47	; 71
    1374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1378:	18 16       	cp	r1, r24
    137a:	4c f5       	brge	.+82     	; 0x13ce <main+0x818>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137c:	6f a1       	ldd	r22, Y+39	; 0x27
    137e:	78 a5       	ldd	r23, Y+40	; 0x28
    1380:	89 a5       	ldd	r24, Y+41	; 0x29
    1382:	9a a5       	ldd	r25, Y+42	; 0x2a
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e2       	ldi	r20, 0x20	; 32
    138a:	51 e4       	ldi	r21, 0x41	; 65
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9a a3       	std	Y+34, r25	; 0x22
    13a2:	89 a3       	std	Y+33, r24	; 0x21
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <main+0x80e>
    13a6:	88 ec       	ldi	r24, 0xC8	; 200
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	98 a3       	std	Y+32, r25	; 0x20
    13ac:	8f 8f       	std	Y+31, r24	; 0x1f
    13ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b0:	98 a1       	ldd	r25, Y+32	; 0x20
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <main+0x7fc>
    13b6:	98 a3       	std	Y+32, r25	; 0x20
    13b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	89 a1       	ldd	r24, Y+33	; 0x21
    13bc:	9a a1       	ldd	r25, Y+34	; 0x22
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	9a a3       	std	Y+34, r25	; 0x22
    13c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	89 a1       	ldd	r24, Y+33	; 0x21
    13c6:	9a a1       	ldd	r25, Y+34	; 0x22
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f7       	brne	.-38     	; 0x13a6 <main+0x7f0>
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <main+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	6b a1       	ldd	r22, Y+35	; 0x23
    13d0:	7c a1       	ldd	r23, Y+36	; 0x24
    13d2:	8d a1       	ldd	r24, Y+37	; 0x25
    13d4:	9e a1       	ldd	r25, Y+38	; 0x26
    13d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9a a3       	std	Y+34, r25	; 0x22
    13e0:	89 a3       	std	Y+33, r24	; 0x21
    13e2:	89 a1       	ldd	r24, Y+33	; 0x21
    13e4:	9a a1       	ldd	r25, Y+34	; 0x22
    13e6:	9e 8f       	std	Y+30, r25	; 0x1e
    13e8:	8d 8f       	std	Y+29, r24	; 0x1d
    13ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <main+0x838>
    13f2:	9e 8f       	std	Y+30, r25	; 0x1e
    13f4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DELAY_UART);
			UART_sendByte(isVerified);
    13f6:	fe 01       	movw	r30, r28
    13f8:	ee 58       	subi	r30, 0x8E	; 142
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
			if(isVerified){
    1402:	fe 01       	movw	r30, r28
    1404:	ee 58       	subi	r30, 0x8E	; 142
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	88 23       	and	r24, r24
    140c:	09 f4       	brne	.+2      	; 0x1410 <main+0x85a>
    140e:	9e c0       	rjmp	.+316    	; 0x154c <main+0x996>
				falsePasswordsCounter = 0;
    1410:	10 92 76 00 	sts	0x0076, r1
				recievePassword(password);
    1414:	ce 01       	movw	r24, r28
    1416:	8d 58       	subi	r24, 0x8D	; 141
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	0e 94 24 0b 	call	0x1648	; 0x1648 <recievePassword>


				recievePassword(confirmPassword);
    141e:	ce 01       	movw	r24, r28
    1420:	89 58       	subi	r24, 0x89	; 137
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	0e 94 24 0b 	call	0x1648	; 0x1648 <recievePassword>

				isVerified = verifyPassword(password, confirmPassword);
    1428:	ce 01       	movw	r24, r28
    142a:	8d 58       	subi	r24, 0x8D	; 141
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	9e 01       	movw	r18, r28
    1430:	29 58       	subi	r18, 0x89	; 137
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	b9 01       	movw	r22, r18
    1436:	0e 94 c3 0b 	call	0x1786	; 0x1786 <verifyPassword>
    143a:	fe 01       	movw	r30, r28
    143c:	ee 58       	subi	r30, 0x8E	; 142
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 83       	st	Z, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a2 e0       	ldi	r26, 0x02	; 2
    1448:	b3 e4       	ldi	r27, 0x43	; 67
    144a:	89 8f       	std	Y+25, r24	; 0x19
    144c:	9a 8f       	std	Y+26, r25	; 0x1a
    144e:	ab 8f       	std	Y+27, r26	; 0x1b
    1450:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1452:	69 8d       	ldd	r22, Y+25	; 0x19
    1454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	4a ef       	ldi	r20, 0xFA	; 250
    1460:	54 e4       	ldi	r21, 0x44	; 68
    1462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	8d 8b       	std	Y+21, r24	; 0x15
    146c:	9e 8b       	std	Y+22, r25	; 0x16
    146e:	af 8b       	std	Y+23, r26	; 0x17
    1470:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1472:	6d 89       	ldd	r22, Y+21	; 0x15
    1474:	7e 89       	ldd	r23, Y+22	; 0x16
    1476:	8f 89       	ldd	r24, Y+23	; 0x17
    1478:	98 8d       	ldd	r25, Y+24	; 0x18
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1486:	88 23       	and	r24, r24
    1488:	2c f4       	brge	.+10     	; 0x1494 <main+0x8de>
		__ticks = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	8b 8b       	std	Y+19, r24	; 0x13
    1492:	3f c0       	rjmp	.+126    	; 0x1512 <main+0x95c>
	else if (__tmp > 65535)
    1494:	6d 89       	ldd	r22, Y+21	; 0x15
    1496:	7e 89       	ldd	r23, Y+22	; 0x16
    1498:	8f 89       	ldd	r24, Y+23	; 0x17
    149a:	98 8d       	ldd	r25, Y+24	; 0x18
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	57 e4       	ldi	r21, 0x47	; 71
    14a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	4c f5       	brge	.+82     	; 0x14fe <main+0x948>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ac:	69 8d       	ldd	r22, Y+25	; 0x19
    14ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e2       	ldi	r20, 0x20	; 32
    14ba:	51 e4       	ldi	r21, 0x41	; 65
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <main+0x93e>
    14d6:	88 ec       	ldi	r24, 0xC8	; 200
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9a 8b       	std	Y+18, r25	; 0x12
    14dc:	89 8b       	std	Y+17, r24	; 0x11
    14de:	89 89       	ldd	r24, Y+17	; 0x11
    14e0:	9a 89       	ldd	r25, Y+18	; 0x12
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <main+0x92c>
    14e6:	9a 8b       	std	Y+18, r25	; 0x12
    14e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ea:	8b 89       	ldd	r24, Y+19	; 0x13
    14ec:	9c 89       	ldd	r25, Y+20	; 0x14
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f4:	8b 89       	ldd	r24, Y+19	; 0x13
    14f6:	9c 89       	ldd	r25, Y+20	; 0x14
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	69 f7       	brne	.-38     	; 0x14d6 <main+0x920>
    14fc:	14 c0       	rjmp	.+40     	; 0x1526 <main+0x970>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1500:	7e 89       	ldd	r23, Y+22	; 0x16
    1502:	8f 89       	ldd	r24, Y+23	; 0x17
    1504:	98 8d       	ldd	r25, Y+24	; 0x18
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	98 8b       	std	Y+16, r25	; 0x10
    1518:	8f 87       	std	Y+15, r24	; 0x0f
    151a:	8f 85       	ldd	r24, Y+15	; 0x0f
    151c:	98 89       	ldd	r25, Y+16	; 0x10
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <main+0x968>
    1522:	98 8b       	std	Y+16, r25	; 0x10
    1524:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(DELAY_UART);
				UART_sendByte(isVerified);
    1526:	fe 01       	movw	r30, r28
    1528:	ee 58       	subi	r30, 0x8E	; 142
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>

				if(isVerified){
    1532:	fe 01       	movw	r30, r28
    1534:	ee 58       	subi	r30, 0x8E	; 142
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	88 23       	and	r24, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <main+0x98a>
    153e:	38 cc       	rjmp	.-1936   	; 0xdb0 <main+0x1fa>
					// store new password in eeprom
					storePasswordEEPROM(password);
    1540:	ce 01       	movw	r24, r28
    1542:	8d 58       	subi	r24, 0x8D	; 141
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <storePasswordEEPROM>
    154a:	32 cc       	rjmp	.-1948   	; 0xdb0 <main+0x1fa>
				}else{
					// do nothing
				}

			}else{
				falsePasswordsCounter++;
    154c:	80 91 76 00 	lds	r24, 0x0076
    1550:	8f 5f       	subi	r24, 0xFF	; 255
    1552:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswordsCounter);
    1556:	80 91 76 00 	lds	r24, 0x0076
    155a:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a2 e0       	ldi	r26, 0x02	; 2
    1564:	b3 e4       	ldi	r27, 0x43	; 67
    1566:	8b 87       	std	Y+11, r24	; 0x0b
    1568:	9c 87       	std	Y+12, r25	; 0x0c
    156a:	ad 87       	std	Y+13, r26	; 0x0d
    156c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1570:	7c 85       	ldd	r23, Y+12	; 0x0c
    1572:	8d 85       	ldd	r24, Y+13	; 0x0d
    1574:	9e 85       	ldd	r25, Y+14	; 0x0e
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a ef       	ldi	r20, 0xFA	; 250
    157c:	54 e4       	ldi	r21, 0x44	; 68
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8f 83       	std	Y+7, r24	; 0x07
    1588:	98 87       	std	Y+8, r25	; 0x08
    158a:	a9 87       	std	Y+9, r26	; 0x09
    158c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158e:	6f 81       	ldd	r22, Y+7	; 0x07
    1590:	78 85       	ldd	r23, Y+8	; 0x08
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	5f e3       	ldi	r21, 0x3F	; 63
    159e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <main+0x9fa>
		__ticks = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	3f c0       	rjmp	.+126    	; 0x162e <main+0xa78>
	else if (__tmp > 65535)
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	4c f5       	brge	.+82     	; 0x161a <main+0xa64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <main+0xa5a>
    15f2:	88 ec       	ldi	r24, 0xC8	; 200
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <main+0xa48>
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f7       	brne	.-38     	; 0x15f2 <main+0xa3c>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <main+0xa8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <main+0xa84>
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(DELAY_UART);
				checkFalsePasswords();
    1642:	0e 94 47 0c 	call	0x188e	; 0x188e <checkFalsePasswords>
    1646:	b4 cb       	rjmp	.-2200   	; 0xdb0 <main+0x1fa>

00001648 <recievePassword>:
	}
}

// Functions
void recievePassword(uint8 password[])
{
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	61 97       	sbiw	r28, 0x11	; 17
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	99 8b       	std	Y+17, r25	; 0x11
    1662:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 4; i++) {
    1664:	1f 86       	std	Y+15, r1	; 0x0f
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <recievePassword+0x3e>
		password[i]=UART_recieveByte();
    1668:	8f 85       	ldd	r24, Y+15	; 0x0f
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	88 89       	ldd	r24, Y+16	; 0x10
    1670:	99 89       	ldd	r25, Y+17	; 0x11
    1672:	8c 01       	movw	r16, r24
    1674:	02 0f       	add	r16, r18
    1676:	13 1f       	adc	r17, r19
    1678:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    167c:	f8 01       	movw	r30, r16
    167e:	80 83       	st	Z, r24
}

// Functions
void recievePassword(uint8 password[])
{
	for (uint8 i = 0; i < 4; i++) {
    1680:	8f 85       	ldd	r24, Y+15	; 0x0f
    1682:	8f 5f       	subi	r24, 0xFF	; 255
    1684:	8f 87       	std	Y+15, r24	; 0x0f
    1686:	8f 85       	ldd	r24, Y+15	; 0x0f
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	70 f3       	brcs	.-36     	; 0x1668 <recievePassword+0x20>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a2 e0       	ldi	r26, 0x02	; 2
    1692:	b3 e4       	ldi	r27, 0x43	; 67
    1694:	8b 87       	std	Y+11, r24	; 0x0b
    1696:	9c 87       	std	Y+12, r25	; 0x0c
    1698:	ad 87       	std	Y+13, r26	; 0x0d
    169a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a ef       	ldi	r20, 0xFA	; 250
    16aa:	54 e4       	ldi	r21, 0x44	; 68
    16ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	8f 83       	std	Y+7, r24	; 0x07
    16b6:	98 87       	std	Y+8, r25	; 0x08
    16b8:	a9 87       	std	Y+9, r26	; 0x09
    16ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	2c f4       	brge	.+10     	; 0x16de <recievePassword+0x96>
		__ticks = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <recievePassword+0x114>
	else if (__tmp > 65535)
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	4c f5       	brge	.+82     	; 0x1748 <recievePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	0f c0       	rjmp	.+30     	; 0x173e <recievePassword+0xf6>
    1720:	88 ec       	ldi	r24, 0xC8	; 200
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <recievePassword+0xe4>
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	69 f7       	brne	.-38     	; 0x1720 <recievePassword+0xd8>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <recievePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1748:	6f 81       	ldd	r22, Y+7	; 0x07
    174a:	78 85       	ldd	r23, Y+8	; 0x08
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <recievePassword+0x120>
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
		password[i]=UART_recieveByte();
	}
	_delay_ms(DELAY_UART);

}
    1770:	61 96       	adiw	r28, 0x11	; 17
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <verifyPassword>:

uint8 verifyPassword(uint8 password[], uint8 confirmPassword[]){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <verifyPassword+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <verifyPassword+0x8>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <verifyPassword+0xa>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9b 83       	std	Y+3, r25	; 0x03
    1796:	8a 83       	std	Y+2, r24	; 0x02
    1798:	7d 83       	std	Y+5, r23	; 0x05
    179a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i = 0; i <4 ; i++){
    179c:	19 82       	std	Y+1, r1	; 0x01
    179e:	19 c0       	rjmp	.+50     	; 0x17d2 <verifyPassword+0x4c>
		if(password[i]!= confirmPassword[i]){
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	fc 01       	movw	r30, r24
    17ac:	e2 0f       	add	r30, r18
    17ae:	f3 1f       	adc	r31, r19
    17b0:	40 81       	ld	r20, Z
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	fc 01       	movw	r30, r24
    17be:	e2 0f       	add	r30, r18
    17c0:	f3 1f       	adc	r31, r19
    17c2:	80 81       	ld	r24, Z
    17c4:	48 17       	cp	r20, r24
    17c6:	11 f0       	breq	.+4      	; 0x17cc <verifyPassword+0x46>
			return 0;
    17c8:	1e 82       	std	Y+6, r1	; 0x06
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <verifyPassword+0x56>

}

uint8 verifyPassword(uint8 password[], uint8 confirmPassword[]){
	uint8 i;
	for(i = 0; i <4 ; i++){
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	84 30       	cpi	r24, 0x04	; 4
    17d6:	20 f3       	brcs	.-56     	; 0x17a0 <verifyPassword+0x1a>
		if(password[i]!= confirmPassword[i]){
			return 0;
		}
	}
	return 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	8e 83       	std	Y+6, r24	; 0x06
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    17de:	26 96       	adiw	r28, 0x06	; 6
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <openDoor>:

void openDoor(){
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
	TIMER0_Init(&TConfig);
    17f8:	8b e6       	ldi	r24, 0x6B	; 107
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 a8 12 	call	0x2550	; 0x2550 <TIMER0_Init>
	DCMOTOR_rotate(CLOCKWISE);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DCMOTOR_rotate>
	while(g_counter < 465);
    1806:	80 91 74 00 	lds	r24, 0x0074
    180a:	90 91 75 00 	lds	r25, 0x0075
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	81 3d       	cpi	r24, 0xD1	; 209
    1812:	92 07       	cpc	r25, r18
    1814:	c4 f3       	brlt	.-16     	; 0x1806 <openDoor+0x16>
	g_counter = 0;
    1816:	10 92 75 00 	sts	0x0075, r1
    181a:	10 92 74 00 	sts	0x0074, r1
	DCMOTOR_rotate(STOP);
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DCMOTOR_rotate>

	while(g_counter < 93);
    1824:	80 91 74 00 	lds	r24, 0x0074
    1828:	90 91 75 00 	lds	r25, 0x0075
    182c:	8d 35       	cpi	r24, 0x5D	; 93
    182e:	91 05       	cpc	r25, r1
    1830:	cc f3       	brlt	.-14     	; 0x1824 <openDoor+0x34>
	g_counter = 0;
    1832:	10 92 75 00 	sts	0x0075, r1
    1836:	10 92 74 00 	sts	0x0074, r1
	DCMOTOR_rotate(ANTICLOCKWISE);
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DCMOTOR_rotate>

	while(g_counter < 465);
    1840:	80 91 74 00 	lds	r24, 0x0074
    1844:	90 91 75 00 	lds	r25, 0x0075
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	81 3d       	cpi	r24, 0xD1	; 209
    184c:	92 07       	cpc	r25, r18
    184e:	c4 f3       	brlt	.-16     	; 0x1840 <openDoor+0x50>
	DCMOTOR_rotate(STOP);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <DCMOTOR_rotate>
	TIMER0_deinit();
    1856:	0e 94 02 13 	call	0x2604	; 0x2604 <TIMER0_deinit>
	g_counter = 0;
    185a:	10 92 75 00 	sts	0x0075, r1
    185e:	10 92 74 00 	sts	0x0074, r1
}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <timerHandler>:

void timerHandler(void){
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_setValue(3);
    1870:	83 e0       	ldi	r24, 0x03	; 3
    1872:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <TIMER0_setValue>
	g_counter++;
    1876:	80 91 74 00 	lds	r24, 0x0074
    187a:	90 91 75 00 	lds	r25, 0x0075
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	90 93 75 00 	sts	0x0075, r25
    1884:	80 93 74 00 	sts	0x0074, r24
}
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <checkFalsePasswords>:

void checkFalsePasswords(void){
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	if(falsePasswordsCounter >= 3){
    1896:	80 91 76 00 	lds	r24, 0x0076
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	c0 f0       	brcs	.+48     	; 0x18ce <checkFalsePasswords+0x40>
		falsePasswordsCounter = 0;
    189e:	10 92 76 00 	sts	0x0076, r1
		TIMER0_Init(&TConfig);
    18a2:	8b e6       	ldi	r24, 0x6B	; 107
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 a8 12 	call	0x2550	; 0x2550 <TIMER0_Init>
		buzzer_start();
    18aa:	0e 94 be 05 	call	0xb7c	; 0xb7c <buzzer_start>
		while(g_counter < 465);
    18ae:	80 91 74 00 	lds	r24, 0x0074
    18b2:	90 91 75 00 	lds	r25, 0x0075
    18b6:	21 e0       	ldi	r18, 0x01	; 1
    18b8:	81 3d       	cpi	r24, 0xD1	; 209
    18ba:	92 07       	cpc	r25, r18
    18bc:	c4 f3       	brlt	.-16     	; 0x18ae <checkFalsePasswords+0x20>
		buzzer_stop();
    18be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <buzzer_stop>
		TIMER0_deinit();
    18c2:	0e 94 02 13 	call	0x2604	; 0x2604 <TIMER0_deinit>
		g_counter = 0;
    18c6:	10 92 75 00 	sts	0x0075, r1
    18ca:	10 92 74 00 	sts	0x0074, r1
	}
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <storePasswordEEPROM>:

void storePasswordEEPROM(uint8 password[]){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	61 97       	sbiw	r28, 0x11	; 17
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	99 8b       	std	Y+17, r25	; 0x11
    18ea:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0;i<4;i++)
    18ec:	1f 86       	std	Y+15, r1	; 0x0f
    18ee:	88 c0       	rjmp	.+272    	; 0x1a00 <storePasswordEEPROM+0x12c>
	{
		EEPROM_writeByte((0X0090+i), password[i]);
    18f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	80 57       	subi	r24, 0x70	; 112
    18f8:	9f 4f       	sbci	r25, 0xFF	; 255
    18fa:	ac 01       	movw	r20, r24
    18fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	88 89       	ldd	r24, Y+16	; 0x10
    1904:	99 89       	ldd	r25, Y+17	; 0x11
    1906:	fc 01       	movw	r30, r24
    1908:	e2 0f       	add	r30, r18
    190a:	f3 1f       	adc	r31, r19
    190c:	20 81       	ld	r18, Z
    190e:	ca 01       	movw	r24, r20
    1910:	62 2f       	mov	r22, r18
    1912:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <EEPROM_writeByte>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a2 e0       	ldi	r26, 0x02	; 2
    191c:	b3 e4       	ldi	r27, 0x43	; 67
    191e:	8b 87       	std	Y+11, r24	; 0x0b
    1920:	9c 87       	std	Y+12, r25	; 0x0c
    1922:	ad 87       	std	Y+13, r26	; 0x0d
    1924:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1926:	6b 85       	ldd	r22, Y+11	; 0x0b
    1928:	7c 85       	ldd	r23, Y+12	; 0x0c
    192a:	8d 85       	ldd	r24, Y+13	; 0x0d
    192c:	9e 85       	ldd	r25, Y+14	; 0x0e
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a ef       	ldi	r20, 0xFA	; 250
    1934:	54 e4       	ldi	r21, 0x44	; 68
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	8f 83       	std	Y+7, r24	; 0x07
    1940:	98 87       	std	Y+8, r25	; 0x08
    1942:	a9 87       	std	Y+9, r26	; 0x09
    1944:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	2c f4       	brge	.+10     	; 0x1968 <storePasswordEEPROM+0x94>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	3f c0       	rjmp	.+126    	; 0x19e6 <storePasswordEEPROM+0x112>
	else if (__tmp > 65535)
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	4c f5       	brge	.+82     	; 0x19d2 <storePasswordEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	6b 85       	ldd	r22, Y+11	; 0x0b
    1982:	7c 85       	ldd	r23, Y+12	; 0x0c
    1984:	8d 85       	ldd	r24, Y+13	; 0x0d
    1986:	9e 85       	ldd	r25, Y+14	; 0x0e
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	51 e4       	ldi	r21, 0x41	; 65
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <storePasswordEEPROM+0xf4>
    19aa:	88 ec       	ldi	r24, 0xC8	; 200
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9c 83       	std	Y+4, r25	; 0x04
    19b0:	8b 83       	std	Y+3, r24	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <storePasswordEEPROM+0xe2>
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	69 f7       	brne	.-38     	; 0x19aa <storePasswordEEPROM+0xd6>
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <storePasswordEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <storePasswordEEPROM+0x11e>
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
	}
}

void storePasswordEEPROM(uint8 password[]){
	uint8 i;
	for(i=0;i<4;i++)
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	8f 87       	std	Y+15, r24	; 0x0f
    1a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a02:	84 30       	cpi	r24, 0x04	; 4
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <storePasswordEEPROM+0x134>
    1a06:	74 cf       	rjmp	.-280    	; 0x18f0 <storePasswordEEPROM+0x1c>
	{
		EEPROM_writeByte((0X0090+i), password[i]);
		_delay_ms(DELAY_UART);
	}
}
    1a08:	61 96       	adiw	r28, 0x11	; 17
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <readPasswordEEPROM>:

void readPasswordEEPROM(uint8 password[]){
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	61 97       	sbiw	r28, 0x11	; 17
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	99 8b       	std	Y+17, r25	; 0x11
    1a30:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 4; i++)
    1a32:	1f 86       	std	Y+15, r1	; 0x0f
    1a34:	86 c0       	rjmp	.+268    	; 0x1b42 <readPasswordEEPROM+0x128>
	{
		EEPROM_readByte( (0x0090 + i), (password+i));
    1a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	80 57       	subi	r24, 0x70	; 112
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	ac 01       	movw	r20, r24
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	88 89       	ldd	r24, Y+16	; 0x10
    1a4a:	99 89       	ldd	r25, Y+17	; 0x11
    1a4c:	28 0f       	add	r18, r24
    1a4e:	39 1f       	adc	r19, r25
    1a50:	ca 01       	movw	r24, r20
    1a52:	b9 01       	movw	r22, r18
    1a54:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <EEPROM_readByte>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a8 ec       	ldi	r26, 0xC8	; 200
    1a5e:	b2 e4       	ldi	r27, 0x42	; 66
    1a60:	8b 87       	std	Y+11, r24	; 0x0b
    1a62:	9c 87       	std	Y+12, r25	; 0x0c
    1a64:	ad 87       	std	Y+13, r26	; 0x0d
    1a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a ef       	ldi	r20, 0xFA	; 250
    1a76:	54 e4       	ldi	r21, 0x44	; 68
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8f 83       	std	Y+7, r24	; 0x07
    1a82:	98 87       	std	Y+8, r25	; 0x08
    1a84:	a9 87       	std	Y+9, r26	; 0x09
    1a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a88:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8a:	78 85       	ldd	r23, Y+8	; 0x08
    1a8c:	89 85       	ldd	r24, Y+9	; 0x09
    1a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <readPasswordEEPROM+0x90>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <readPasswordEEPROM+0x10e>
	else if (__tmp > 65535)
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <readPasswordEEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <readPasswordEEPROM+0xf0>
    1aec:	88 ec       	ldi	r24, 0xC8	; 200
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <readPasswordEEPROM+0xde>
    1afc:	9c 83       	std	Y+4, r25	; 0x04
    1afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <readPasswordEEPROM+0xd2>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <readPasswordEEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <readPasswordEEPROM+0x11a>
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DELAY_UART);
	}
}

void readPasswordEEPROM(uint8 password[]){
	for (uint8 i = 0; i < 4; i++)
    1b3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	8f 87       	std	Y+15, r24	; 0x0f
    1b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b44:	84 30       	cpi	r24, 0x04	; 4
    1b46:	08 f4       	brcc	.+2      	; 0x1b4a <readPasswordEEPROM+0x130>
    1b48:	76 cf       	rjmp	.-276    	; 0x1a36 <readPasswordEEPROM+0x1c>
	{
		EEPROM_readByte( (0x0090 + i), (password+i));
		_delay_ms(100);
	}
}
    1b4a:	61 96       	adiw	r28, 0x11	; 17
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <DCMOTOR_init>:
/*
 * Description :
 * Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DCMOTOR_init(void){
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
	// Set motor pins as output pins
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, PIN_OUTPUT);
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	65 e0       	ldi	r22, 0x05	; 5
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN2, PIN_OUTPUT);
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	66 e0       	ldi	r22, 0x06	; 6
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <GPIO_setupPinDirection>

	// Stop the motor initially
	GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	65 e0       	ldi	r22, 0x05	; 5
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_LOW);
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	66 e0       	ldi	r22, 0x06	; 6
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
}
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <DCMOTOR_rotate>:
/*
 * Description :
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DCMOTOR_rotate(DCMOTOR_STATE state){
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	if(state == STOP){
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	88 23       	and	r24, r24
    1ba2:	59 f4       	brne	.+22     	; 0x1bba <DCMOTOR_rotate+0x28>
		// Stop the motor
		GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	65 e0       	ldi	r22, 0x05	; 5
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_LOW);
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	66 e0       	ldi	r22, 0x06	; 6
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
    1bb8:	1b c0       	rjmp	.+54     	; 0x1bf0 <DCMOTOR_rotate+0x5e>
	}else if(state == CLOCKWISE){
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	59 f4       	brne	.+22     	; 0x1bd6 <DCMOTOR_rotate+0x44>
		// Rotate Clockwise
		GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_HIGH);
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	65 e0       	ldi	r22, 0x05	; 5
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_LOW);
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	66 e0       	ldi	r22, 0x06	; 6
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <DCMOTOR_rotate+0x5e>
	}else if(state == ANTICLOCKWISE){
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	51 f4       	brne	.+20     	; 0x1bf0 <DCMOTOR_rotate+0x5e>
		// Rotate Anti-clockwise
		GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	65 e0       	ldi	r22, 0x05	; 5
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_HIGH);
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	66 e0       	ldi	r22, 0x06	; 6
    1bea:	41 e0       	ldi	r20, 0x01	; 1
    1bec:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <GPIO_writePin>
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <EEPROM_init>:
#include "twi.h"



void EEPROM_init(void)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	28 97       	sbiw	r28, 0x08	; 8
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
	I2C_Config config= { PRESCALE_1, 2 , 2 }; 					//TWBR =2 AND ADDRESS = 2
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	9d 83       	std	Y+5, r25	; 0x05
    1c12:	8c 83       	std	Y+4, r24	; 0x04
    1c14:	e1 e7       	ldi	r30, 0x71	; 113
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	ff 83       	std	Y+7, r31	; 0x07
    1c1a:	ee 83       	std	Y+6, r30	; 0x06
    1c1c:	f3 e0       	ldi	r31, 0x03	; 3
    1c1e:	f8 87       	std	Y+8, r31	; 0x08
    1c20:	ee 81       	ldd	r30, Y+6	; 0x06
    1c22:	ff 81       	ldd	r31, Y+7	; 0x07
    1c24:	00 80       	ld	r0, Z
    1c26:	8e 81       	ldd	r24, Y+6	; 0x06
    1c28:	9f 81       	ldd	r25, Y+7	; 0x07
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	9f 83       	std	Y+7, r25	; 0x07
    1c2e:	8e 83       	std	Y+6, r24	; 0x06
    1c30:	ec 81       	ldd	r30, Y+4	; 0x04
    1c32:	fd 81       	ldd	r31, Y+5	; 0x05
    1c34:	00 82       	st	Z, r0
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	9d 83       	std	Y+5, r25	; 0x05
    1c3e:	8c 83       	std	Y+4, r24	; 0x04
    1c40:	98 85       	ldd	r25, Y+8	; 0x08
    1c42:	91 50       	subi	r25, 0x01	; 1
    1c44:	98 87       	std	Y+8, r25	; 0x08
    1c46:	e8 85       	ldd	r30, Y+8	; 0x08
    1c48:	ee 23       	and	r30, r30
    1c4a:	51 f7       	brne	.-44     	; 0x1c20 <EEPROM_init+0x28>
	TWI_init( &config );
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	0e 94 19 13 	call	0x2632	; 0x2632 <TWI_init>
}
    1c54:	28 96       	adiw	r28, 0x08	; 8
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <EEPROM_writeByte>:



uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <EEPROM_writeByte+0x6>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <EEPROM_writeByte+0x8>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c78:	0e 94 47 13 	call	0x268e	; 0x268e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c7c:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1c80:	88 30       	cpi	r24, 0x08	; 8
    1c82:	11 f0       	breq	.+4      	; 0x1c88 <EEPROM_writeByte+0x22>
        return ERROR;
    1c84:	1c 82       	std	Y+4, r1	; 0x04
    1c86:	28 c0       	rjmp	.+80     	; 0x1cd8 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	80 70       	andi	r24, 0x00	; 0
    1c8e:	97 70       	andi	r25, 0x07	; 7
    1c90:	88 0f       	add	r24, r24
    1c92:	89 2f       	mov	r24, r25
    1c94:	88 1f       	adc	r24, r24
    1c96:	99 0b       	sbc	r25, r25
    1c98:	91 95       	neg	r25
    1c9a:	80 6a       	ori	r24, 0xA0	; 160
    1c9c:	0e 94 62 13 	call	0x26c4	; 0x26c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ca0:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1ca4:	88 31       	cpi	r24, 0x18	; 24
    1ca6:	11 f0       	breq	.+4      	; 0x1cac <EEPROM_writeByte+0x46>
        return ERROR; 
    1ca8:	1c 82       	std	Y+4, r1	; 0x04
    1caa:	16 c0       	rjmp	.+44     	; 0x1cd8 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	0e 94 62 13 	call	0x26c4	; 0x26c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1cb2:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1cb6:	88 32       	cpi	r24, 0x28	; 40
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <EEPROM_writeByte+0x58>
        return ERROR;
    1cba:	1c 82       	std	Y+4, r1	; 0x04
    1cbc:	0d c0       	rjmp	.+26     	; 0x1cd8 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	0e 94 62 13 	call	0x26c4	; 0x26c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1cc4:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1cc8:	88 32       	cpi	r24, 0x28	; 40
    1cca:	11 f0       	breq	.+4      	; 0x1cd0 <EEPROM_writeByte+0x6a>
        return ERROR;
    1ccc:	1c 82       	std	Y+4, r1	; 0x04
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1cd0:	0e 94 57 13 	call	0x26ae	; 0x26ae <TWI_stop>
	
    return SUCCESS;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	8c 83       	std	Y+4, r24	; 0x04
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <EEPROM_readByte+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <EEPROM_readByte+0x8>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	7c 83       	std	Y+4, r23	; 0x04
    1cfc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1cfe:	0e 94 47 13 	call	0x268e	; 0x268e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1d02:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	11 f0       	breq	.+4      	; 0x1d0e <EEPROM_readByte+0x26>
        return ERROR;
    1d0a:	1d 82       	std	Y+5, r1	; 0x05
    1d0c:	44 c0       	rjmp	.+136    	; 0x1d96 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	80 70       	andi	r24, 0x00	; 0
    1d14:	97 70       	andi	r25, 0x07	; 7
    1d16:	88 0f       	add	r24, r24
    1d18:	89 2f       	mov	r24, r25
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	99 0b       	sbc	r25, r25
    1d1e:	91 95       	neg	r25
    1d20:	80 6a       	ori	r24, 0xA0	; 160
    1d22:	0e 94 62 13 	call	0x26c4	; 0x26c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d26:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1d2a:	88 31       	cpi	r24, 0x18	; 24
    1d2c:	11 f0       	breq	.+4      	; 0x1d32 <EEPROM_readByte+0x4a>
        return ERROR;
    1d2e:	1d 82       	std	Y+5, r1	; 0x05
    1d30:	32 c0       	rjmp	.+100    	; 0x1d96 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	0e 94 62 13 	call	0x26c4	; 0x26c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d38:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1d3c:	88 32       	cpi	r24, 0x28	; 40
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <EEPROM_readByte+0x5c>
        return ERROR;
    1d40:	1d 82       	std	Y+5, r1	; 0x05
    1d42:	29 c0       	rjmp	.+82     	; 0x1d96 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1d44:	0e 94 47 13 	call	0x268e	; 0x268e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1d48:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1d4c:	80 31       	cpi	r24, 0x10	; 16
    1d4e:	11 f0       	breq	.+4      	; 0x1d54 <EEPROM_readByte+0x6c>
        return ERROR;
    1d50:	1d 82       	std	Y+5, r1	; 0x05
    1d52:	21 c0       	rjmp	.+66     	; 0x1d96 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	80 70       	andi	r24, 0x00	; 0
    1d5a:	97 70       	andi	r25, 0x07	; 7
    1d5c:	88 0f       	add	r24, r24
    1d5e:	89 2f       	mov	r24, r25
    1d60:	88 1f       	adc	r24, r24
    1d62:	99 0b       	sbc	r25, r25
    1d64:	91 95       	neg	r25
    1d66:	81 6a       	ori	r24, 0xA1	; 161
    1d68:	0e 94 62 13 	call	0x26c4	; 0x26c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1d6c:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1d70:	80 34       	cpi	r24, 0x40	; 64
    1d72:	11 f0       	breq	.+4      	; 0x1d78 <EEPROM_readByte+0x90>
        return ERROR;
    1d74:	1d 82       	std	Y+5, r1	; 0x05
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1d78:	0e 94 8c 13 	call	0x2718	; 0x2718 <TWI_readByteWithNACK>
    1d7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d80:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1d82:	0e 94 9f 13 	call	0x273e	; 0x273e <TWI_getStatus>
    1d86:	88 35       	cpi	r24, 0x58	; 88
    1d88:	11 f0       	breq	.+4      	; 0x1d8e <EEPROM_readByte+0xa6>
        return ERROR;
    1d8a:	1d 82       	std	Y+5, r1	; 0x05
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1d8e:	0e 94 57 13 	call	0x26ae	; 0x26ae <TWI_stop>

    return SUCCESS;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <GPIO_setupPinDirection+0x6>
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <GPIO_setupPinDirection+0x8>
    1db0:	0f 92       	push	r0
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	6a 83       	std	Y+2, r22	; 0x02
    1dba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	88 30       	cpi	r24, 0x08	; 8
    1dc0:	08 f0       	brcs	.+2      	; 0x1dc4 <GPIO_setupPinDirection+0x1c>
    1dc2:	d5 c0       	rjmp	.+426    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	84 30       	cpi	r24, 0x04	; 4
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <GPIO_setupPinDirection+0x24>
    1dca:	d1 c0       	rjmp	.+418    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3d 83       	std	Y+5, r19	; 0x05
    1dd4:	2c 83       	std	Y+4, r18	; 0x04
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <GPIO_setupPinDirection+0x3a>
    1de0:	43 c0       	rjmp	.+134    	; 0x1e68 <GPIO_setupPinDirection+0xc0>
    1de2:	2c 81       	ldd	r18, Y+4	; 0x04
    1de4:	3d 81       	ldd	r19, Y+5	; 0x05
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <GPIO_setupPinDirection+0x4e>
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	71 f0       	breq	.+28     	; 0x1e10 <GPIO_setupPinDirection+0x68>
    1df4:	bc c0       	rjmp	.+376    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
    1df6:	2c 81       	ldd	r18, Y+4	; 0x04
    1df8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <GPIO_setupPinDirection+0x5a>
    1e00:	5f c0       	rjmp	.+190    	; 0x1ec0 <GPIO_setupPinDirection+0x118>
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	9d 81       	ldd	r25, Y+5	; 0x05
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	91 05       	cpc	r25, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <GPIO_setupPinDirection+0x66>
    1e0c:	85 c0       	rjmp	.+266    	; 0x1f18 <GPIO_setupPinDirection+0x170>
    1e0e:	af c0       	rjmp	.+350    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	a1 f4       	brne	.+40     	; 0x1e3e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e16:	aa e3       	ldi	r26, 0x3A	; 58
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	ea e3       	ldi	r30, 0x3A	; 58
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	02 2e       	mov	r0, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <GPIO_setupPinDirection+0x8c>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <GPIO_setupPinDirection+0x88>
    1e38:	84 2b       	or	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	98 c0       	rjmp	.+304    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e3e:	aa e3       	ldi	r26, 0x3A	; 58
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ea e3       	ldi	r30, 0x3A	; 58
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <GPIO_setupPinDirection+0xb4>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <GPIO_setupPinDirection+0xb0>
    1e60:	80 95       	com	r24
    1e62:	84 23       	and	r24, r20
    1e64:	8c 93       	st	X, r24
    1e66:	83 c0       	rjmp	.+262    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	a1 f4       	brne	.+40     	; 0x1e96 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1e6e:	a7 e3       	ldi	r26, 0x37	; 55
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e7 e3       	ldi	r30, 0x37	; 55
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	48 2f       	mov	r20, r24
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 2e       	mov	r0, r18
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <GPIO_setupPinDirection+0xe4>
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	0a 94       	dec	r0
    1e8e:	e2 f7       	brpl	.-8      	; 0x1e88 <GPIO_setupPinDirection+0xe0>
    1e90:	84 2b       	or	r24, r20
    1e92:	8c 93       	st	X, r24
    1e94:	6c c0       	rjmp	.+216    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e96:	a7 e3       	ldi	r26, 0x37	; 55
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e7 e3       	ldi	r30, 0x37	; 55
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 2e       	mov	r0, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <GPIO_setupPinDirection+0x10c>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <GPIO_setupPinDirection+0x108>
    1eb8:	80 95       	com	r24
    1eba:	84 23       	and	r24, r20
    1ebc:	8c 93       	st	X, r24
    1ebe:	57 c0       	rjmp	.+174    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	a1 f4       	brne	.+40     	; 0x1eee <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ec6:	a4 e3       	ldi	r26, 0x34	; 52
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e4 e3       	ldi	r30, 0x34	; 52
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <GPIO_setupPinDirection+0x13c>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <GPIO_setupPinDirection+0x138>
    1ee8:	84 2b       	or	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	40 c0       	rjmp	.+128    	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1eee:	a4 e3       	ldi	r26, 0x34	; 52
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e4 e3       	ldi	r30, 0x34	; 52
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <GPIO_setupPinDirection+0x164>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <GPIO_setupPinDirection+0x160>
    1f10:	80 95       	com	r24
    1f12:	84 23       	and	r24, r20
    1f14:	8c 93       	st	X, r24
    1f16:	2b c0       	rjmp	.+86     	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	a1 f4       	brne	.+40     	; 0x1f46 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f1e:	a1 e3       	ldi	r26, 0x31	; 49
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e1 e3       	ldi	r30, 0x31	; 49
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <GPIO_setupPinDirection+0x194>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <GPIO_setupPinDirection+0x190>
    1f40:	84 2b       	or	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	14 c0       	rjmp	.+40     	; 0x1f6e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f46:	a1 e3       	ldi	r26, 0x31	; 49
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e1 e3       	ldi	r30, 0x31	; 49
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	02 2e       	mov	r0, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <GPIO_setupPinDirection+0x1bc>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <GPIO_setupPinDirection+0x1b8>
    1f68:	80 95       	com	r24
    1f6a:	84 23       	and	r24, r20
    1f6c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <GPIO_writePin+0x6>
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <GPIO_writePin+0x8>
    1f86:	0f 92       	push	r0
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	6a 83       	std	Y+2, r22	; 0x02
    1f90:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	88 30       	cpi	r24, 0x08	; 8
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <GPIO_writePin+0x1c>
    1f98:	e4 c0       	rjmp	.+456    	; 0x2162 <GPIO_writePin+0x1e4>
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	84 30       	cpi	r24, 0x04	; 4
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <GPIO_writePin+0x24>
    1fa0:	e0 c0       	rjmp	.+448    	; 0x2162 <GPIO_writePin+0x1e4>
	{
		return;
	}

	switch(port_num)
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	3d 83       	std	Y+5, r19	; 0x05
    1faa:	2c 83       	std	Y+4, r18	; 0x04
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <GPIO_writePin+0x3a>
    1fb6:	47 c0       	rjmp	.+142    	; 0x2046 <GPIO_writePin+0xc8>
    1fb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fba:	3d 81       	ldd	r19, Y+5	; 0x05
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <GPIO_writePin+0x4e>
    1fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	71 f0       	breq	.+28     	; 0x1fe6 <GPIO_writePin+0x68>
    1fca:	cb c0       	rjmp	.+406    	; 0x2162 <GPIO_writePin+0x1e4>
    1fcc:	2c 81       	ldd	r18, Y+4	; 0x04
    1fce:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd0:	22 30       	cpi	r18, 0x02	; 2
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <GPIO_writePin+0x5a>
    1fd6:	67 c0       	rjmp	.+206    	; 0x20a6 <GPIO_writePin+0x128>
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <GPIO_writePin+0x66>
    1fe2:	91 c0       	rjmp	.+290    	; 0x2106 <GPIO_writePin+0x188>
    1fe4:	be c0       	rjmp	.+380    	; 0x2162 <GPIO_writePin+0x1e4>
			{
			case PORTA_ID:
				if(value == LOGIC_LOW){
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	88 23       	and	r24, r24
    1fea:	a9 f4       	brne	.+42     	; 0x2016 <GPIO_writePin+0x98>
					CLEAR_BIT(PORTA, pin_num);
    1fec:	ab e3       	ldi	r26, 0x3B	; 59
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	eb e3       	ldi	r30, 0x3B	; 59
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	48 2f       	mov	r20, r24
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	02 2e       	mov	r0, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <GPIO_writePin+0x8c>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <GPIO_writePin+0x88>
    200e:	80 95       	com	r24
    2010:	84 23       	and	r24, r20
    2012:	8c 93       	st	X, r24
    2014:	a6 c0       	rjmp	.+332    	; 0x2162 <GPIO_writePin+0x1e4>
				}else if(value == LOGIC_HIGH){
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	09 f0       	breq	.+2      	; 0x201e <GPIO_writePin+0xa0>
    201c:	a2 c0       	rjmp	.+324    	; 0x2162 <GPIO_writePin+0x1e4>
					SET_BIT(PORTA, pin_num);
    201e:	ab e3       	ldi	r26, 0x3B	; 59
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	eb e3       	ldi	r30, 0x3B	; 59
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <GPIO_writePin+0xbe>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <GPIO_writePin+0xba>
    2040:	84 2b       	or	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	8e c0       	rjmp	.+284    	; 0x2162 <GPIO_writePin+0x1e4>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_LOW){
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	88 23       	and	r24, r24
    204a:	a9 f4       	brne	.+42     	; 0x2076 <GPIO_writePin+0xf8>
					CLEAR_BIT(PORTB, pin_num);
    204c:	a8 e3       	ldi	r26, 0x38	; 56
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e8 e3       	ldi	r30, 0x38	; 56
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <GPIO_writePin+0xec>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <GPIO_writePin+0xe8>
    206e:	80 95       	com	r24
    2070:	84 23       	and	r24, r20
    2072:	8c 93       	st	X, r24
    2074:	76 c0       	rjmp	.+236    	; 0x2162 <GPIO_writePin+0x1e4>
				}else if(value ==LOGIC_HIGH){
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	09 f0       	breq	.+2      	; 0x207e <GPIO_writePin+0x100>
    207c:	72 c0       	rjmp	.+228    	; 0x2162 <GPIO_writePin+0x1e4>
					SET_BIT(PORTB, pin_num);
    207e:	a8 e3       	ldi	r26, 0x38	; 56
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e8 e3       	ldi	r30, 0x38	; 56
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <GPIO_writePin+0x11e>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <GPIO_writePin+0x11a>
    20a0:	84 2b       	or	r24, r20
    20a2:	8c 93       	st	X, r24
    20a4:	5e c0       	rjmp	.+188    	; 0x2162 <GPIO_writePin+0x1e4>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_LOW){
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	88 23       	and	r24, r24
    20aa:	a9 f4       	brne	.+42     	; 0x20d6 <GPIO_writePin+0x158>
					CLEAR_BIT(PORTC, pin_num);
    20ac:	a5 e3       	ldi	r26, 0x35	; 53
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e5 e3       	ldi	r30, 0x35	; 53
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	48 2f       	mov	r20, r24
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 2e       	mov	r0, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <GPIO_writePin+0x14c>
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <GPIO_writePin+0x148>
    20ce:	80 95       	com	r24
    20d0:	84 23       	and	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	46 c0       	rjmp	.+140    	; 0x2162 <GPIO_writePin+0x1e4>
				}else if(value == LOGIC_HIGH){
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	09 f0       	breq	.+2      	; 0x20de <GPIO_writePin+0x160>
    20dc:	42 c0       	rjmp	.+132    	; 0x2162 <GPIO_writePin+0x1e4>
					SET_BIT(PORTC, pin_num);
    20de:	a5 e3       	ldi	r26, 0x35	; 53
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e5 e3       	ldi	r30, 0x35	; 53
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <GPIO_writePin+0x17e>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <GPIO_writePin+0x17a>
    2100:	84 2b       	or	r24, r20
    2102:	8c 93       	st	X, r24
    2104:	2e c0       	rjmp	.+92     	; 0x2162 <GPIO_writePin+0x1e4>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_LOW){
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	88 23       	and	r24, r24
    210a:	a9 f4       	brne	.+42     	; 0x2136 <GPIO_writePin+0x1b8>
					CLEAR_BIT(PORTD, pin_num);
    210c:	a2 e3       	ldi	r26, 0x32	; 50
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e2 e3       	ldi	r30, 0x32	; 50
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <GPIO_writePin+0x1ac>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <GPIO_writePin+0x1a8>
    212e:	80 95       	com	r24
    2130:	84 23       	and	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	16 c0       	rjmp	.+44     	; 0x2162 <GPIO_writePin+0x1e4>
				}else if(value == LOGIC_HIGH){
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	99 f4       	brne	.+38     	; 0x2162 <GPIO_writePin+0x1e4>
					SET_BIT(PORTD, pin_num);
    213c:	a2 e3       	ldi	r26, 0x32	; 50
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e2 e3       	ldi	r30, 0x32	; 50
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	48 2f       	mov	r20, r24
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	02 2e       	mov	r0, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <GPIO_writePin+0x1dc>
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	0a 94       	dec	r0
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <GPIO_writePin+0x1d8>
    215e:	84 2b       	or	r24, r20
    2160:	8c 93       	st	X, r24
				}
				break;
			}
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <GPIO_readPin+0x6>
    2178:	00 d0       	rcall	.+0      	; 0x217a <GPIO_readPin+0x8>
    217a:	00 d0       	rcall	.+0      	; 0x217c <GPIO_readPin+0xa>
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	88 30       	cpi	r24, 0x08	; 8
    2188:	18 f4       	brcc	.+6      	; 0x2190 <GPIO_readPin+0x1e>
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	10 f0       	brcs	.+4      	; 0x2194 <GPIO_readPin+0x22>
	{
		return 0;
    2190:	1d 82       	std	Y+5, r1	; 0x05
    2192:	9b c0       	rjmp	.+310    	; 0x22ca <GPIO_readPin+0x158>
	}

	switch(port_num)
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	3c 83       	std	Y+4, r19	; 0x04
    219c:	2b 83       	std	Y+3, r18	; 0x03
    219e:	4b 81       	ldd	r20, Y+3	; 0x03
    21a0:	5c 81       	ldd	r21, Y+4	; 0x04
    21a2:	41 30       	cpi	r20, 0x01	; 1
    21a4:	51 05       	cpc	r21, r1
    21a6:	b1 f1       	breq	.+108    	; 0x2214 <GPIO_readPin+0xa2>
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	82 30       	cpi	r24, 0x02	; 2
    21ae:	91 05       	cpc	r25, r1
    21b0:	34 f4       	brge	.+12     	; 0x21be <GPIO_readPin+0x4c>
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	21 15       	cp	r18, r1
    21b8:	31 05       	cpc	r19, r1
    21ba:	71 f0       	breq	.+28     	; 0x21d8 <GPIO_readPin+0x66>
    21bc:	85 c0       	rjmp	.+266    	; 0x22c8 <GPIO_readPin+0x156>
    21be:	4b 81       	ldd	r20, Y+3	; 0x03
    21c0:	5c 81       	ldd	r21, Y+4	; 0x04
    21c2:	42 30       	cpi	r20, 0x02	; 2
    21c4:	51 05       	cpc	r21, r1
    21c6:	09 f4       	brne	.+2      	; 0x21ca <GPIO_readPin+0x58>
    21c8:	43 c0       	rjmp	.+134    	; 0x2250 <GPIO_readPin+0xde>
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	83 30       	cpi	r24, 0x03	; 3
    21d0:	91 05       	cpc	r25, r1
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <GPIO_readPin+0x64>
    21d4:	5b c0       	rjmp	.+182    	; 0x228c <GPIO_readPin+0x11a>
    21d6:	78 c0       	rjmp	.+240    	; 0x22c8 <GPIO_readPin+0x156>
			{
			case PORTA_ID:
				return GET_BIT(PINA, pin_num);
    21d8:	e9 e3       	ldi	r30, 0x39	; 57
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <GPIO_readPin+0x80>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	2a 95       	dec	r18
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <GPIO_readPin+0x7c>
    21f6:	9a 01       	movw	r18, r20
    21f8:	28 23       	and	r18, r24
    21fa:	39 23       	and	r19, r25
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a9 01       	movw	r20, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <GPIO_readPin+0x98>
    2206:	55 95       	asr	r21
    2208:	47 95       	ror	r20
    220a:	8a 95       	dec	r24
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <GPIO_readPin+0x94>
    220e:	ca 01       	movw	r24, r20
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	5b c0       	rjmp	.+182    	; 0x22ca <GPIO_readPin+0x158>
				break;
			case PORTB_ID:
				return GET_BIT(PINB, pin_num);
    2214:	e6 e3       	ldi	r30, 0x36	; 54
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	48 2f       	mov	r20, r24
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <GPIO_readPin+0xbc>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	2a 95       	dec	r18
    2230:	e2 f7       	brpl	.-8      	; 0x222a <GPIO_readPin+0xb8>
    2232:	9a 01       	movw	r18, r20
    2234:	28 23       	and	r18, r24
    2236:	39 23       	and	r19, r25
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a9 01       	movw	r20, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <GPIO_readPin+0xd4>
    2242:	55 95       	asr	r21
    2244:	47 95       	ror	r20
    2246:	8a 95       	dec	r24
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <GPIO_readPin+0xd0>
    224a:	ca 01       	movw	r24, r20
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	3d c0       	rjmp	.+122    	; 0x22ca <GPIO_readPin+0x158>
				break;
			case PORTC_ID:
				return GET_BIT(PINC, pin_num);
    2250:	e3 e3       	ldi	r30, 0x33	; 51
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	02 c0       	rjmp	.+4      	; 0x226a <GPIO_readPin+0xf8>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	2a 95       	dec	r18
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <GPIO_readPin+0xf4>
    226e:	9a 01       	movw	r18, r20
    2270:	28 23       	and	r18, r24
    2272:	39 23       	and	r19, r25
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a9 01       	movw	r20, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <GPIO_readPin+0x110>
    227e:	55 95       	asr	r21
    2280:	47 95       	ror	r20
    2282:	8a 95       	dec	r24
    2284:	e2 f7       	brpl	.-8      	; 0x227e <GPIO_readPin+0x10c>
    2286:	ca 01       	movw	r24, r20
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	1f c0       	rjmp	.+62     	; 0x22ca <GPIO_readPin+0x158>
				break;
			case PORTD_ID:
				return GET_BIT(PIND, pin_num);
    228c:	e0 e3       	ldi	r30, 0x30	; 48
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	48 2f       	mov	r20, r24
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <GPIO_readPin+0x134>
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	2a 95       	dec	r18
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <GPIO_readPin+0x130>
    22aa:	9a 01       	movw	r18, r20
    22ac:	28 23       	and	r18, r24
    22ae:	39 23       	and	r19, r25
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	88 2f       	mov	r24, r24
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	a9 01       	movw	r20, r18
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <GPIO_readPin+0x14c>
    22ba:	55 95       	asr	r21
    22bc:	47 95       	ror	r20
    22be:	8a 95       	dec	r24
    22c0:	e2 f7       	brpl	.-8      	; 0x22ba <GPIO_readPin+0x148>
    22c2:	ca 01       	movw	r24, r20
    22c4:	8d 83       	std	Y+5, r24	; 0x05
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <GPIO_readPin+0x158>
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <GPIO_readPin+0x15c>
				break;
			}


}
    22ca:	5d 81       	ldd	r21, Y+5	; 0x05
    22cc:	5e 83       	std	Y+6, r21	; 0x06
    22ce:	8e 81       	ldd	r24, Y+6	; 0x06
    22d0:	26 96       	adiw	r28, 0x06	; 6
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <GPIO_setupPortDirection+0x6>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <GPIO_setupPortDirection+0x8>
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	84 30       	cpi	r24, 0x04	; 4
    22f6:	90 f5       	brcc	.+100    	; 0x235c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	3c 83       	std	Y+4, r19	; 0x04
    2300:	2b 83       	std	Y+3, r18	; 0x03
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	91 05       	cpc	r25, r1
    230a:	d1 f0       	breq	.+52     	; 0x2340 <GPIO_setupPortDirection+0x5e>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	22 30       	cpi	r18, 0x02	; 2
    2312:	31 05       	cpc	r19, r1
    2314:	2c f4       	brge	.+10     	; 0x2320 <GPIO_setupPortDirection+0x3e>
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	61 f0       	breq	.+24     	; 0x2336 <GPIO_setupPortDirection+0x54>
    231e:	1e c0       	rjmp	.+60     	; 0x235c <GPIO_setupPortDirection+0x7a>
    2320:	2b 81       	ldd	r18, Y+3	; 0x03
    2322:	3c 81       	ldd	r19, Y+4	; 0x04
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	81 f0       	breq	.+32     	; 0x234a <GPIO_setupPortDirection+0x68>
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	83 30       	cpi	r24, 0x03	; 3
    2330:	91 05       	cpc	r25, r1
    2332:	81 f0       	breq	.+32     	; 0x2354 <GPIO_setupPortDirection+0x72>
    2334:	13 c0       	rjmp	.+38     	; 0x235c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2336:	ea e3       	ldi	r30, 0x3A	; 58
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	80 83       	st	Z, r24
    233e:	0e c0       	rjmp	.+28     	; 0x235c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2340:	e7 e3       	ldi	r30, 0x37	; 55
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	80 83       	st	Z, r24
    2348:	09 c0       	rjmp	.+18     	; 0x235c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    234a:	e4 e3       	ldi	r30, 0x34	; 52
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	80 83       	st	Z, r24
    2352:	04 c0       	rjmp	.+8      	; 0x235c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2354:	e1 e3       	ldi	r30, 0x31	; 49
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	80 83       	st	Z, r24
			break;
		}
	}
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <GPIO_writePort+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <GPIO_writePort+0x8>
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	3c 83       	std	Y+4, r19	; 0x04
    2382:	2b 83       	std	Y+3, r18	; 0x03
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	91 05       	cpc	r25, r1
    238c:	d1 f0       	breq	.+52     	; 0x23c2 <GPIO_writePort+0x58>
    238e:	2b 81       	ldd	r18, Y+3	; 0x03
    2390:	3c 81       	ldd	r19, Y+4	; 0x04
    2392:	22 30       	cpi	r18, 0x02	; 2
    2394:	31 05       	cpc	r19, r1
    2396:	2c f4       	brge	.+10     	; 0x23a2 <GPIO_writePort+0x38>
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	61 f0       	breq	.+24     	; 0x23b8 <GPIO_writePort+0x4e>
    23a0:	1e c0       	rjmp	.+60     	; 0x23de <GPIO_writePort+0x74>
    23a2:	2b 81       	ldd	r18, Y+3	; 0x03
    23a4:	3c 81       	ldd	r19, Y+4	; 0x04
    23a6:	22 30       	cpi	r18, 0x02	; 2
    23a8:	31 05       	cpc	r19, r1
    23aa:	81 f0       	breq	.+32     	; 0x23cc <GPIO_writePort+0x62>
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	83 30       	cpi	r24, 0x03	; 3
    23b2:	91 05       	cpc	r25, r1
    23b4:	81 f0       	breq	.+32     	; 0x23d6 <GPIO_writePort+0x6c>
    23b6:	13 c0       	rjmp	.+38     	; 0x23de <GPIO_writePort+0x74>
	{
	case PORTA_ID:
		PORTA = value;
    23b8:	eb e3       	ldi	r30, 0x3B	; 59
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	80 83       	st	Z, r24
    23c0:	0e c0       	rjmp	.+28     	; 0x23de <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    23c2:	e8 e3       	ldi	r30, 0x38	; 56
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	80 83       	st	Z, r24
    23ca:	09 c0       	rjmp	.+18     	; 0x23de <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    23cc:	e5 e3       	ldi	r30, 0x35	; 53
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	80 83       	st	Z, r24
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    23d6:	e2 e3       	ldi	r30, 0x32	; 50
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	80 83       	st	Z, r24
		break;
	}

}
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <GPIO_readPort+0x6>
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <GPIO_readPort+0x8>
    23f4:	0f 92       	push	r0
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	10 f0       	brcs	.+4      	; 0x2406 <GPIO_readPort+0x1a>
	{
		return 0;
    2402:	1c 82       	std	Y+4, r1	; 0x04
    2404:	34 c0       	rjmp	.+104    	; 0x246e <GPIO_readPort+0x82>
	}
	switch(port_num)
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	3b 83       	std	Y+3, r19	; 0x03
    240e:	2a 83       	std	Y+2, r18	; 0x02
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	91 05       	cpc	r25, r1
    2418:	d1 f0       	breq	.+52     	; 0x244e <GPIO_readPort+0x62>
    241a:	2a 81       	ldd	r18, Y+2	; 0x02
    241c:	3b 81       	ldd	r19, Y+3	; 0x03
    241e:	22 30       	cpi	r18, 0x02	; 2
    2420:	31 05       	cpc	r19, r1
    2422:	2c f4       	brge	.+10     	; 0x242e <GPIO_readPort+0x42>
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	61 f0       	breq	.+24     	; 0x2444 <GPIO_readPort+0x58>
    242c:	1f c0       	rjmp	.+62     	; 0x246c <GPIO_readPort+0x80>
    242e:	2a 81       	ldd	r18, Y+2	; 0x02
    2430:	3b 81       	ldd	r19, Y+3	; 0x03
    2432:	22 30       	cpi	r18, 0x02	; 2
    2434:	31 05       	cpc	r19, r1
    2436:	81 f0       	breq	.+32     	; 0x2458 <GPIO_readPort+0x6c>
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	9b 81       	ldd	r25, Y+3	; 0x03
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	91 05       	cpc	r25, r1
    2440:	81 f0       	breq	.+32     	; 0x2462 <GPIO_readPort+0x76>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <GPIO_readPort+0x80>
	{
	case PORTA_ID:
		return PINA;
    2444:	e9 e3       	ldi	r30, 0x39	; 57
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	90 81       	ld	r25, Z
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	10 c0       	rjmp	.+32     	; 0x246e <GPIO_readPort+0x82>
		break;
	case PORTB_ID:
		return PINB;
    244e:	e6 e3       	ldi	r30, 0x36	; 54
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	20 81       	ld	r18, Z
    2454:	2c 83       	std	Y+4, r18	; 0x04
    2456:	0b c0       	rjmp	.+22     	; 0x246e <GPIO_readPort+0x82>
		break;
	case PORTC_ID:
		return PINC;
    2458:	e3 e3       	ldi	r30, 0x33	; 51
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	30 81       	ld	r19, Z
    245e:	3c 83       	std	Y+4, r19	; 0x04
    2460:	06 c0       	rjmp	.+12     	; 0x246e <GPIO_readPort+0x82>
		break;
	case PORTD_ID:
		return PIND;
    2462:	e0 e3       	ldi	r30, 0x30	; 48
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8c 83       	std	Y+4, r24	; 0x04
    246a:	01 c0       	rjmp	.+2      	; 0x246e <GPIO_readPort+0x82>
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <GPIO_readPort+0x86>
		break;
	}
}
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	9d 83       	std	Y+5, r25	; 0x05
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <__vector_9>:

/*******************************************************************************
 *                      ISR Declaration		                                   *
 *******************************************************************************/
/* Timer0 overflow ISR */
ISR(TIMER0_OVF_vect) {
    2484:	1f 92       	push	r1
    2486:	0f 92       	push	r0
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	0f 92       	push	r0
    248c:	11 24       	eor	r1, r1
    248e:	2f 93       	push	r18
    2490:	3f 93       	push	r19
    2492:	4f 93       	push	r20
    2494:	5f 93       	push	r21
    2496:	6f 93       	push	r22
    2498:	7f 93       	push	r23
    249a:	8f 93       	push	r24
    249c:	9f 93       	push	r25
    249e:	af 93       	push	r26
    24a0:	bf 93       	push	r27
    24a2:	ef 93       	push	r30
    24a4:	ff 93       	push	r31
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER0_callBackPtr!=NULL_PTR)
    24ae:	80 91 77 00 	lds	r24, 0x0077
    24b2:	90 91 78 00 	lds	r25, 0x0078
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	29 f0       	breq	.+10     	; 0x24c4 <__vector_9+0x40>
	(*g_TIMER0_callBackPtr)();
    24ba:	e0 91 77 00 	lds	r30, 0x0077
    24be:	f0 91 78 00 	lds	r31, 0x0078
    24c2:	09 95       	icall
}
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	ff 91       	pop	r31
    24ca:	ef 91       	pop	r30
    24cc:	bf 91       	pop	r27
    24ce:	af 91       	pop	r26
    24d0:	9f 91       	pop	r25
    24d2:	8f 91       	pop	r24
    24d4:	7f 91       	pop	r23
    24d6:	6f 91       	pop	r22
    24d8:	5f 91       	pop	r21
    24da:	4f 91       	pop	r20
    24dc:	3f 91       	pop	r19
    24de:	2f 91       	pop	r18
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <__vector_19>:

/* Timer0 compare match ISR */
ISR(TIMER0_COMP_vect) {
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	11 24       	eor	r1, r1
    24f4:	2f 93       	push	r18
    24f6:	3f 93       	push	r19
    24f8:	4f 93       	push	r20
    24fa:	5f 93       	push	r21
    24fc:	6f 93       	push	r22
    24fe:	7f 93       	push	r23
    2500:	8f 93       	push	r24
    2502:	9f 93       	push	r25
    2504:	af 93       	push	r26
    2506:	bf 93       	push	r27
    2508:	ef 93       	push	r30
    250a:	ff 93       	push	r31
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	if (g_TIMER0_callBackPtr!=NULL_PTR)
    2514:	80 91 77 00 	lds	r24, 0x0077
    2518:	90 91 78 00 	lds	r25, 0x0078
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	29 f0       	breq	.+10     	; 0x252a <__vector_19+0x40>
	(*g_TIMER0_callBackPtr)();
    2520:	e0 91 77 00 	lds	r30, 0x0077
    2524:	f0 91 78 00 	lds	r31, 0x0078
    2528:	09 95       	icall
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	ff 91       	pop	r31
    2530:	ef 91       	pop	r30
    2532:	bf 91       	pop	r27
    2534:	af 91       	pop	r26
    2536:	9f 91       	pop	r25
    2538:	8f 91       	pop	r24
    253a:	7f 91       	pop	r23
    253c:	6f 91       	pop	r22
    253e:	5f 91       	pop	r21
    2540:	4f 91       	pop	r20
    2542:	3f 91       	pop	r19
    2544:	2f 91       	pop	r18
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	0f 90       	pop	r0
    254c:	1f 90       	pop	r1
    254e:	18 95       	reti

00002550 <TIMER0_Init>:
/*******************************************************************************
 *                      Function Declarations                                  *
 *******************************************************************************/

void TIMER0_Init(TIMER0_Config* config){
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <TIMER0_Init+0x6>
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = config->initialValue;
    255e:	a2 e5       	ldi	r26, 0x52	; 82
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e9 81       	ldd	r30, Y+1	; 0x01
    2564:	fa 81       	ldd	r31, Y+2	; 0x02
    2566:	84 81       	ldd	r24, Z+4	; 0x04
    2568:	8c 93       	st	X, r24
	TIMSK = config->interruptMask;
    256a:	a9 e5       	ldi	r26, 0x59	; 89
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e9 81       	ldd	r30, Y+1	; 0x01
    2570:	fa 81       	ldd	r31, Y+2	; 0x02
    2572:	83 81       	ldd	r24, Z+3	; 0x03
    2574:	8c 93       	st	X, r24
	OCR0 = config->compareValue;
    2576:	ac e5       	ldi	r26, 0x5C	; 92
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e9 81       	ldd	r30, Y+1	; 0x01
    257c:	fa 81       	ldd	r31, Y+2	; 0x02
    257e:	85 81       	ldd	r24, Z+5	; 0x05
    2580:	8c 93       	st	X, r24
	TCCR0 |= config->mode | config->compareMatchOutputMode | config->clockPrescalar;
    2582:	a3 e5       	ldi	r26, 0x53	; 83
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e3 e5       	ldi	r30, 0x53	; 83
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	20 81       	ld	r18, Z
    258c:	e9 81       	ldd	r30, Y+1	; 0x01
    258e:	fa 81       	ldd	r31, Y+2	; 0x02
    2590:	90 81       	ld	r25, Z
    2592:	e9 81       	ldd	r30, Y+1	; 0x01
    2594:	fa 81       	ldd	r31, Y+2	; 0x02
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	98 2b       	or	r25, r24
    259a:	e9 81       	ldd	r30, Y+1	; 0x01
    259c:	fa 81       	ldd	r31, Y+2	; 0x02
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	89 2b       	or	r24, r25
    25a2:	82 2b       	or	r24, r18
    25a4:	8c 93       	st	X, r24
}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <TIMER0_setValue>:

void TIMER0_setValue(uint8 newValue) {
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	0f 92       	push	r0
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = newValue;
    25bc:	e2 e5       	ldi	r30, 0x52	; 82
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	80 83       	st	Z, r24
}
    25c4:	0f 90       	pop	r0
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <TIMER0_clearValue>:

void TIMER0_clearValue(void) {
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    25d4:	e2 e5       	ldi	r30, 0x52	; 82
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	10 82       	st	Z, r1
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <TIMER0_setCallback>:

void TIMER0_setCallback(void (*functionPtr)(void)) {
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <TIMER0_setCallback+0x6>
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER0_callBackPtr = functionPtr;
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	90 93 78 00 	sts	0x0078, r25
    25f6:	80 93 77 00 	sts	0x0077, r24
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <TIMER0_deinit>:

void TIMER0_deinit(void) {
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    260c:	e2 e5       	ldi	r30, 0x52	; 82
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	10 82       	st	Z, r1
	TIMSK &= 0xFC;
    2612:	a9 e5       	ldi	r26, 0x59	; 89
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e9 e5       	ldi	r30, 0x59	; 89
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	8c 7f       	andi	r24, 0xFC	; 252
    261e:	8c 93       	st	X, r24
	OCR0 = 0;
    2620:	ec e5       	ldi	r30, 0x5C	; 92
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	10 82       	st	Z, r1
	TCCR0 = 0;
    2626:	e3 e5       	ldi	r30, 0x53	; 83
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	10 82       	st	Z, r1
}
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2C_Config *configuration)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <TWI_init+0x6>
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01

	TWBR = configuration->BitRate;
    2640:	a0 e2       	ldi	r26, 0x20	; 32
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e9 81       	ldd	r30, Y+1	; 0x01
    2646:	fa 81       	ldd	r31, Y+2	; 0x02
    2648:	81 81       	ldd	r24, Z+1	; 0x01
    264a:	8c 93       	st	X, r24
    TWSR |= ( (TWSR & ~ 0X03) | configuration->clock );			 //ADJUSTS PRESCALE
    264c:	a1 e2       	ldi	r26, 0x21	; 33
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e1 e2       	ldi	r30, 0x21	; 33
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	28 2f       	mov	r18, r24
    2658:	e1 e2       	ldi	r30, 0x21	; 33
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	98 2f       	mov	r25, r24
    2660:	9c 7f       	andi	r25, 0xFC	; 252
    2662:	e9 81       	ldd	r30, Y+1	; 0x01
    2664:	fa 81       	ldd	r31, Y+2	; 0x02
    2666:	80 81       	ld	r24, Z
    2668:	89 2b       	or	r24, r25
    266a:	82 2b       	or	r24, r18
    266c:	8c 93       	st	X, r24
	
    TWAR = 	  (~0X01 & configuration->slave_address );			//SLAVE ADDRESS FROM BIT 1 TO BIT 7
    266e:	a2 e2       	ldi	r26, 0x22	; 34
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e9 81       	ldd	r30, Y+1	; 0x01
    2674:	fa 81       	ldd	r31, Y+2	; 0x02
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	8e 7f       	andi	r24, 0xFE	; 254
    267a:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    267c:	e6 e5       	ldi	r30, 0x56	; 86
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	84 e0       	ldi	r24, 0x04	; 4
    2682:	80 83       	st	Z, r24
}
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <TWI_start>:

void TWI_start(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2696:	e6 e5       	ldi	r30, 0x56	; 86
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	84 ea       	ldi	r24, 0xA4	; 164
    269c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    269e:	e6 e5       	ldi	r30, 0x56	; 86
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	88 23       	and	r24, r24
    26a6:	dc f7       	brge	.-10     	; 0x269e <TWI_start+0x10>
}
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <TWI_stop>:

void TWI_stop(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    26b6:	e6 e5       	ldi	r30, 0x56	; 86
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	84 e9       	ldi	r24, 0x94	; 148
    26bc:	80 83       	st	Z, r24
}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	0f 92       	push	r0
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    26d0:	e3 e2       	ldi	r30, 0x23	; 35
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    26d8:	e6 e5       	ldi	r30, 0x56	; 86
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	84 e8       	ldi	r24, 0x84	; 132
    26de:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26e0:	e6 e5       	ldi	r30, 0x56	; 86
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	88 23       	and	r24, r24
    26e8:	dc f7       	brge	.-10     	; 0x26e0 <TWI_writeByte+0x1c>
}
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    26fa:	e6 e5       	ldi	r30, 0x56	; 86
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	84 ec       	ldi	r24, 0xC4	; 196
    2700:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2702:	e6 e5       	ldi	r30, 0x56	; 86
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	88 23       	and	r24, r24
    270a:	dc f7       	brge	.-10     	; 0x2702 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    270c:	e3 e2       	ldi	r30, 0x23	; 35
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
}
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2720:	e6 e5       	ldi	r30, 0x56	; 86
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	84 e8       	ldi	r24, 0x84	; 132
    2726:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2728:	e6 e5       	ldi	r30, 0x56	; 86
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	88 23       	and	r24, r24
    2730:	dc f7       	brge	.-10     	; 0x2728 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2732:	e3 e2       	ldi	r30, 0x23	; 35
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
}
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	0f 92       	push	r0
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2748:	e1 e2       	ldi	r30, 0x21	; 33
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	88 7f       	andi	r24, 0xF8	; 248
    2750:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2752:	89 81       	ldd	r24, Y+1	; 0x01
}
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <UART_init>:

#define BAUD_PRESCALE_U2X (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)      // 8 -> DOUBLE SPEED ASYNCHRONOUS
#define BAUD_PRESCALE_SYNCH (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)  // 16 -> ASYNCHRONOUS

void UART_init( UART_Config *config )
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <UART_init+0x6>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
	/*  UCSRB REGISTER
	 *  RXC,TXC,UDR INTERRUPT ENABLE = 0,  T/R DATA BIT 8 = 0
	 */

	UCSRB|= (1<<RXEN) | (1<<TXEN) ;    // TRANSMITER ENABLE AND RECIEVER ENABLE
    276a:	aa e2       	ldi	r26, 0x2A	; 42
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	ea e2       	ldi	r30, 0x2A	; 42
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	88 61       	ori	r24, 0x18	; 24
    2776:	8c 93       	st	X, r24
	/* UCSRC REGISTER
	 * USBS=0 -> 1 STOP BIT
	 * UPM0 =0 ,UPM1=1 -> EVEN PARITY BIT
	 */

	UCSRC|= (1<<URSEL); // SELECTING UCSRC BY SETTING 1 TO 'URSEL'
    2778:	a0 e4       	ldi	r26, 0x40	; 64
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e0 e4       	ldi	r30, 0x40	; 64
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	80 68       	ori	r24, 0x80	; 128
    2784:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ0) | (1<<UCSZ1);   //CHARCTER SIZE 8 BITS IN FRAME TRANSFERED
    2786:	a0 e4       	ldi	r26, 0x40	; 64
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e0 e4       	ldi	r30, 0x40	; 64
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	86 60       	ori	r24, 0x06	; 6
    2792:	8c 93       	st	X, r24

	UCSRC|= ( (config->ParityBits) << 4); //CHOOSE PARITY BITS
    2794:	a0 e4       	ldi	r26, 0x40	; 64
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e0 e4       	ldi	r30, 0x40	; 64
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	28 2f       	mov	r18, r24
    27a0:	e9 81       	ldd	r30, Y+1	; 0x01
    27a2:	fa 81       	ldd	r31, Y+2	; 0x02
    27a4:	81 81       	ldd	r24, Z+1	; 0x01
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	82 95       	swap	r24
    27ac:	92 95       	swap	r25
    27ae:	90 7f       	andi	r25, 0xF0	; 240
    27b0:	98 27       	eor	r25, r24
    27b2:	80 7f       	andi	r24, 0xF0	; 240
    27b4:	98 27       	eor	r25, r24
    27b6:	82 2b       	or	r24, r18
    27b8:	8c 93       	st	X, r24



		if (config->mode) //1 IF SYNCH
    27ba:	e9 81       	ldd	r30, Y+1	; 0x01
    27bc:	fa 81       	ldd	r31, Y+2	; 0x02
    27be:	80 81       	ld	r24, Z
    27c0:	88 23       	and	r24, r24
    27c2:	29 f1       	breq	.+74     	; 0x280e <UART_init+0xb2>
		{
			UCSRC |= ((config->mode) << 6);  // SYNCHRONOUS OPERATION
    27c4:	a0 e4       	ldi	r26, 0x40	; 64
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e0 e4       	ldi	r30, 0x40	; 64
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	28 2f       	mov	r18, r24
    27d0:	e9 81       	ldd	r30, Y+1	; 0x01
    27d2:	fa 81       	ldd	r31, Y+2	; 0x02
    27d4:	80 81       	ld	r24, Z
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	00 24       	eor	r0, r0
    27dc:	96 95       	lsr	r25
    27de:	87 95       	ror	r24
    27e0:	07 94       	ror	r0
    27e2:	96 95       	lsr	r25
    27e4:	87 95       	ror	r24
    27e6:	07 94       	ror	r0
    27e8:	98 2f       	mov	r25, r24
    27ea:	80 2d       	mov	r24, r0
    27ec:	82 2b       	or	r24, r18
    27ee:	8c 93       	st	X, r24

			UCSRC |= (1<<UCPOL); // DATA TRANSMITTED ON FALLING EDGE , AND SAMPLED ON POSITIVE EDGE
    27f0:	a0 e4       	ldi	r26, 0x40	; 64
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e0 e4       	ldi	r30, 0x40	; 64
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	81 60       	ori	r24, 0x01	; 1
    27fc:	8c 93       	st	X, r24

			UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    27fe:	e0 e4       	ldi	r30, 0x40	; 64
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_SYNCH;
    2804:	e9 e2       	ldi	r30, 0x29	; 41
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	83 e3       	ldi	r24, 0x33	; 51
    280a:	80 83       	st	Z, r24
    280c:	25 c0       	rjmp	.+74     	; 0x2858 <UART_init+0xfc>
		}

		else
		{							/* UMSEL =0 -> ASYNCHRONOUS OPERATION
		 	 	 	 	 	 	 	 * U2X =1 DOUBLE TRANSMISSION SPEED FOR ASYNCHRONOUS */
			UCSRC &= ~((config->mode) << 6);
    280e:	a0 e4       	ldi	r26, 0x40	; 64
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e0 e4       	ldi	r30, 0x40	; 64
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	28 2f       	mov	r18, r24
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	80 81       	ld	r24, Z
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	00 24       	eor	r0, r0
    2826:	96 95       	lsr	r25
    2828:	87 95       	ror	r24
    282a:	07 94       	ror	r0
    282c:	96 95       	lsr	r25
    282e:	87 95       	ror	r24
    2830:	07 94       	ror	r0
    2832:	98 2f       	mov	r25, r24
    2834:	80 2d       	mov	r24, r0
    2836:	80 95       	com	r24
    2838:	82 23       	and	r24, r18
    283a:	8c 93       	st	X, r24
			UCSRA |= (1<<U2X);
    283c:	ab e2       	ldi	r26, 0x2B	; 43
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	eb e2       	ldi	r30, 0x2B	; 43
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	82 60       	ori	r24, 0x02	; 2
    2848:	8c 93       	st	X, r24
			UBRRH = (BAUD_PRESCALE_U2X>>8);
    284a:	e0 e4       	ldi	r30, 0x40	; 64
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_U2X;
    2850:	e9 e2       	ldi	r30, 0x29	; 41
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	87 e6       	ldi	r24, 0x67	; 103
    2856:	80 83       	st	Z, r24
		}
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    286e:	eb e2       	ldi	r30, 0x2B	; 43
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	80 72       	andi	r24, 0x20	; 32
    287a:	90 70       	andi	r25, 0x00	; 0
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	b9 f3       	breq	.-18     	; 0x286e <UART_sendByte+0xc>
	UDR=data;
    2880:	ec e2       	ldi	r30, 0x2C	; 44
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	80 83       	st	Z, r24
}
    2888:	0f 90       	pop	r0
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <UART_recieveByte>:

uint8 UART_recieveByte()
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2898:	eb e2       	ldi	r30, 0x2B	; 43
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 23       	and	r24, r24
    28a0:	dc f7       	brge	.-10     	; 0x2898 <UART_recieveByte+0x8>
	return UDR;
    28a2:	ec e2       	ldi	r30, 0x2C	; 44
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
}
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <UART_sendString>:

void UART_sendString(const char *str)
{
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <UART_sendString+0x6>
    28b4:	0f 92       	push	r0
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	9b 83       	std	Y+3, r25	; 0x03
    28bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28be:	19 82       	std	Y+1, r1	; 0x01
    28c0:	0e c0       	rjmp	.+28     	; 0x28de <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	fc 01       	movw	r30, r24
    28ce:	e2 0f       	add	r30, r18
    28d0:	f3 1f       	adc	r31, r19
    28d2:	80 81       	ld	r24, Z
    28d4:	0e 94 31 14 	call	0x2862	; 0x2862 <UART_sendByte>
		i++;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	9b 81       	ldd	r25, Y+3	; 0x03
    28e8:	fc 01       	movw	r30, r24
    28ea:	e2 0f       	add	r30, r18
    28ec:	f3 1f       	adc	r31, r19
    28ee:	80 81       	ld	r24, Z
    28f0:	88 23       	and	r24, r24
    28f2:	39 f7       	brne	.-50     	; 0x28c2 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <UART_receiveString>:

void UART_receiveString(char *str)
{
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <UART_receiveString+0xa>
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	9b 83       	std	Y+3, r25	; 0x03
    2912:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2914:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	9b 81       	ldd	r25, Y+3	; 0x03
    2920:	8c 01       	movw	r16, r24
    2922:	02 0f       	add	r16, r18
    2924:	13 1f       	adc	r17, r19
    2926:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    292a:	f8 01       	movw	r30, r16
    292c:	80 83       	st	Z, r24
    292e:	0f c0       	rjmp	.+30     	; 0x294e <UART_receiveString+0x4e>
	while(str[i] != '#')   // keep receiving until #
	{
		i++;
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	8c 01       	movw	r16, r24
    2942:	02 0f       	add	r16, r18
    2944:	13 1f       	adc	r17, r19
    2946:	0e 94 48 14 	call	0x2890	; 0x2890 <UART_recieveByte>
    294a:	f8 01       	movw	r30, r16
    294c:	80 83       	st	Z, r24

void UART_receiveString(char *str)
{
	uint8 i = 0;
	str[i] = UART_recieveByte();
	while(str[i] != '#')   // keep receiving until #
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	9b 81       	ldd	r25, Y+3	; 0x03
    2958:	fc 01       	movw	r30, r24
    295a:	e2 0f       	add	r30, r18
    295c:	f3 1f       	adc	r31, r19
    295e:	80 81       	ld	r24, Z
    2960:	83 32       	cpi	r24, 0x23	; 35
    2962:	31 f7       	brne	.-52     	; 0x2930 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}
	str[i] = '\0';
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	9b 81       	ldd	r25, Y+3	; 0x03
    296e:	fc 01       	movw	r30, r24
    2970:	e2 0f       	add	r30, r18
    2972:	f3 1f       	adc	r31, r19
    2974:	10 82       	st	Z, r1
}
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	08 95       	ret

00002986 <__prologue_saves__>:
    2986:	2f 92       	push	r2
    2988:	3f 92       	push	r3
    298a:	4f 92       	push	r4
    298c:	5f 92       	push	r5
    298e:	6f 92       	push	r6
    2990:	7f 92       	push	r7
    2992:	8f 92       	push	r8
    2994:	9f 92       	push	r9
    2996:	af 92       	push	r10
    2998:	bf 92       	push	r11
    299a:	cf 92       	push	r12
    299c:	df 92       	push	r13
    299e:	ef 92       	push	r14
    29a0:	ff 92       	push	r15
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	ca 1b       	sub	r28, r26
    29b0:	db 0b       	sbc	r29, r27
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	09 94       	ijmp

000029be <__epilogue_restores__>:
    29be:	2a 88       	ldd	r2, Y+18	; 0x12
    29c0:	39 88       	ldd	r3, Y+17	; 0x11
    29c2:	48 88       	ldd	r4, Y+16	; 0x10
    29c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    29c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    29c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    29ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    29cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d0:	b9 84       	ldd	r11, Y+9	; 0x09
    29d2:	c8 84       	ldd	r12, Y+8	; 0x08
    29d4:	df 80       	ldd	r13, Y+7	; 0x07
    29d6:	ee 80       	ldd	r14, Y+6	; 0x06
    29d8:	fd 80       	ldd	r15, Y+5	; 0x05
    29da:	0c 81       	ldd	r16, Y+4	; 0x04
    29dc:	1b 81       	ldd	r17, Y+3	; 0x03
    29de:	aa 81       	ldd	r26, Y+2	; 0x02
    29e0:	b9 81       	ldd	r27, Y+1	; 0x01
    29e2:	ce 0f       	add	r28, r30
    29e4:	d1 1d       	adc	r29, r1
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	ed 01       	movw	r28, r26
    29f2:	08 95       	ret

000029f4 <_exit>:
    29f4:	f8 94       	cli

000029f6 <__stop_program>:
    29f6:	ff cf       	rjmp	.-2      	; 0x29f6 <__stop_program>
